<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>0x7df - misc</title><link href="http://0x7df.github.io/" rel="alternate"></link><link href="http://0x7df.github.io/feeds/misc.atom.xml" rel="self"></link><id>http://0x7df.github.io/</id><updated>2017-08-06T18:55:00+01:00</updated><entry><title>Scripting Safari's Export to PDF function on a Mac</title><link href="http://0x7df.github.io/scripting-safaris-export-to-pdf-function-on-a-mac.html" rel="alternate"></link><published>2017-08-06T18:55:00+01:00</published><updated>2017-08-06T18:55:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2017-08-06:/scripting-safaris-export-to-pdf-function-on-a-mac.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Safari has an 'Export to PDF...' item in the 'File' menu which, if you use it a
lot, is something worth automating.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://macscripter.net/viewtopic.php?id=41654"&gt;this thread&lt;/a&gt; on
&lt;a href="http://macscripter.net"&gt;MacScripter&lt;/a&gt; this is easy to do using AppleScript.&lt;/p&gt;
&lt;h1&gt;Create script&lt;/h1&gt;
&lt;p&gt;First create the AppleScript script using the native Script Editor app.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open 'Launchpad' and begin typing 'script editor' into the search bar at
   the top to find this app.
   &lt;img alt="Photo" src="http://0x7df.github.io/images/screenshot_launchpad.png"&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Paste the following script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set SaveFolderPath to &amp;quot;~/Documents/Test_PDF_Save_Folder/&amp;quot;
tell application &amp;quot;Safari&amp;quot; to activate
tell application &amp;quot;System Events&amp;quot;
    tell process &amp;quot;Safari&amp;quot;
        click menu item &amp;quot;Show Reader&amp;quot; of menu &amp;quot;View&amp;quot; of menu bar 1
        click menu item &amp;quot;Export as PDF…&amp;quot; of menu &amp;quot;File&amp;quot; of menu bar 1
        repeat until exists sheet 1 of window 1
            delay 0.02
        end repeat
        keystroke &amp;quot;g&amp;quot; using {command down, shift down}
        repeat until exists sheet 1 of sheet 1 of window 1
            delay 0.02
        end repeat
        tell sheet 1 of sheet 1 of window 1
            set value of text field 1 to SaveFolderPath
            click button &amp;quot;Go&amp;quot;
        end tell
        click button &amp;quot;save&amp;quot; of sheet 1 of window 1
        click menu item &amp;quot;Close Tab&amp;quot; of menu &amp;quot;File&amp;quot; of menu bar 1
    end tell
end tell
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;into the Script Editor:
   &lt;img alt="Photo" src="http://0x7df.github.io/images/screenshot_scripteditor.png"&gt;
   This is slightly different from the script at
   &lt;a href="http://macscripter.net/viewtopic.php?id=41654"&gt;this thread&lt;/a&gt;, in that it
   hard-wires a save folder instead of bringing up a dialogue box each time,
   and also that it puts the web page into reader view before exporting it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save the script somewhere, e.g.
    &lt;code&gt;~/Documents/Test_PDF_Save_Folder/safari_export_PDF.scpt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This script can be run from the command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;osascript ~/Documents/Test_PDF_Save_Folder/safari_export_PDF.scpt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to export the currently active tab in Safari to a PDF in the specified
location.&lt;/p&gt;
&lt;h1&gt;Create a keyboard shortcut&lt;/h1&gt;
&lt;p&gt;For extra convenience a keyboard shortcut can be created to run the script.
This uses the 'Automator' app.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start typing 'automator' into the Launchpad search bar:
   &lt;img alt="Photo" src="http://0x7df.github.io/images/screenshot_launchpad2.png"&gt;&lt;/li&gt;
&lt;li&gt;Select 'Service'
   &lt;img alt="Photo" src="http://0x7df.github.io/images/screenshot_automator.png"&gt;&lt;/li&gt;
&lt;li&gt;In the automator app, drag the 'Run shell script' item over to the main
   panel&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;osascript ~/Documents/Test_PDF_Save_Folder/safari_export_PDF.scpt&lt;/code&gt;
   command
   &lt;img alt="Photo" src="http://0x7df.github.io/images/screenshot_automator2.png"&gt;&lt;/li&gt;
&lt;li&gt;Save the workflow. The default save location is &lt;code&gt;~/Library/Services&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the 'System Preferences', go to 'Keyboard', 'Shortcuts', select
   'Services', and select the recently-saved workflow
   &lt;img alt="Photo" src="http://0x7df.github.io/images/screenshot_keyboard_shortcut.png"&gt;&lt;/li&gt;
&lt;li&gt;Choose a shortcut: in this example Shift-Command-E has been chosen&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;Now, after reading an article in Safari, pressing Shift-Command-E saves a PDF
version of the article in the folder specified, and closes the tab.&lt;/p&gt;
&lt;h1&gt;Update&lt;/h1&gt;
&lt;p&gt;I found this script was broken after upgrading from El Capitan to Safari.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;System Events got an error: Can’t get text field 1 of sheet 1 of sheet 1 of
window 1 of process &amp;quot;Safari&amp;quot;. Invalid index.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solving this required downloading XCode to make available the Accessibility
Inspector, which allows you to point and click on graphical interfaces to get
information on the UI elements. It turns out the &lt;code&gt;text field&lt;/code&gt; is now a &lt;code&gt;combo
box&lt;/code&gt;, and changing that in the script got it working again.&lt;/p&gt;</content></entry><entry><title>Calling bullshit</title><link href="http://0x7df.github.io/calling-bullshit.html" rel="alternate"></link><published>2017-05-20T23:20:00+01:00</published><updated>2017-05-20T23:20:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2017-05-20:/calling-bullshit.html</id><summary type="html"></summary><content type="html">&lt;p&gt;I've been watching the really great online lecture series
&lt;a href="http://callingbullshit.org"&gt;Calling Bullshit in the Age of Big Data&lt;/a&gt;
from the &lt;a href="http://www.washington.edu"&gt;University of Washington&lt;/a&gt;
&lt;a href="https://ischool.uw.edu"&gt;Information School&lt;/a&gt;:
&lt;div style="position:relative;height:0;padding-bottom:56.25%"&gt;&lt;iframe src="https://www.youtube.com/embed/A2OtU5vlR0k?list=PLPnZfvKID1Sje5jWxt-4CSZD7bUI4gSPS?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;So when I saw this tweet:
&lt;blockquote class="twitter-tweet" data-lang="en-gb"&gt;&lt;p lang="en" dir="ltr"&gt;If you&amp;#39;re worried / surprised by the NHS still running Windows XP, the good news is our nuclear submarines are all on XP too &lt;a href="https://twitter.com/hashtag/nhscyberattack?src=hash"&gt;#nhscyberattack&lt;/a&gt; &lt;a href="https://t.co/DgR16t3nLe"&gt;https://t.co/DgR16t3nLe&lt;/a&gt;&lt;/p&gt;&amp;mdash; ben goldacre (@bengoldacre) &lt;a href="https://twitter.com/bengoldacre/status/863305364544081920"&gt;13 May 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
in the aftermath of the
&lt;a href="https://arstechnica.com/security/2017/05/an-nsa-derived-ransomware-worm-is-shutting-down-computers-worldwide"&gt;WCry&lt;/a&gt; attack which badly hit the NHS, it struck me as:
'&lt;em&gt;too bad to be true&lt;/em&gt;'. We're often wary of things that are
too &lt;em&gt;good&lt;/em&gt; to be true (although surely still not often enough), but the course
authors point out that the opposite case should also invite our scepticism. We
first need to eschew the possibility that the large numbers of people involved in developing,
procuring, maintaining and protecting IT systems for nuclear
deterrent submarines are all inherently evil, and don't care if the world
accidentally ends in a conflagration, because that would be an example of the
&lt;a href="https://www.researchgate.net/publication/235413325_The_Intuitive_Psychologist_And_His_Shortcomings_Distortions_in_the_Attribution_Process"&gt;&lt;em&gt;fundamental attribution error&lt;/em&gt;&lt;/a&gt;
. Then what remains, the proposition that there's
such a gaping whole in the security infrastructure of a nation state's nuclear
arsenal, should strike us as unlikely enough to want to dig in a bit.&lt;/p&gt;
&lt;p&gt;Before we do, we should note that within hours there was a follow-up tweet
that provided some balance:
&lt;blockquote class="twitter-tweet" data-lang="en-gb"&gt;&lt;p lang="en" dir="ltr"&gt;I can believe there are safe ways to still run Windows XP given resources effort and attentiveness &lt;a href="https://t.co/pYTJ94MWQS"&gt;https://t.co/pYTJ94MWQS&lt;/a&gt;&lt;/p&gt;&amp;mdash; ben goldacre (@bengoldacre) &lt;a href="https://twitter.com/bengoldacre/status/863324326879268864"&gt;13 May 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
but comparing these two tweets gives us a nice illustration of one of the most
important properties of bullshit pointed out by the course authors. It's become
known as Brandolino's Law or Brandolino's Asymmetry Principle:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en-gb"&gt;&lt;p lang="en" dir="ltr"&gt;The bullshit asimmetry: the amount of energy needed to refute bullshit is an order of magnitude bigger than to produce it.&lt;/p&gt;&amp;mdash; Alberto Brandolini (@ziobrando) &lt;a href="https://twitter.com/ziobrando/status/289635060758507521"&gt;11 January 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;To evidence that, the original tweet was retweeted and liked 1.1K and 668
times respectively, versus 12 retweets and 27 likes on the follow-up tweet.&lt;/p&gt;
&lt;h1&gt;I call bullshit&lt;/h1&gt;
&lt;p&gt;So let's look closer.&lt;/p&gt;
&lt;h2&gt;Source&lt;/h2&gt;
&lt;p&gt;First, the tweet is a retweet of one that links to
&lt;a href="http://www.popularmechanics.com/military/weapons/a19061/britains-doomsday-subs-run-windows-xp"&gt;an article in Popular Mechanics&lt;/a&gt;,
which itself is pretty much just a rehash of
&lt;a href="https://www.theguardian.com/technology/2016/jan/16/trident-old-technology-brave-new-world-cyber-warfare"&gt;a slightly earlier Guardian article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, another well-respected debunker of bullshit,
&lt;a href="http://www.badscience.net/about-dr-ben-goldacre"&gt;Ben Goldacre&lt;/a&gt;
(the name should be
familiar), wrote in his book &lt;a href="https://read.amazon.co.uk/kp/embed?asin=B00HATQA8K&amp;amp;preview=newtab&amp;amp;linkCode=kpe&amp;amp;ref_=cm_sw_r_kb_dp_uJlizbW9JX5QN"&gt;&lt;em&gt;I think you'll find it's a bit more complicated
than that&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why Don't Journalists Link to Primary Sources?&lt;/p&gt;
&lt;p&gt;Whether it's a press release, an academic journal article, a formal report,
or even the full transcript of an interview, the primary source contains more
information for interested readers: it shows your working, and it allows
people to check whether what you wrote is true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now I appreciate that the tweet, even though made by a journalist, isn't journalism
- it's just a tweet - but a well-known journalist has an 'institutional
credibility' that gives his output weight, so perhaps linking to primary
sources still matters in this case too. More importantly:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... There is a bigger fish here: if we had a &lt;em&gt;culture&lt;/em&gt; of linking to primary
sources - if they were always just a click away - then shame alone would
probably have stopped it going online. [My italics.]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That culture, if we're to protect against bullshit when we get much of our news
from Twitter and Facebook, needs to be ubiquitous and not just the purview of
professional journalists when doing their day jobs.&lt;/p&gt;
&lt;p&gt;So now we know the 'original' source of the story, we might slightly update our Bayesian
priors for the story being true, because we know the Guardian has political
leanings that could mean it's more inclined to be against nuclear weapons. In
fact the Guardian article is largely about how Trident is obsolete (&lt;em&gt;'Trident is
old technology': the brave new world of cyber warfare&lt;/em&gt;).
We might reasonably expect a platform called Popular Mechanics to be more
neutral, so by referring us to this, we're not only one unecessary step removed
from the 'original', but also deprived of some important information about the
possible interests and agenda of the originator. Calling Bullshit's guide to
spotting bullshit urges us always to ask:
&lt;em&gt;Who is telling me this?&lt;/em&gt; and &lt;em&gt;What's in it for them?&lt;/em&gt;. We need the primary
source to do this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Spotting bullshit" src="http://0x7df.github.io/images/calling_bullshit_0x7df.png"&gt;&lt;/p&gt;
&lt;h2&gt;Weasel words&lt;/h2&gt;
&lt;p&gt;In any case, I refer to the Guardian article as the 'primary source' or
'original' in only the loosest sense. In fact it simply says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Critics point in particular to the Royal Navy’s decision to install a variant
of Windows XP as the operating system on its missile-carrying Vanguard-class
submarines. It was cheaper than the alternatives, but Windows for Submarines,
as it is called, is also more vulnerable to malware as it comes off-the-
shelf. This also means there are more bugs in circulation that could affect
it, and every time a submarine comes to port and gets a software patch, it
is newly vulnerable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Over and above the apparent technical solecism of suggesting that
patching an operating system is what makes it vulnerable, the article uses
weasel words, citing anonynous 'critics' without giving any indication of how
credible they might be, or how to verify them.&lt;/p&gt;
&lt;h2&gt;Missing information&lt;/h2&gt;
&lt;p&gt;On further Googling, the story seems to originate with a
&lt;a href="https://www.theregister.co.uk"&gt;Register&lt;/a&gt;
&lt;a href="https://www.theregister.co.uk/2008/12/16/windows_for_submarines_rollout"&gt;article&lt;/a&gt;
, which says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Initial reports as the programme developed suggested that the OS in question
would be Windows 2000, but those who have worked on it have since informed
the Reg that in fact it is mostly based on XP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is slightly better than the Guardian's weasel words because at least the
assertion that XP is being used is attributed to people who have
worked on the installation of the system. However it's still pretty weak.&lt;/p&gt;
&lt;p&gt;The Register article though, isn't actually critical of the system:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Many in the software community have viewed the Royal Navy's wholesale move to
Windows-based command systems with concern [and note here that it's actally
the use of Windows-based systems overall that is criticised, not the use of
XP specifically]... we'd go relatively easy on submarine worries - even the
Trident boats - as sub command LANs are by their nature very isolated and
physically secure, and submarines almost never need to give their command
systems autonomous firing authority.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not only this, but this article is from &lt;em&gt;2008&lt;/em&gt;, six years before
support for XP ended, and there is no information about what might have
happened since then - it's perfectly plausible that the systems were upgraded,
or a support contract was negotiated like the one the US Navy is reported to
have (by Popular Mechanics again), which involves:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;paying for extra security and updates while it transitions to more modern
operating systems. A $9 million dollar tech support deal it cut with
Microsoft is good until July 2016, with an option to extend for another year
for $31 million.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the news article is really reporting, not that we know Trident submarines
run an obsolete operating system, but that back in 2008, there was a hint that
Trident ran an operating system, which didn't become obsolete for a further six
years.&lt;/p&gt;</content></entry><entry><title>Locking Git worktrees</title><link href="http://0x7df.github.io/locking-git-worktrees.html" rel="alternate"></link><published>2017-03-06T23:08:00+00:00</published><updated>2017-03-06T23:08:00+00:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2017-03-06:/locking-git-worktrees.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Git worktrees provide a way of separating the worktree for a given branch -
i.e. the project working files that are being version controlled - from the
.git directory containing Git's system files. The worktree can be stored
anywhere, and Git keeps a reference to it in the .git directory (in
the &lt;code&gt;.git/worktrees/&amp;lt;branchame&amp;gt;&lt;/code&gt; directory.)&lt;/p&gt;
&lt;p&gt;Worktrees can be safely deleted when finished with, as long as all important
changes have been committed. However, when you delete a worktree directory, the
references remain. If you try to create a new worktree for the same branch, Git
issues an error message because it checks for this reference metadata, rather
than for the actual worktree itself. Under normal circumstances this metadata
remains only until Git does its regular garbage collection, or you run &lt;code&gt;git
worktree prune&lt;/code&gt;. At that point Git cleans up references to any worktrees that
it can't find, and thence you can create a new worktree without the error.&lt;/p&gt;
&lt;p&gt;This is a problem if you store worktrees on removable media, or on local
disks whilst using multiple machines (with a network-accessible .git). It's
possible to unintentionally clean up references in the .git dir to worktrees
that haven't been deleted, but are just on currently-unmounted disks. To avoid
this you can protect the worktree by adding a file called &lt;code&gt;locked&lt;/code&gt; in the .git
directory for the branch (e.g. &lt;code&gt;.git/worktrees/&amp;lt;branchname&amp;gt;/locked&lt;/code&gt;). The
content of this file is unimportant, but it's not a bad idea to describe the
reason for locking the branch.&lt;/p&gt;
&lt;p&gt;The side effect is of course that worktree metadata doesn't get cleaned up for
worktrees that have been deleted; it's a good idea to get into the habit of
deleting the &lt;code&gt;locked&lt;/code&gt; file when deleting a worktree, until a there's a built-in
&lt;code&gt;git worktree remove&lt;/code&gt; command to look after this automatically.&lt;/p&gt;</content></entry><entry><title>Improving Bash scripts</title><link href="http://0x7df.github.io/improving-bash-scripts.html" rel="alternate"></link><published>2017-03-05T11:44:00+00:00</published><updated>2017-03-05T11:44:00+00:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2017-03-05:/improving-bash-scripts.html</id><summary type="html"></summary><content type="html">&lt;p&gt;I've been working on improving my Bash scripting recently, working
systematically through the &lt;a href="http://www.tldp.org/LDP/abs/abs-guide.pdf"&gt;Advanced Bash-Scripting Guide&lt;/a&gt; for things I didn't know and for
good practices that I haven't systematically applied.&lt;/p&gt;
&lt;p&gt;Here are a few of the things it motivated me to apply across all my Bash
scripts.&lt;/p&gt;
&lt;h2&gt;Finding shell scripts&lt;/h2&gt;
&lt;p&gt;All my scripts already consistently used a sha-bang, which made them easy to
find:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find ~/Code -type f -not -path &lt;span class="s2"&gt;&amp;quot;*/.git/*&amp;quot;&lt;/span&gt; -print0 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; xargs -0 grep -Il &lt;span class="s2"&gt;&amp;quot;^[ ]*\#\!/[^\#\!]*sh&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;find&lt;/code&gt; command searches for all files in the &lt;code&gt;~/Code&lt;/code&gt; directory (filtering
out any that are inside a &lt;code&gt;.git&lt;/code&gt; directory) and passes the resulting list to
&lt;code&gt;xargs&lt;/code&gt;, which runs the &lt;code&gt;grep&lt;/code&gt; command on each result.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-print0&lt;/code&gt; and &lt;code&gt;-0&lt;/code&gt;
arguments to &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;xargs&lt;/code&gt; are designed to work with each other to protect
against whitespace or other dodgy characters in pathnames that &lt;code&gt;xargs&lt;/code&gt; would
split on. The former causes &lt;code&gt;find&lt;/code&gt; to separate the list of pathnames that it
produces with a special null character, and the latter causes &lt;code&gt;xargs&lt;/code&gt; to split
the list on that same character rather than on the usual characters, like
whitespace.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-I&lt;/code&gt; and &lt;code&gt;-l&lt;/code&gt; flags to &lt;code&gt;grep&lt;/code&gt; tell it to ignore binary files, and to print
out the name of the matched file, rather than the matching line, respectively.&lt;/p&gt;
&lt;p&gt;The regular expression matches strings of the form &lt;code&gt;#!/&lt;/code&gt;...&lt;code&gt;sh&lt;/code&gt;, where the
middle part represented here by ... can consist of any number of characters
other than &lt;code&gt;#&lt;/code&gt; or &lt;code&gt;!&lt;/code&gt;. This allows it to match various forms of sha-bang, such
as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;#!/bin/ksh&lt;/span&gt;
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="c1"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note also that only cases where the sha-bang is preceded by zero or more spaces
are matched, to prevent, for example, &lt;code&gt;this is a sha-bang: #!/bin/bash&lt;/code&gt; from
being matched.&lt;/p&gt;
&lt;p&gt;Once I had the list of scripts, I looped over the resulting list and &lt;code&gt;grep&lt;/code&gt;ped
for the following desirable features.&lt;/p&gt;
&lt;h2&gt;Error-checking with &lt;code&gt;set&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;A few of my scripts used &lt;code&gt;set -e&lt;/code&gt; or &lt;code&gt;set -u&lt;/code&gt;, depending on whether some
problem had cropped up while I was developing or debugging them that using
those commands helped me solve. However I decided it was time to get into the
habit of using them systematically across all my scripts, and to start using
&lt;code&gt;pipefail&lt;/code&gt; as well. Hence I added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; -eu
&lt;span class="nb"&gt;set&lt;/span&gt; -o pipefail
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to the top of all scripts that didn't already have them. If a script fails
because of an error in a pipe, no information is printed; but:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PIPESTATUS&lt;/span&gt;&lt;span class="p"&gt;[*]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will show the return codes of each command in the pipe; irritatingly, this
works only in Bash and not in Korn shell scripts. (There is an equivalent
&lt;code&gt;$pipestatus&lt;/code&gt; variable in Z shell.)&lt;/p&gt;
&lt;h2&gt;Extended test command&lt;/h2&gt;
&lt;p&gt;I was inconsistently mixing the standard &lt;code&gt;test&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt; ... &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the extended version, originally introduced in Korn shell and later ported
to Bash:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt; ... &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The latter has a few advantages.&lt;/p&gt;
&lt;p&gt;Quoting variables within &lt;code&gt;[[ ... ]]&lt;/code&gt; isn't necessary. &lt;code&gt;[&lt;/code&gt; is a command
and what follows are arguments to that command; if a variable in a
comparison is unset, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; -lt &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then &lt;code&gt;[&lt;/code&gt; sees only two arguments, and therefore complains that &lt;code&gt;-lt&lt;/code&gt; is not
a permissible operator for what it thinks is a two-argument form of the
command. Quoting ensures that the correct number of arguments is seen by
test. However, this isn't the case with &lt;code&gt;[[ .. ]]&lt;/code&gt; constructs.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; logical operators can be used, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$d&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$d&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; relational operators work without being escaped:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &amp;lt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but remember of course that these are text comparisons, so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt; &amp;gt; &lt;span class="m"&gt;54&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;   &lt;span class="c1"&gt;# Returns true&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt; -gt &lt;span class="m"&gt;54&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="c1"&gt;# Returns false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The extended test command implements the &lt;code&gt;=~&lt;/code&gt; regular-expression match:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;foobar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ bar &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It should be noted tht file globbing and word splitting do not take place in
the extended test command. From the Advanced Bash-Scripting Guide (attributed
to Stephane Chazelas):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; z* &lt;span class="o"&gt;]]&lt;/span&gt;   &lt;span class="c1"&gt;# True if $a starts with a &amp;quot;z&amp;quot; (pattern matching).&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;z*&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="c1"&gt;# True if $a is equal to z* (literal matching).&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; z* &lt;span class="o"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;# File globbing and word splitting take place.&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;z*&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# True if $a is equal to z* (literal matching).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Explicit typing&lt;/h2&gt;
&lt;p&gt;In Bash, either &lt;code&gt;declare&lt;/code&gt; or its synonym &lt;code&gt;typeset&lt;/code&gt; can be used to specify the
type of variables. I prefer &lt;code&gt;typeset&lt;/code&gt;, as it's also recognised by the Korn
shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;typeset&lt;/span&gt; -i integer_variable
&lt;span class="nb"&gt;typeset&lt;/span&gt; -r constant
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;-r&lt;/code&gt; form has the alternative &lt;code&gt;readonly&lt;/code&gt;, but using the &lt;code&gt;typeset&lt;/code&gt; form also
gives some consistency since &lt;code&gt;typeset&lt;/code&gt; has other uses, such as declaring
arrays:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;typeset&lt;/span&gt; -a an_array &lt;span class="c1"&gt;# Prior to Bash v4&lt;/span&gt;
&lt;span class="nb"&gt;typeset&lt;/span&gt; -A an_array &lt;span class="c1"&gt;# Bash v4 and Korn shell&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as well as allowing multiple attributes to be declared at once:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;typeset&lt;/span&gt; -ir integer_constant
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and attributes to be removed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;typeset&lt;/span&gt; +r variable &lt;span class="c1"&gt;# No longer read-only&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and finally in functions to define the variable scope to be local to
the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;typeset&lt;/span&gt; local_variable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The variable is local whether or not other arguments (e.g. &lt;code&gt;-i&lt;/code&gt;, &lt;code&gt;-r&lt;/code&gt;, etc.)
are supplied. Note that a variable inside a function declared with &lt;code&gt;readonly&lt;/code&gt;
is &lt;em&gt;not&lt;/em&gt; local, whereas if declared with &lt;code&gt;typeset -r&lt;/code&gt; it is - this is another
reason to use &lt;code&gt;typeset -r&lt;/code&gt; over &lt;code&gt;readonly&lt;/code&gt;, since it's good practice to make
variables local by default.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is just scratching the surface of 'advanced' Bash scripting tips for
defensive programming. More later.&lt;/p&gt;</content></entry></feed>