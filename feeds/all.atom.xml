<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>0x7df</title><link href="http://0x7df.github.io/" rel="alternate"></link><link href="http://0x7df.github.io/feeds/all.atom.xml" rel="self"></link><id>http://0x7df.github.io/</id><updated>2019-07-27T20:31:00+01:00</updated><subtitle>0x7df subtitle</subtitle><entry><title>OpenMP 6</title><link href="http://0x7df.github.io/openmp-6.html" rel="alternate"></link><published>2019-07-27T20:31:00+01:00</published><updated>2019-07-27T20:31:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2019-07-27:/openmp-6.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;Work-sharing constructs&lt;/h2&gt;
&lt;p&gt;As
&lt;a href="http://0x7df.github.io/openmp-1.html"&gt;we've&lt;/a&gt;
&lt;a href="http://0x7df.github.io/openmp-2.html"&gt;seen&lt;/a&gt;
&lt;a href="http://0x7df.github.io/openmp-3.html"&gt;in&lt;/a&gt;
&lt;a href="http://0x7df.github.io/openmp-4.html"&gt;previous&lt;/a&gt;
&lt;a href="http://0x7df.github.io/openmp-5.html"&gt;posts&lt;/a&gt;
, in a parallel region, all threads execute the same code.
&lt;a href="http://0x7df.github.io/openmp-5.html"&gt;When we parallelised the calculation of the Mandelbrot set&lt;/a&gt;
, we had to devise manual ways of dividing the work amongst the threads
ourselves.&lt;/p&gt;
&lt;p&gt;However, OpenMP provides additional directives, called &lt;em&gt;work-sharing
directives&lt;/em&gt;, to help with this. Work-sharing directives indicate that work
should be divided up between threads, rather than replicated.&lt;/p&gt;
&lt;h3&gt;Parallel Do&lt;/h3&gt;
&lt;p&gt;OpenMP has extensive support for parallelising loops, since loops are the main
source of parallelism in many, particularly scientific, applications.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!$OMP DO [&amp;lt;clauses&amp;gt;...]
...
[!$OMP END DO]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The closing directive is optional.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;!$OMP DO&lt;/code&gt; directive can take:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PRIVATE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FIRSTPRIVATE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REDUCTION&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;clauses. Recall from &lt;a href="http://0x7df.github.io/openmp-3.html"&gt;earlier&lt;/a&gt; that loop counters are
private by default (in Fortran).&lt;/p&gt;
&lt;p&gt;Since the &lt;code&gt;!OMP PARALLEL&lt;/code&gt; / &lt;code&gt;$OMP DO&lt;/code&gt; combination is so common, there's a
shorthand version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!$OMP PARALLEL DO [&amp;lt;clauses&amp;gt;...]
...
[!$OMP END PARALLEL DO]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can take all the clauses that the &lt;code&gt;PARALLEL&lt;/code&gt; directive can take.&lt;/p&gt;
&lt;p&gt;Returning to our Mandelbrot set example, we can replace the logic for manually
distributing threads with the &lt;code&gt;!$OMP DO&lt;/code&gt; directive:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  !$OMP DO
  do ipix = 1_ik, npix

      ... loop body ...

  enddo
  !$OMP END DO
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The speedup we see is comparable with the first example, where we divided the
pixels into a set of &lt;span class="math"&gt;\(N\)&lt;/span&gt; contiguous blocks, where &lt;span class="math"&gt;\(N\)&lt;/span&gt; was the number of threads
used.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;SCHEDULE&lt;/code&gt; clause&lt;/h4&gt;
&lt;p&gt;Without any clauses, &lt;code&gt;!$OMP DO&lt;/code&gt; or &lt;code&gt;!$OMP PARALLEL DO&lt;/code&gt; will attempt to
distribute work as evenly as possible across threads. The scheduling can also
be controlled explicitly using the &lt;code&gt;SCHEDULE&lt;/code&gt; clause:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!$OMP DO SCHEDULE(STATIC[,n]|DYNAMIC[,n]|AUTO|GUIDED|RUNTIME)
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;n&lt;/code&gt; is an integer chunk size to be passed to the scheduling algorithm.&lt;/p&gt;
&lt;h5&gt;&lt;code&gt;STATIC&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;If &lt;code&gt;n&lt;/code&gt; is specified, the iterations are divided into chunks of
size &lt;code&gt;n&lt;/code&gt;, and distributed cyclically to the the threads; this is called a
&lt;em&gt;block cyclic&lt;/em&gt; schedule. If a chunk size is not specified, the one chunk per
thread is created, of approximately equal size; this is a &lt;em&gt;block&lt;/em&gt; schedule.&lt;/p&gt;
&lt;p&gt;In the manual work distribution in the
&lt;a href="http://0x7df.github.io/openmp-5.html"&gt;Mandelbrot set exercise&lt;/a&gt;
, the first, poorer way we chose of distributing the threads was equivalent to
&lt;code&gt;SCHEDULE(STATIC)&lt;/code&gt;, and the second more successful attempt was equivalent to
&lt;code&gt;SCHEDULE(STATIC, 1)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Looking at the run times, we can see this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="http://0x7df.github.io/images/mandelbrot_openmp.001.png"&gt;&lt;/p&gt;
&lt;p&gt;The figure shows speed-ups (lower is better) compared with the serial version
as a function of chunk size, for different schedules. The manual block schedule
is the green curve and the manual cyclic schedule is the green curve. Use of
the &lt;code&gt;!$OMP DO SCHEDULE(STATIC, n)&lt;/code&gt; directive instead, gives the red curve. For
&lt;span class="math"&gt;\(n = 1\)&lt;/span&gt; the performance is similar to the manual cyclic, and for &lt;span class="math"&gt;\(n = 525\)&lt;/span&gt; the
performance is similar to the manual block schedule (where the total number of
pixels in the problem was 2100, and four threads were used).&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;DYNAMIC&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;With the dynamic schedule, the problem is broken up into chunks of size &lt;span class="math"&gt;\(n\)&lt;/span&gt; as
before, but instead of being cyclically allocated to threads, the chunks are
allocated dynamically; i.e. on a first-come, first-served basis. Once a thread
finishes its chunk, it is assigned the next chunk in the list. If no chunk size
is specified, it defaults to one.&lt;/p&gt;
&lt;p&gt;As might be expected, this schedule improves the overall performance slightly.
Not only this, but the performance is less sensitive to chunk size.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="http://0x7df.github.io/images/mandelbrot_openmp.002.png"&gt;&lt;/p&gt;
&lt;p&gt;Here we've also added single points for both the static and dynamic schedules,
to indicate the performance when no chunk size is specified.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;GUIDED&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This schedule is like &lt;code&gt;DYNAMIC&lt;/code&gt;, except that the chunk size starts off large
and gets exponentially smaller as it proceeds. The size of the next chunk is
proportional to the number of remaining iterations divided by the number of
threads. In this scheme the chunk size &lt;span class="math"&gt;\(n\)&lt;/span&gt; defines the &lt;em&gt;minimum&lt;/em&gt; chunk size;
when this is not defined, the default is one.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;GUIDED&lt;/code&gt; schedule performs poorly for this problem at this scale; better
than serial, but consistently worse than all the other ways of dividing the
problem considered so far.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;AUTO&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;AUTO&lt;/code&gt; schedule allows the run-time complete freedom to choose the
assignment of loop iterations to threads. This is useful if a loop is executed
many time, as then the runtime can evolve a good schedule with high performance
and low overheads.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;RUNTIME&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;RUNTIME&lt;/code&gt; causes the schedule to be determined at run time, from the
&lt;code&gt;OMP_SCHEDULE&lt;/code&gt; environment variable. E.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;OMP_SCHEDULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dynamic, 8&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Choosing a schedule&lt;/h4&gt;
&lt;p&gt;The following rules of thumb will help choosing a schedule:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;STATIC&lt;/code&gt; has the lowest overhead, but is appropriate for only load-balanced
   loops.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STATIC, n&lt;/code&gt; can be an improvement for mildly load-imbalanced loops; the
   smaller chunks can potentially help mix up the more and less costly
   iterations so they are spread more evenly across threads.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DYNAMIC&lt;/code&gt; is often better if the load imbalance is very severe. However,
   care must be taken with data locality.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GUIDED&lt;/code&gt; can be an improvement over &lt;code&gt;DYNAMIC&lt;/code&gt;, but care should be taken
    with loops where the earlier iterations are more costly. In such cases,
    since the loop by definition can be performed in any order, it might be
    possible to re-order it to begin with the less costly iterations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AUTO&lt;/code&gt; might be useful if the loop is executed many times over.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RUNTIME&lt;/code&gt; should only be used for interactive experimentation.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-1.html"&gt;OpenMP 1 (Overview, Implementaion)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-2.html"&gt;OpenMP 2 (Parallel regions, OpenMP functions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-3.html"&gt;OpenMP 3 (OpenMP clauses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-4.html"&gt;OpenMP 4 (Reductions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-5.html"&gt;OpenMP 5 (Exercise: Madelbrot set)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-6.html"&gt;OpenMP 6 (Work-sharing constructs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-7.html"&gt;OpenMP 7 (Synchronisation)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;

&lt;p&gt;These notes are built on the "Hands-on Introduction to OpenMP" tutorial given at the UK OpenMP Users' Conference.&lt;/p&gt;
&lt;p&gt;This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"&gt;http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This means you are free to copy and redistribute the material and adapt and build on the
material under the following terms: you must give appropriate credit, provide a link to the license and indicate if changes were made. If you adapt or build on the material you must distribute your work under the same license as the original.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content></entry><entry><title>OpenMP 5</title><link href="http://0x7df.github.io/openmp-5.html" rel="alternate"></link><published>2019-07-27T20:30:00+01:00</published><updated>2019-07-27T20:30:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2019-07-27:/openmp-5.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;Exercise - determine the area of a Mandelbrot set&lt;/h2&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;In &lt;a href="http://0x7df.github.io/openmp-1.html"&gt;several&lt;/a&gt; &lt;a href="http://0x7df.github.io/openmp-2.html"&gt;previous&lt;/a&gt; &lt;a href="http://0x7df.github.io/openmp-3.html"&gt;posts&lt;/a&gt; &lt;a href="http://0x7df.github.io/openmp-4.html"&gt;...&lt;/a&gt;, the basics of OpenMP were described.&lt;/p&gt;
&lt;p&gt;As an exercise, let's determine the area of a Mandelbrot set using a simple 
algorithm parallelised with OpenMP.&lt;/p&gt;
&lt;h3&gt;Plotting a Mandelbrot set&lt;/h3&gt;
&lt;p&gt;The Mandelbrot set is the set of complex numbers, &lt;span class="math"&gt;\(c\)&lt;/span&gt;, for which the function
&lt;span class="math"&gt;\(f(z) = z^2 +c\)&lt;/span&gt; does not diverge when iterated from &lt;span class="math"&gt;\(z = 0\)&lt;/span&gt;. That is, the
sequence &lt;span class="math"&gt;\(f(0), f(f(0)), ...\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(z_0 = 0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(z_1 = z_0^2 + c = c\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(z_2 = z_1^2 + c = c^2 + c = c(c + 1)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(z_3 = z_2^2 + c = c^2(c+1)^2 + c = c[c(c+1)^2 + 1]\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;does not diverge.&lt;/p&gt;
&lt;p&gt;Plotting a Mandelbrot set involves creating a two-dimensional grid of pixels (a
discretised representation of the complex plane), representing the potential
&lt;span class="math"&gt;\(c\)&lt;/span&gt; values, and then running an algorithm
for each pixel to determine whether it's inside the set (the sequence does not diverge for that value of &lt;span class="math"&gt;\(c\)&lt;/span&gt;) or outside the set.&lt;/p&gt;
&lt;p&gt;Since the process for a given pixel is entirely independent of all other
pixels, this process parallelises very well. Algorithms like this are often called
&lt;em&gt;embarrassingly parallel&lt;/em&gt;, as the different tasks really are completely independent of each
other and involve no communication or synchronisation, except perhaps for a step
at the end. The speedup achieved by increasing the number of threads should be
very close to ideal.&lt;/p&gt;
&lt;p&gt;We will use a simple condition of &lt;span class="math"&gt;\(|z_i| &amp;gt; 2\)&lt;/span&gt; to identify points that diverge.
Of course, the points that diverge do so at different rates (the points closer
to the edges diverge more slowly), and we need to iterate for longer to
determine if a point exceeds this threshold if it is diverging slowly.
Therefore even with a finite threshold, in practice a maximum number of
iterations is also defined. Since points closer to the edges diverge more and
more slowly, this tends to smooth the edges; the lower the maximum number of
iterations is, the less detail we see around the edges.&lt;/p&gt;
&lt;p&gt;We will begin with a serial implementation, and just write something to prove
we're calculating the Mandelbrot set correctly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;mandelbrot_serial&lt;/span&gt;

    &lt;span class="k"&gt;implicit none&lt;/span&gt;

&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;ik&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;rk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;

    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;maximum_iterations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100000_ik&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt;    &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;escape_threshold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.0_rk&lt;/span&gt;

    &lt;span class="kt"&gt;real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt;    &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;xmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.5_rk&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt;    &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;xmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0_rk&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt;    &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;ymin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0_rk&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt;    &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;ymax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0_rk&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt;    &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;xsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xmax&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;xmin&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt;    &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;ysize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ymax&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ymin&lt;/span&gt;

    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;scale_factor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;80_ik&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7_ik&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;scale_factor&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;ny&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2_ik&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;scale_factor&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;npix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ny&lt;/span&gt;

    &lt;span class="kt"&gt;real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;ipix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iteration&lt;/span&gt;

    &lt;span class="kt"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="kt"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;

    &lt;span class="kt"&gt;logical&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;diverged&lt;/span&gt;

    &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xsize&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ysize&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ny&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="n"&gt;ipix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;npix&lt;/span&gt;
        &lt;span class="n"&gt;iy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipix&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nx&lt;/span&gt;
        &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ipix&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;iy&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nx&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xmin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ymin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;iy&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;1.e-07_rk&lt;/span&gt;

        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;cmplx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;diverged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
        &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="n"&gt;iteration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maximum_iterations&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;escape_threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;                &lt;/span&gt;&lt;span class="n"&gt;diverged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
                &lt;span class="k"&gt;exit&lt;/span&gt;
&lt;span class="k"&gt;            &lt;/span&gt;&lt;span class="n"&gt;endif&lt;/span&gt;
            &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2_ik&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
        &lt;span class="n"&gt;enddo&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;diverged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;            write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
        &lt;span class="n"&gt;endif&lt;/span&gt;
    &lt;span class="n"&gt;enddo&lt;/span&gt;

&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;mandelbrot_serial&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We implement a one-dimensional loop over the pixels, and first find the indices in
the &lt;span class="math"&gt;\(x\)&lt;/span&gt;- and &lt;span class="math"&gt;\(y\)&lt;/span&gt;-dimensions of the pixel, and from these the &lt;span class="math"&gt;\(x\)&lt;/span&gt; and &lt;span class="math"&gt;\(y\)&lt;/span&gt;
co-ordinates; these are of course the real and imaginary parts of the complex
number, &lt;span class="math"&gt;\(c\)&lt;/span&gt;. Note that since the set is symmetric about the &lt;span class="math"&gt;\(y\)&lt;/span&gt;-axis, we only
calculate for &lt;span class="math"&gt;\(y \ge 0\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We then iterativaly calculate &lt;span class="math"&gt;\(z_i = z_{i-1}^2 + c\)&lt;/span&gt;, starting from
&lt;span class="math"&gt;\(z_0 = 0\)&lt;/span&gt;, until &lt;span class="math"&gt;\(|z_i| &amp;gt; 2\)&lt;/span&gt;, which is our escape threshold. If this condition is
fulfilled, we assume the sequence has diverged, which means the point is not part of the
set. Otherwise, the point is considered part of the set, and the &lt;span class="math"&gt;\(x\)&lt;/span&gt;, &lt;span class="math"&gt;\(y\)&lt;/span&gt;
coordinates are printed to allow plotting.&lt;/p&gt;
&lt;p&gt;Compiling:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -o mandelbrot_serial.x mandelbrot_serial.f95
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./mandelbrot_serial.x &amp;gt; mandelbrot_serial.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;gives a comma-separated value file to plot using some Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mandelbrot_serial.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_aspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;equal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Re(c)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Im(c)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;so that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./mandelbrot_serial.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;gives:
&lt;img alt="Alt Text" src="http://0x7df.github.io/images/mandelbrot_serial.png"&gt;
which seems in the right ball park.&lt;/p&gt;
&lt;h3&gt;Initial parallelism&lt;/h3&gt;
&lt;p&gt;We now make a first attempt to add OpenMP. So far, we've covered the &lt;code&gt;!$OMP
PARALLEL&lt;/code&gt; directive, so we will stick to using just that, even though as we'll
cover later there are much better ways of doing it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;!$OMP PARALLEL DEFAULT(NONE) &amp;amp;&lt;/span&gt;
&lt;span class="c"&gt;!$OMP          PRIVATE(ipix, ix, iy, x, y, c, z, iteration) &amp;amp;&lt;/span&gt;
&lt;span class="c"&gt;!$OMP          FIRSTPRIVATE(dx, dy) &amp;amp;&lt;/span&gt;
&lt;span class="c"&gt;!$OMP          REDUCTION(+:n_diverged)&lt;/span&gt;
&lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="n"&gt;ipix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;npix&lt;/span&gt;
    &lt;span class="n"&gt;iy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipix&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nx&lt;/span&gt;
    &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ipix&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;iy&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nx&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xmin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ymin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;iy&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;1.e-07_rk&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;cmplx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="n"&gt;iteration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maximum_iterations&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;escape_threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;            &lt;/span&gt;&lt;span class="n"&gt;n_diverged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n_diverged&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;
            &lt;span class="k"&gt;exit&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="n"&gt;endif&lt;/span&gt;
        &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2_ik&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="n"&gt;enddo&lt;/span&gt;
&lt;span class="n"&gt;enddo&lt;/span&gt;
&lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simply inserting the &lt;code&gt;!$OMP PARALLEL&lt;/code&gt; directive pair gives an answer that's a
factor of &lt;span class="math"&gt;\(N\)&lt;/span&gt; too large, because all &lt;span class="math"&gt;\(N\)&lt;/span&gt; threads perform the whole loop (each
getting the correct answer in its private copy of &lt;code&gt;n_diverged&lt;/code&gt;), and of course
this takes just as long as the serial version - longer actually, since we've
added the redundant work of managing the threads. Therefore we must also add
some logic to manually distribute the work amonsgt the threads. In the
following example, we divide the total number of pixels into contiguous blocks
and give each block to a thread:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;!$OMP PARALLEL DEFAULT(NONE) &amp;amp;&lt;/span&gt;
&lt;span class="c"&gt;!$OMP          PRIVATE(ipix, ix, iy, x, y, c, z, iteration, number_of_threads, this_thread, pix_per_thread) &amp;amp;&lt;/span&gt;
&lt;span class="c"&gt;!$OMP          FIRSTPRIVATE(dx, dy) &amp;amp;&lt;/span&gt;
&lt;span class="c"&gt;!$OMP          REDUCTION(+:n_diverged)&lt;/span&gt;
&lt;span class="n"&gt;number_of_threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_NUM_THREADS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;this_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_THREAD_NUM&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pix_per_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;npix&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;number_of_threads&lt;/span&gt;
&lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="n"&gt;ipix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this_thread&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pix_per_thread&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;this_thread&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pix_per_thread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;npix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;! ... loop body ...&lt;/span&gt;

&lt;span class="n"&gt;enddo&lt;/span&gt;
&lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This reduced the time to about 55% of the serial value on four threads, which
is only about half of the theoretically available speed-up. If, instead, we
try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;!$OMP PARALLEL DEFAULT(NONE) &amp;amp;&lt;/span&gt;
&lt;span class="c"&gt;!$OMP          PRIVATE(ipix, ix, iy, x, y, c, z, iteration, number_of_threads, this_thread, pix_per_thread) &amp;amp;&lt;/span&gt;
&lt;span class="c"&gt;!$OMP          FIRSTPRIVATE(dx, dy) &amp;amp;&lt;/span&gt;
&lt;span class="c"&gt;!$OMP          REDUCTION(+:n_diverged)&lt;/span&gt;
&lt;span class="n"&gt;number_of_threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_NUM_THREADS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;this_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_THREAD_NUM&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="n"&gt;ipix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;npix&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;number_of_threads&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;this_thread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;

        &lt;span class="c"&gt;! ... loop body ...&lt;/span&gt;

    &lt;span class="n"&gt;endif&lt;/span&gt;
&lt;span class="n"&gt;enddo&lt;/span&gt;
&lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which cycles over the threads and allocates each pixel to the next thread. This
reduced the time to about 39% of the original, which is better. Why?&lt;/p&gt;
&lt;p&gt;We can see more clearly what's happening by timing individual threads within
the parallel block. In the first example, typical times for the threads are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;       3  0.187000006    
       2   1.05900002    
       1   2.03399992    
       0   2.95700002
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;whereas for the second example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;       0   2.01200008    
       3   2.05299997    
       2   2.05900002    
       1   2.06500006
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Evidently, the time per thread is much more balanced in the second example; in
the first, there's a factor of 15 difference between the time taken by the
fastest and slowest threads. If we investigate the total number of iterations
conducted by each thread:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;       3  14779591
       2  100787622
       1  223484798
       0  343662484
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we see this is imbalanced by at least as much, whereas in the faster scheme:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;       0   170697247
       1   170807456
       2   170696023
       3   170513769
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second version has better &lt;em&gt;load balance&lt;/em&gt; - a naive
distribution of work, like dividing pixels equally between threads, can be poorly
balanced if the work per pixel is highly variable. The second way of
distributing the work clearly allocates a similar balance of pixels to each
thread.&lt;/p&gt;
&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-1.html"&gt;OpenMP 1 (Overview, Implementaion)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-2.html"&gt;OpenMP 2 (Parallel regions, OpenMP functions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-3.html"&gt;OpenMP 3 (OpenMP clauses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-4.html"&gt;OpenMP 4 (Reductions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-5.html"&gt;OpenMP 5 (Exercise: Madelbrot set)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-6.html"&gt;OpenMP 6 (Work-sharing constructs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-7.html"&gt;OpenMP 7 (Synchronisation)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;

&lt;p&gt;These notes are built on the "Hands-on Introduction to OpenMP" tutorial given at the UK OpenMP Users' Conference.&lt;/p&gt;
&lt;p&gt;This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"&gt;http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This means you are free to copy and redistribute the material and adapt and build on the
material under the following terms: you must give appropriate credit, provide a link to the license and indicate if changes were made. If you adapt or build on the material you must distribute your work under the same license as the original.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content></entry><entry><title>OpenMP 4</title><link href="http://0x7df.github.io/openmp-4.html" rel="alternate"></link><published>2019-07-27T20:29:00+01:00</published><updated>2019-07-27T20:29:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2019-07-27:/openmp-4.html</id><summary type="html"></summary><content type="html">&lt;h1&gt;Reductions&lt;/h1&gt;
&lt;p&gt;As mentioned in the &lt;a href=""&gt;overview post&lt;/a&gt;, a &lt;em&gt;reduction&lt;/em&gt; operation produces a
single value from a set of values, e.g. the sum, product, maximum, minimum,
etc.&lt;/p&gt;
&lt;p&gt;To preserve as much parallelism as possible, each thread reduces its data into a
private result, and then these are subsequently reduced into the final result.
The first step is done in parallel.&lt;/p&gt;
&lt;p&gt;These operations are implemented via the &lt;code&gt;REDUCTION&lt;/code&gt; clause:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;REDUCTION(&amp;lt;op&amp;gt;:&amp;lt;list...&amp;gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;reduction&lt;/span&gt;
    &lt;span class="k"&gt;use &lt;/span&gt;&lt;span class="n"&gt;OMP_LIB&lt;/span&gt;
    &lt;span class="k"&gt;implicit none&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;irow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nrows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncols&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;allocatable&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(:,:)&lt;/span&gt;

    &lt;span class="n"&gt;nrows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL DEFAULT(NONE) SHARED(ncols)&lt;/span&gt;
    &lt;span class="n"&gt;ncols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_NUM_THREADS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;

    &lt;span class="k"&gt;allocate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nrows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ncols&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(:,:)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL REDUCTION(+:b) PRIVATE(irow,icol)&lt;/span&gt;
    &lt;span class="n"&gt;icol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_THREAD_NUM&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="n"&gt;irow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nrows&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;icol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;enddo&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;

    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b =&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;reduction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -fopenmp -o reduction1 reduction1.f95
$ ./reduction1
 &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;          &lt;span class="m"&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The initial value of the &lt;em&gt;reduction variable&lt;/em&gt;, &lt;code&gt;b&lt;/code&gt;, is saved, and then each
thread gets its own private copy of &lt;code&gt;b&lt;/code&gt;, initialised to zero. Inside the
parallel region, each thread updates its own copy of &lt;code&gt;b&lt;/code&gt; within the loop. At
the final &lt;code&gt;!$OMP END PARALLEL&lt;/code&gt; directive, the private copies are reduced to the
final &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Reductions can be performed on arrays as well as scalar variables. The
reduction is performed on each element of the array.&lt;/p&gt;
&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-1.html"&gt;OpenMP 1 (Overview, Implementaion)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-2.html"&gt;OpenMP 2 (Parallel regions, OpenMP functions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-3.html"&gt;OpenMP 3 (OpenMP clauses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-4.html"&gt;OpenMP 4 (Reductions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-5.html"&gt;OpenMP 5 (Exercise: Madelbrot set)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-6.html"&gt;OpenMP 6 (Work-sharing constructs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-7.html"&gt;OpenMP 7 (Synchronisation)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;

&lt;p&gt;These notes are built on the "Hands-on Introduction to OpenMP" tutorial given at the UK OpenMP Users' Conference.&lt;/p&gt;
&lt;p&gt;This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"&gt;http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This means you are free to copy and redistribute the material and adapt and build on the
material under the following terms: you must give appropriate credit, provide a link to the license and indicate if changes were made. If you adapt or build on the material you must distribute your work under the same license as the original.&lt;/p&gt;</content></entry><entry><title>OpenMP 3</title><link href="http://0x7df.github.io/openmp-3.html" rel="alternate"></link><published>2019-07-27T20:28:00+01:00</published><updated>2019-07-27T20:28:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2019-07-27:/openmp-3.html</id><summary type="html"></summary><content type="html">&lt;h1&gt;OpenMP clauses&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;!$OMP PARALLEL&lt;/code&gt; directive can have further information added in the form of
&lt;em&gt;clauses&lt;/em&gt;, which can be comma- or space-separated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!$OMP PARALLEL &amp;lt;clauses...&amp;gt;
...
!$OMP END PARALLEL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These define certain
aspects of the way in which the parallel region will be handled, such as the
scope of certain variables, the number of threads, etc.&lt;/p&gt;
&lt;p&gt;For example,
clauses can define whether variables in the parallel region are &lt;em&gt;shared&lt;/em&gt; or
&lt;em&gt;private&lt;/em&gt;. In general:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!$OMP PARALLEL DEFAULT(SHARED|PRIVATE|NONE) PRIVATE(list...) SHARED(list...)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first clause specifies whether variables by default should be shared or
private (or no default), and the following two over-ride the default in certain
cases by explicitly listing variables that should be either private or shared.
Note that &lt;code&gt;DEFAULT&lt;/code&gt; is &lt;code&gt;SHARED&lt;/code&gt; unless specified otherwise, which is potentially dangerous. If &lt;code&gt;DEFAULT&lt;/code&gt; is &lt;code&gt;NONE&lt;/code&gt;,
then all variables used in the parallel region must be explicitly listed
within either the &lt;code&gt;PRIVATE&lt;/code&gt; or &lt;code&gt;SHARED&lt;/code&gt; clause. Best practice is to be explicit
and specify &lt;code&gt;DEFAULT(NONE)&lt;/code&gt;, so that you're forced to think about each variable
in the parallel region and how it should be handled.&lt;/p&gt;
&lt;h2&gt;Private data&lt;/h2&gt;
&lt;p&gt;Each thread has its own unique copy of a private variable, which is independent
of the values other threads hold. E.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;private1&lt;/span&gt;
    &lt;span class="k"&gt;use &lt;/span&gt;&lt;span class="n"&gt;OMP_LIB&lt;/span&gt;
    &lt;span class="k"&gt;implicit none&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL DEFAULT(PRIVATE)&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_THREAD_NUM&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a =&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;private_shared&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -fopenmp -o private1 private1.f95 
$ ./private1 
 &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="m"&gt;3&lt;/span&gt;
 &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;
 &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="m"&gt;2&lt;/span&gt;
 &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Private variables are &lt;em&gt;uninitialised&lt;/em&gt; at the beginning of the parallel
block, even if they were defined previously. They do not inherit the value from
any preceding part of the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;private2&lt;/span&gt;
    &lt;span class="k"&gt;implicit none&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL DEFAULT(PRIVATE)&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a, b =&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;private2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -fopenmp -o private2 private2.f95 
$ ./private2
 a, &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;
 a, &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;
 a, &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;       &lt;span class="m"&gt;32766&lt;/span&gt;  -466164000
 a, &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;       &lt;span class="m"&gt;32766&lt;/span&gt;  -466163792
$ ./private2
 a, &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;
 a, &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;
 a, &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;       &lt;span class="m"&gt;32766&lt;/span&gt;  -310876344
 a, &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;       &lt;span class="m"&gt;32766&lt;/span&gt;  -310876240
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, private data is destroyed at the end of the parallel region; any original
value that was set prior to the parallel region is unaffected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;private3&lt;/span&gt;
    &lt;span class="k"&gt;use &lt;/span&gt;&lt;span class="n"&gt;OMP_LIB&lt;/span&gt;
    &lt;span class="k"&gt;implicit none&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Before: a =&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL DEFAULT(NONE) PRIVATE(a)&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_THREAD_NUM&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;During: a =&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;After:  a =&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;private3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -fopenmp -o private3 private3.f95 
$ ./private3
 Before: &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="m"&gt;9&lt;/span&gt;
 During: &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="m"&gt;3&lt;/span&gt;
 During: &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="m"&gt;1&lt;/span&gt;
 During: &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="m"&gt;2&lt;/span&gt;
 During: &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;
 After:  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="m"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Fortran, loop iterators are private by default.&lt;/p&gt;
&lt;h2&gt;Shared data&lt;/h2&gt;
&lt;p&gt;All threads can access shared data. If we want a variable from outside the
parallel region to be used in the parallel region, or to persist afterwards, it
needs to be shared.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;shared1&lt;/span&gt;
    &lt;span class="k"&gt;use &lt;/span&gt;&lt;span class="n"&gt;OMP_LIB&lt;/span&gt;
    &lt;span class="k"&gt;implicit none&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;nthreads&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL DEFAULT(NONE) SHARED(nthreads)&lt;/span&gt;
    &lt;span class="n"&gt;nthreads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_NUM_THREADS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;nthreads&lt;/span&gt;
&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;shared1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -fopenmp -o shared1 shared1.f95 
$ ./shared1 
           &lt;span class="m"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;shared2&lt;/span&gt;
    &lt;span class="k"&gt;use &lt;/span&gt;&lt;span class="n"&gt;OMP_LIB&lt;/span&gt;
    &lt;span class="k"&gt;implicit none&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL DEFAULT(NONE) SHARED(a)&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_THREAD_NUM&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;shared2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -fopenmp -o shared2 shared2.f95 
$ ./shared2 
          &lt;span class="m"&gt;13&lt;/span&gt;
          &lt;span class="m"&gt;10&lt;/span&gt;
          &lt;span class="m"&gt;12&lt;/span&gt;
          &lt;span class="m"&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A common idiom is for different threads to work on different portion of the
same shared array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;shared3&lt;/span&gt;
    &lt;span class="k"&gt;use &lt;/span&gt;&lt;span class="n"&gt;OMP_LIB&lt;/span&gt;
    &lt;span class="k"&gt;implicit none&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;irow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nrows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncols&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;allocatable&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;(:,:)&lt;/span&gt;

    &lt;span class="n"&gt;nrows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL&lt;/span&gt;
    &lt;span class="n"&gt;ncols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_NUM_THREADS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;

    &lt;span class="k"&gt;allocate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nrows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ncols&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;!$OMP PARALLEL DEFAULT(NONE) PRIVATE(irow, icol) SHARED(my_array, nrows)&lt;/span&gt;
    &lt;span class="n"&gt;icol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_THREAD_NUM&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="n"&gt;irow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nrows&lt;/span&gt;
        &lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;icol&lt;/span&gt;
    &lt;span class="n"&gt;enddo&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;

    &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="n"&gt;irow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nrows&lt;/span&gt;
        &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="n"&gt;enddo&lt;/span&gt;

&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;shared3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -fopenmp -o shared3 shared3.f95 
$ ./shared3
   &lt;span class="m"&gt;1&lt;/span&gt;.00000000       &lt;span class="m"&gt;2&lt;/span&gt;.00000000       &lt;span class="m"&gt;3&lt;/span&gt;.00000000       &lt;span class="m"&gt;4&lt;/span&gt;.00000000    
   &lt;span class="m"&gt;1&lt;/span&gt;.00000000       &lt;span class="m"&gt;2&lt;/span&gt;.00000000       &lt;span class="m"&gt;3&lt;/span&gt;.00000000       &lt;span class="m"&gt;4&lt;/span&gt;.00000000    
   &lt;span class="m"&gt;1&lt;/span&gt;.00000000       &lt;span class="m"&gt;2&lt;/span&gt;.00000000       &lt;span class="m"&gt;3&lt;/span&gt;.00000000       &lt;span class="m"&gt;4&lt;/span&gt;.00000000    
   &lt;span class="m"&gt;1&lt;/span&gt;.00000000       &lt;span class="m"&gt;2&lt;/span&gt;.00000000       &lt;span class="m"&gt;3&lt;/span&gt;.00000000       &lt;span class="m"&gt;4&lt;/span&gt;.00000000    
   &lt;span class="m"&gt;1&lt;/span&gt;.00000000       &lt;span class="m"&gt;2&lt;/span&gt;.00000000       &lt;span class="m"&gt;3&lt;/span&gt;.00000000       &lt;span class="m"&gt;4&lt;/span&gt;.00000000    
   &lt;span class="m"&gt;1&lt;/span&gt;.00000000       &lt;span class="m"&gt;2&lt;/span&gt;.00000000       &lt;span class="m"&gt;3&lt;/span&gt;.00000000       &lt;span class="m"&gt;4&lt;/span&gt;.00000000    
   &lt;span class="m"&gt;1&lt;/span&gt;.00000000       &lt;span class="m"&gt;2&lt;/span&gt;.00000000       &lt;span class="m"&gt;3&lt;/span&gt;.00000000       &lt;span class="m"&gt;4&lt;/span&gt;.00000000    
   &lt;span class="m"&gt;1&lt;/span&gt;.00000000       &lt;span class="m"&gt;2&lt;/span&gt;.00000000       &lt;span class="m"&gt;3&lt;/span&gt;.00000000       &lt;span class="m"&gt;4&lt;/span&gt;.00000000    
   &lt;span class="m"&gt;1&lt;/span&gt;.00000000       &lt;span class="m"&gt;2&lt;/span&gt;.00000000       &lt;span class="m"&gt;3&lt;/span&gt;.00000000       &lt;span class="m"&gt;4&lt;/span&gt;.00000000    
   &lt;span class="m"&gt;1&lt;/span&gt;.00000000       &lt;span class="m"&gt;2&lt;/span&gt;.00000000       &lt;span class="m"&gt;3&lt;/span&gt;.00000000       &lt;span class="m"&gt;4&lt;/span&gt;.00000000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Long OpenMP directives can be broken across multiple lines using the standard
Fortran line continuation character, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!$OMP PARALLEL DEFAULT(NONE) PRIVATE(irow, icol) &amp;amp;
!$OMP     SHARED(my_array, nrows)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;code&gt;FIRSTPRIVATE&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Although by default private variables are uninitialised at the beginning of a
parallel region, they can be made to inherit an existing value by using the
&lt;code&gt;FIRSTPRIVATE&lt;/code&gt; clause.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;first_private&lt;/span&gt;
    &lt;span class="k"&gt;use &lt;/span&gt;&lt;span class="n"&gt;OMP_LIB&lt;/span&gt;
    &lt;span class="k"&gt;implicit none&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL DEFAULT(NONE) PRIVATE(a) FIRSTPRIVATE(b)&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a, b =&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;first_private&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -fopenmp -o first_private first_private.f95 
$ ./first_private 
 a, &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  -510675160           &lt;span class="m"&gt;9&lt;/span&gt;
 a, &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;9&lt;/span&gt;
 a, &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  -510674576           &lt;span class="m"&gt;9&lt;/span&gt;
 a, &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  -510675056           &lt;span class="m"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Other clauses&lt;/h2&gt;
&lt;p&gt;In addition to the &lt;code&gt;DEFAULT&lt;/code&gt;, &lt;code&gt;FIRSTPRIVATE&lt;/code&gt;, &lt;code&gt;PRIVATE&lt;/code&gt; and &lt;code&gt;SHARED&lt;/code&gt; clauses,
the &lt;code&gt;!$OMP PARALLEL&lt;/code&gt; directive can also have the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;COPYIN(&amp;lt;list...&amp;gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IF(&amp;lt;logical-expression&amp;gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NUM_THREADS(&amp;lt;integer-expression&amp;gt;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REDUCTION(&amp;lt;operator&amp;gt;:&amp;lt;list...&amp;gt;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;which are described in subsequent posts.&lt;/p&gt;
&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-1.html"&gt;OpenMP 1 (Overview, Implementaion)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-2.html"&gt;OpenMP 2 (Parallel regions, OpenMP functions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-3.html"&gt;OpenMP 3 (OpenMP clauses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-4.html"&gt;OpenMP 4 (Reductions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-5.html"&gt;OpenMP 5 (Exercise: Madelbrot set)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-6.html"&gt;OpenMP 6 (Work-sharing constructs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-7.html"&gt;OpenMP 7 (Synchronisation)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;

&lt;p&gt;These notes are built on the "Hands-on Introduction to OpenMP" tutorial given at the UK OpenMP Users' Conference.&lt;/p&gt;
&lt;p&gt;This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"&gt;http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This means you are free to copy and redistribute the material and adapt and build on the
material under the following terms: you must give appropriate credit, provide a link to the license and indicate if changes were made. If you adapt or build on the material you must distribute your work under the same license as the original.&lt;/p&gt;</content></entry><entry><title>OpenMP 1</title><link href="http://0x7df.github.io/openmp-1.html" rel="alternate"></link><published>2019-07-27T20:27:00+01:00</published><updated>2019-07-27T20:27:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2019-07-27:/openmp-1.html</id><summary type="html"></summary><content type="html">&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;OpenMP is a set of extensions to Fortran, C and C++, consisting of compiler
directives, library routines, and environment variables, that allows the
programming of shared-memory applications. Typically it allows parallelism to
be added to an existing application without a major re-write.&lt;/p&gt;
&lt;p&gt;The OpenMP programming model is based on the notion of &lt;em&gt;threads&lt;/em&gt;. Threads are
similar to processes, but as well as having their own private memory, they can
share memory with each other. Different threads can follow different logical
paths through the same code; each thread has its own program counter.&lt;/p&gt;
&lt;p&gt;Usually there is one thread per core; there can be more but then the core has
to time-share between the threads, which introduces some overhead. In some
systems there is hardware support for multiple threads per core
(symmetric multithreading (SMT), also known as hyperthreading).&lt;/p&gt;
&lt;p&gt;Unlike MPI, threads do not exchange information via messages, but simply via
reading and writing to shared memory.&lt;/p&gt;
&lt;p&gt;By default, threads execute independently of each other; there is no
synchronisation. Therefore to ensure correctness, the programmer must ensure
that actions on shared data occur in the correct order. Note that an update to
a shared variable, e.g. &lt;code&gt;x = x + 1&lt;/code&gt;, is not atomic. If there are two threads, the
correct result is &lt;code&gt;x + 2&lt;/code&gt;, but it is possible for thread 1 to read &lt;code&gt;x&lt;/code&gt;, and then
for thread 2 to read &lt;code&gt;x&lt;/code&gt; before thread 1 has incremented the value and written it
back to &lt;code&gt;x&lt;/code&gt;. The final result would be &lt;code&gt;x + 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The most common OpenMP idiom is the parallelisation of loops, where the
iterations of the loop are independent of each other.&lt;/p&gt;
&lt;p&gt;For example, in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imax&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end do&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the loop iterations are independent of each other and the loop can be parallelised, whereas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imax&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;end do&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;has a &lt;em&gt;loop-carried dependency&lt;/em&gt;. The loop iterations must be done in the
correct order to obtain the correct result.&lt;/p&gt;
&lt;p&gt;In the former case the loop iterations can be carried out in any order, and can
therefore be shared amongst a number of threads. If &lt;code&gt;imax = 100&lt;/code&gt; and there are
two threads, we could do iterations 1-50 on thread 1 and 51-100 on thread 2,
giving essentially a factor of two increase. (In practive the overhead of
creating and managing the threads reduces, often drastically, the speedup.)&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;reduction&lt;/em&gt; operation produces a single value from a set of values, e.g. the
sum, product, maximum, minimum, etc. For example, consider the loop: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;enddo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For correctness we would need to ensure only one thread at a time incremented
&lt;code&gt;x&lt;/code&gt;, which would destroy all the parallelism. It's better if each thread performs
its own private reduction, and then these per-thread results are reduced to the
final answer. If the number of threads is small relative to the number of
values being aggregated, then there is still substantial parallelism.&lt;/p&gt;
&lt;h1&gt;Implementation&lt;/h1&gt;
&lt;p&gt;OpenMP is implemented in source code by means of &lt;em&gt;compiler directives&lt;/em&gt;; these are special
source code lines that are only meaningful to certain OpenMP-compliant compilers. Directives are
protected by a &lt;em&gt;sentinel&lt;/em&gt;, which for OpenMP is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!$OMP&lt;/code&gt; for Fortran&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#pragma omp&lt;/code&gt; for C/C++&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clearly the directive appears as an ordinary comment and is therefore ignored by the
compiler if the compiler is not OpenMP-compliant, or if OpenMP is not requested.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;hello_world&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;hello_world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To compile an OpenMP program, the addition of a (compiler-dependent) flag at
the compile and link steps makes OpenMP available. E.g. using GCC:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -fopenmp -o hello_world hello_world.f95
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OpenMP is built into most compilers. The flag for Intel compilers is &lt;code&gt;-openmp&lt;/code&gt;.
OpenMP is on by default in the Cray compiler.&lt;/p&gt;
&lt;p&gt;The number of threads at run-time is determined from an environment variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;OMP_NUM_THREADS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(The default number of threads is implementation-dependent. It might be 1,
or it might be equal to the number of cores in the system.)&lt;/p&gt;
&lt;p&gt;Then the application is run as normal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./hello_world 
 Hello world!
 Hello world!
 Hello world!
 Hello world!
&lt;/pre&gt;&lt;/div&gt;


&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-1.html"&gt;OpenMP 1 (Overview, Implementaion)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-2.html"&gt;OpenMP 2 (Parallel regions, OpenMP functions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-3.html"&gt;OpenMP 3 (OpenMP clauses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-4.html"&gt;OpenMP 4 (Reductions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-5.html"&gt;OpenMP 5 (Exercise: Madelbrot set)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-6.html"&gt;OpenMP 6 (Work-sharing constructs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-7.html"&gt;OpenMP 7 (Synchronisation)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;

&lt;p&gt;These notes are built on the "Hands-on Introduction to OpenMP" tutorial given at the UK OpenMP Users' Conference.&lt;/p&gt;
&lt;p&gt;This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"&gt;http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This means you are free to copy and redistribute the material and adapt and build on the
material under the following terms: you must give appropriate credit, provide a link to the license and indicate if changes were made. If you adapt or build on the material you must distribute your work under the same license as the original.&lt;/p&gt;</content></entry><entry><title>OpenMP 2</title><link href="http://0x7df.github.io/openmp-2.html" rel="alternate"></link><published>2019-07-27T20:27:00+01:00</published><updated>2019-07-27T20:27:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2019-07-27:/openmp-2.html</id><summary type="html"></summary><content type="html">&lt;h1&gt;Parallel regions&lt;/h1&gt;
&lt;p&gt;In the example in the &lt;a href="http://0x7df.github.io/openmp-1.html"&gt;first post&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;hello_world&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;hello_world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the pair of directives, &lt;code&gt;!$OMP PARALLEL&lt;/code&gt; and &lt;code&gt;!$OMP END PARALLEL&lt;/code&gt;,
define a &lt;em&gt;parallel region&lt;/em&gt;, which is a block of code that will be executed by
all the threads. The rest of the code is executed by a single thread. E.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;parallel_region&lt;/span&gt;
    &lt;span class="k"&gt;implicit none&lt;/span&gt;
&lt;span class="k"&gt;    write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Serial region&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Parallel region&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Serial again&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;parallel_region&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -fopenmp -o parallel_region parallel_region.f95 
$ ./parallel_region 
 Serial region
 Parallel region
 Parallel region
 Parallel region
 Parallel region
 Serial again
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the thread executing a serial region encounters a parallel directive, it
creates a team of threads and it becomes the &lt;em&gt;master thread&lt;/em&gt; of the team. Each
thread, including the master, gets a thread number between &lt;span class="math"&gt;\(0\)&lt;/span&gt; and &lt;span class="math"&gt;\(N-1\)&lt;/span&gt;, where &lt;span class="math"&gt;\(N\)&lt;/span&gt;
is the number of threads requested.&lt;/p&gt;
&lt;p&gt;On encountering the &lt;code&gt;!$OMP END PARALLEL&lt;/code&gt; directive, all the threads 
are killed except the master, which continues execution.&lt;/p&gt;
&lt;p&gt;This is known as the fork/join model.&lt;/p&gt;
&lt;p&gt;Note that the master thread waits
until all other threads have finished before the parallel region is closed, to
ensure all work is completed no data are lost. The &lt;code&gt;!$OMP END PARALLEL&lt;/code&gt;
directive is therefore an implicit &lt;em&gt;synchronisation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Two requirements are imposed on the definition of a parallel region:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The start and end directives for a parallel region must appear in the same
   routine.&lt;/li&gt;
&lt;li&gt;It must not be possible to leave the parallel region except via the closing
   directive; e.g. via a &lt;code&gt;GO TO&lt;/code&gt; statement.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Nested parallel regions&lt;/h2&gt;
&lt;p&gt;It's possible to nest parallel regions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;nested&lt;/span&gt;
    &lt;span class="k"&gt;implicit none&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Parallel outer&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Parallel inner&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;nested&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nesting is controlled by the &lt;code&gt;OMP_NESTED&lt;/code&gt; environment variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -fopenmp -o nested.x nested.f95
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;OMP_NUM_THREADS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;OMP_NESTED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;TRUE
$ ./nested.x 
 Parallel outer
 Parallel outer
 Parallel inner
 Parallel inner
 Parallel inner
 Parallel inner
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;OMP_NESTED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;FALSE
$ ./nested.x 
 Parallel outer
 Parallel outer
 Parallel inner
 Parallel inner
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are good use cases for using nested routines; the danger is ensuring you
don't create too many threads - having many more threads than cores will
negatively affect performance.&lt;/p&gt;
&lt;h1&gt;OpenMP functions&lt;/h1&gt;
&lt;p&gt;The OpenMP library provides routines to determine the number of threads,
and the number of the executing thread: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;thread_number&lt;/span&gt;
    &lt;span class="k"&gt;use &lt;/span&gt;&lt;span class="n"&gt;OMP_LIB&lt;/span&gt;
    &lt;span class="k"&gt;implicit none&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Thread&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_THREAD_NUM&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;of&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_NUM_THREADS&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;threads&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;thread_number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the use of the Fortran &lt;code&gt;use&lt;/code&gt; statement to make available the OpenMP library
routines.&lt;/p&gt;
&lt;p&gt;Compiling and running gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -fopenmp -o thread_number thread_number.f95 
$ ./thread_number 
 Thread           &lt;span class="m"&gt;1&lt;/span&gt; of           &lt;span class="m"&gt;4&lt;/span&gt; threads
 Thread           &lt;span class="m"&gt;2&lt;/span&gt; of           &lt;span class="m"&gt;4&lt;/span&gt; threads
 Thread           &lt;span class="m"&gt;0&lt;/span&gt; of           &lt;span class="m"&gt;4&lt;/span&gt; threads
 Thread           &lt;span class="m"&gt;3&lt;/span&gt; of           &lt;span class="m"&gt;4&lt;/span&gt; threads
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unlike the sentinel-protected directives, the use of &lt;code&gt;OMP_GET_THREAD_NUM()&lt;/code&gt; and
&lt;code&gt;OMP_GET_NUM_THREADS()&lt;/code&gt; will cause an error if compiled without OpenMP support:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -o thread_number thread_number.f95
Undefined symbols &lt;span class="k"&gt;for&lt;/span&gt; architecture x86_64:
  &lt;span class="s2"&gt;&amp;quot;_omp_get_num_threads_&amp;quot;&lt;/span&gt;, referenced from:
      _MAIN__ in ccWD4iLd.o
  &lt;span class="s2"&gt;&amp;quot;_omp_get_thread_num_&amp;quot;&lt;/span&gt;, referenced from:
      _MAIN__ in ccWD4iLd.o
ld: symbol&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; not found &lt;span class="k"&gt;for&lt;/span&gt; architecture x86_64
collect2: error: ld returned &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To prevent this problem, a second type of sentinel is available, in addition to
&lt;code&gt;!$OMP&lt;/code&gt;. This is simply &lt;code&gt;!$&lt;/code&gt;, and is prepended to ordinary Fortran lines (as opposed to OpenMP directives) that should be
conditionally compiled only when the compiler is OpenMP-compliant. Hence:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;thread_number&lt;/span&gt;
    &lt;span class="k"&gt;use &lt;/span&gt;&lt;span class="n"&gt;OMP_LIB&lt;/span&gt;
    &lt;span class="k"&gt;implicit none&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP PARALLEL&lt;/span&gt;
    &lt;span class="c"&gt;!$ write(*,*) &amp;quot;Thread&amp;quot;, OMP_GET_THREAD_NUM(), &amp;quot;of&amp;quot;, OMP_GET_NUM_THREADS(), &amp;amp;&lt;/span&gt;
    &lt;span class="c"&gt;!$     &amp;quot;threads&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;thread_number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -o thread_number thread_number.f95 
$ ./thread_number 
$ gfortran -fopenmp -o thread_number thread_number.f95 
$ ./thread_number 
 Thread           &lt;span class="m"&gt;0&lt;/span&gt; of           &lt;span class="m"&gt;4&lt;/span&gt; threads
 Thread           &lt;span class="m"&gt;3&lt;/span&gt; of           &lt;span class="m"&gt;4&lt;/span&gt; threads
 Thread           &lt;span class="m"&gt;1&lt;/span&gt; of           &lt;span class="m"&gt;4&lt;/span&gt; threads
 Thread           &lt;span class="m"&gt;2&lt;/span&gt; of           &lt;span class="m"&gt;4&lt;/span&gt; threads
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that it's possible to extend a source code line that is protected in
this way over several lines, by using the standard Fortran line continuation
character, &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(Note also, in this example the order that the threads execute the write
statement is different from the previous run; this is important. There is no guaranteed order of
threads.)&lt;/p&gt;
&lt;p&gt;Outside a parallel region, the thread number and total number of threads returned by
&lt;code&gt;OMP_GET_THREAD_NUM()&lt;/code&gt; and &lt;code&gt;OMP_GET_NUM_THREADS()&lt;/code&gt;, respectively, are defined; but the total number of threads is 1:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;serial_thread_number&lt;/span&gt;
    &lt;span class="k"&gt;use &lt;/span&gt;&lt;span class="n"&gt;OMP_LIB&lt;/span&gt;
    &lt;span class="k"&gt;implicit none&lt;/span&gt;
    &lt;span class="c"&gt;!$ write(*,*) &amp;quot;I am thread&amp;quot;, OMP_GET_THREAD_NUM(), &amp;quot;of&amp;quot;, OMP_GET_NUM_THREADS(), &amp;amp;&lt;/span&gt;
    &lt;span class="c"&gt;!$     &amp;quot;threads&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;serial_thread_number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -fopenmp -o serial_thread_number serial_thread_number.f95
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;OMP_NUM_THREADS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;
$ ./serial_thread_number 
 I am thread           &lt;span class="m"&gt;0&lt;/span&gt; of           &lt;span class="m"&gt;1&lt;/span&gt; threads
&lt;/pre&gt;&lt;/div&gt;


&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-1.html"&gt;OpenMP 1 (Overview, Implementaion)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-2.html"&gt;OpenMP 2 (Parallel regions, OpenMP functions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-3.html"&gt;OpenMP 3 (OpenMP clauses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-4.html"&gt;OpenMP 4 (Reductions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-5.html"&gt;OpenMP 5 (Exercise: Madelbrot set)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-6.html"&gt;OpenMP 6 (Work-sharing constructs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-7.html"&gt;OpenMP 7 (Synchronisation)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;

&lt;p&gt;These notes are built on the "Hands-on Introduction to OpenMP" tutorial given at the UK OpenMP Users' Conference.&lt;/p&gt;
&lt;p&gt;This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"&gt;http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This means you are free to copy and redistribute the material and adapt and build on the
material under the following terms: you must give appropriate credit, provide a link to the license and indicate if changes were made. If you adapt or build on the material you must distribute your work under the same license as the original.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content></entry><entry><title>OpenMP 7</title><link href="http://0x7df.github.io/openmp-7.html" rel="alternate"></link><published>2019-07-27T19:35:00+01:00</published><updated>2019-07-27T19:35:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2019-07-27:/openmp-7.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;Synchronisation&lt;/h2&gt;
&lt;p&gt;We touched in &lt;a href="http://0x7df.github.io/openmp-1.html"&gt;this post&lt;/a&gt; on the need to sychronise
OpenMP threads, to ensure correctness. For example, we saw that updates to
shared variables are not truly atomic, leading to the potential for race
conditions. A sequence of actions on shared data, such as
updating an array with new values then then using it in a subsequent
computation, might need to be synchronised to ensure that all threads complete their
writes before any threads go on to the next stage. In &lt;a href="http://0x7df.github.io/openmp-2.html"&gt;this
post&lt;/a&gt; we noted that the &lt;code&gt;!$OMP END PARALLEL&lt;/code&gt; directive
is an implicit synchronisation point, which OpenMP ensures that all threads
reach before any thread is allowed to continue. Other directives are implicit
synchronisation points.&lt;/p&gt;
&lt;p&gt;As well as these, OpenMP offers several explicit synchronisation
directives, which we'll look at here.&lt;/p&gt;
&lt;h3&gt;Barrier&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!$OMP BARRIER
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All threads must arrive at a barrier before any thread can proceed past it.&lt;/p&gt;
&lt;p&gt;For example, consider the following code, which populates shared arrays &lt;code&gt;a&lt;/code&gt; and
&lt;code&gt;b&lt;/code&gt; with the thread numbers and the numbers of the threads' neighbours:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;program &lt;/span&gt;&lt;span class="n"&gt;barrier&lt;/span&gt;

    &lt;span class="k"&gt;use &lt;/span&gt;&lt;span class="n"&gt;OMP_LIB&lt;/span&gt;
    &lt;span class="k"&gt;implicit none&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;ik&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;num_threads&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;neighbour&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;allocatable&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(:),&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(:)&lt;/span&gt;

    &lt;span class="c"&gt;!$OMP PARALLEL DEFAULT(NONE) SHARED(num_threads)&lt;/span&gt;
    &lt;span class="n"&gt;num_threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_NUM_THREADS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;

    &lt;span class="k"&gt;allocate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;num_threads&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;num_threads&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;!$OMP PARALLEL DEFAULT(NONE) PRIVATE(thread_id, neighbour) &amp;amp;&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP     SHARED(a,b, num_threads)&lt;/span&gt;

    &lt;span class="n"&gt;thread_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_THREAD_NUM&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt;

    &lt;span class="n"&gt;neighbour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0_ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;neighbour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_NUM_THREADS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neighbour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;

    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="k"&gt;end program &lt;/span&gt;&lt;span class="n"&gt;barrier&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Without any synchronisation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -fopenmp -o barrier.x barrier.f95
$ ./barrier.x 
$ ./barrier.x 
       &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;1&lt;/span&gt;           &lt;span class="m"&gt;2&lt;/span&gt;           &lt;span class="m"&gt;3&lt;/span&gt;
       &lt;span class="m"&gt;3&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;1&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;
$ ./barrier.x 
       &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;1&lt;/span&gt;           &lt;span class="m"&gt;2&lt;/span&gt;           &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="m"&gt;536870912&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;536870912&lt;/span&gt;           &lt;span class="m"&gt;2&lt;/span&gt;
$ ./barrier.x 
       &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;1&lt;/span&gt;           &lt;span class="m"&gt;2&lt;/span&gt;           &lt;span class="m"&gt;3&lt;/span&gt;
       &lt;span class="m"&gt;3&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The results are both wrong and non-deterministic, because some threads proceed to the
lines where &lt;code&gt;a&lt;/code&gt; is read before &lt;code&gt;a&lt;/code&gt; has been fully populated. Correct placement
of the barrier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;!$OMP PARALLEL DEFAULT(NONE) PRIVATE(thread_id, neighbour) &amp;amp;&lt;/span&gt;
&lt;span class="c"&gt;!$OMP     SHARED(a,b, num_threads)&lt;/span&gt;

&lt;span class="n"&gt;thread_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_THREAD_NUM&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt;

&lt;span class="c"&gt;!$OMP BARRIER&lt;/span&gt;

&lt;span class="n"&gt;neighbour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0_ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;neighbour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_NUM_THREADS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neighbour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;leads to the correct result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gfortran -fopenmp -o barrier.x barrier.f95
$ ./barrier.x 
       &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;1&lt;/span&gt;           &lt;span class="m"&gt;2&lt;/span&gt;           &lt;span class="m"&gt;3&lt;/span&gt;
       &lt;span class="m"&gt;3&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;1&lt;/span&gt;           &lt;span class="m"&gt;2&lt;/span&gt;
$ ./barrier.x 
       &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;1&lt;/span&gt;           &lt;span class="m"&gt;2&lt;/span&gt;           &lt;span class="m"&gt;3&lt;/span&gt;
       &lt;span class="m"&gt;3&lt;/span&gt;           &lt;span class="m"&gt;0&lt;/span&gt;           &lt;span class="m"&gt;1&lt;/span&gt;           &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Care must be taken about control flow: a likely bug is where some
threads reach a barrier and some don't, due to an &lt;code&gt;IF&lt;/code&gt; condition.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;END PARALLEL&lt;/code&gt; directive is an implicit barrier. The end of a parallel
&lt;code&gt;DO&lt;/code&gt; loop is an implicit barrier.&lt;/p&gt;
&lt;h3&gt;Critical region&lt;/h3&gt;
&lt;p&gt;Only one thread &lt;em&gt;at a time&lt;/em&gt; can enter a critical region. They can be used to
protect updates to shared variables.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!$OMP CRITICAL
...
!$OMP END CRITICAL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example, consider implementing a stack:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module &lt;/span&gt;&lt;span class="n"&gt;critical_mod&lt;/span&gt;

    &lt;span class="k"&gt;implicit none&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;ik&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;rk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="k"&gt;contains&lt;/span&gt;

&lt;span class="k"&gt;    subroutine &lt;/span&gt;&lt;span class="n"&gt;getnext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;allocatable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;(:)&lt;/span&gt;
        &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;
        &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;allocatable&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;(:)&lt;/span&gt;
        &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;ub&lt;/span&gt;
        &lt;span class="n"&gt;ub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;ubound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;allocate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ub&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;(:)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ub&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="nb"&gt;move_alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end subroutine &lt;/span&gt;&lt;span class="n"&gt;getnext&lt;/span&gt;

    &lt;span class="k"&gt;subroutine &lt;/span&gt;&lt;span class="n"&gt;putnew&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;allocatable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;(:)&lt;/span&gt;
        &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;
        &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;allocatable&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;(:)&lt;/span&gt;
        &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;ub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inew&lt;/span&gt;
        &lt;span class="n"&gt;ub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;ubound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;allocate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ub&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;(:)&lt;/span&gt;
        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="nb"&gt;move_alloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ub&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;
    &lt;span class="k"&gt;end subroutine &lt;/span&gt;&lt;span class="n"&gt;putnew&lt;/span&gt;

    &lt;span class="k"&gt;subroutine &lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt;
        &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;
        &lt;span class="kt"&gt;real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;
        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="nb"&gt;random_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;FLOOR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Processed item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;on thread&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt;
    &lt;span class="k"&gt;end subroutine &lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;

&lt;span class="k"&gt;end module &lt;/span&gt;&lt;span class="n"&gt;critical_mod&lt;/span&gt;

&lt;span class="k"&gt;program critical&lt;/span&gt;

&lt;span class="k"&gt;    use &lt;/span&gt;&lt;span class="n"&gt;OMP_LIB&lt;/span&gt;
    &lt;span class="k"&gt;use &lt;/span&gt;&lt;span class="n"&gt;critical_mod&lt;/span&gt;
    &lt;span class="k"&gt;implicit none&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxx&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ik&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;allocatable&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;(:)&lt;/span&gt;

    &lt;span class="n"&gt;maxx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10_ik&lt;/span&gt;
    &lt;span class="k"&gt;allocate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxx&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1_ik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;maxx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;!$OMP PARALLEL DEFAULT(NONE) SHARED(stack, maxx) PRIVATE(next, new, thread_id)&lt;/span&gt;
    &lt;span class="n"&gt;thread_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OMP_GET_THREAD_NUM&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;do while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0_ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;!$OMP CRITICAL&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0_ik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;getnext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;!$OMP END CRITICAL&lt;/span&gt;

        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;!$OMP CRITICAL&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;            &lt;/span&gt;&lt;span class="n"&gt;maxx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maxx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1_ik&lt;/span&gt;
            &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;putnew&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;endif&lt;/span&gt;
        &lt;span class="c"&gt;!$OMP END CRITICAL&lt;/span&gt;

    &lt;span class="n"&gt;enddo&lt;/span&gt;
    &lt;span class="c"&gt;!$OMP END PARALLEL&lt;/span&gt;

&lt;span class="k"&gt;end program critical&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we create an initial stack of ten values, then enter a loop in which the
latest value is popped off the stack and processed, during which there is a 50:50
probability of a new value being created and added to the stack. Because the
stack is a single data structure shared across all threads, the
interactions with it must be protected inside critical sections. If they were
not, for example, two threads could get same value, because the second of these
reads the value before the first has had chance to remove it. Essentially, the
critical section makes the popping and adding operations atomic. The step where
a thread processes the value it holds does not need to be protected, because
this is unique to the thread and there is no shared data involved.&lt;/p&gt;
&lt;h3&gt;Atomic update&lt;/h3&gt;
&lt;p&gt;The atomic direactive is used to protect modification of a shared variable. It
applies to only a single statement.&lt;/p&gt;
&lt;p&gt;The syntax is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!$OMP ATOMIC
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where the statement must have one of the forms:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;intr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and &lt;code&gt;&amp;lt;op&amp;gt;&lt;/code&gt; is one of &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;.and.&lt;/code&gt;, &lt;code&gt;.or.&lt;/code&gt;, &lt;code&gt;.eqv.&lt;/code&gt; or &lt;code&gt;.neqv.&lt;/code&gt;;
and &lt;code&gt;&amp;lt;intr&amp;gt;&lt;/code&gt; is one of &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;iand&lt;/code&gt;, &lt;code&gt;ior&lt;/code&gt; or &lt;code&gt;ieor&lt;/code&gt;. Note that the
evaluation if &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is not atomic.&lt;/p&gt;
&lt;h3&gt;Lock routines&lt;/h3&gt;
&lt;p&gt;Occasionally we may require more flexibility than is provided by the &lt;code&gt;CRITICAL&lt;/code&gt;
directive.&lt;/p&gt;
&lt;p&gt;A lock is a special variable that can be set by a thread. No other thread can
set the lock until the thread that set the lock has unset it.&lt;/p&gt;
&lt;p&gt;Setting a lock can either be blocking or non-blocking.&lt;/p&gt;
&lt;p&gt;A lock must be initialised before it is used, and can be destroyed when it is
no longer required.&lt;/p&gt;
&lt;p&gt;Lock variables should not be used for any other purpose.&lt;/p&gt;
&lt;p&gt;The syntax is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;use &lt;/span&gt;&lt;span class="n"&gt;omp_lib&lt;/span&gt;

&lt;span class="k"&gt;subroutine &lt;/span&gt;&lt;span class="n"&gt;omp_init_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;omp_lock_kind&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;subroutine &lt;/span&gt;&lt;span class="n"&gt;omp_set_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;omp_lock_kind&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;logical &lt;/span&gt;&lt;span class="k"&gt;function &lt;/span&gt;&lt;span class="n"&gt;omp_test_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;omp_lock_kind&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;subroutine &lt;/span&gt;&lt;span class="n"&gt;omp_unset_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;omp_lock_kind&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;subroutine &lt;/span&gt;&lt;span class="n"&gt;omp_destroy_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;omp_lock_kind&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-1.html"&gt;OpenMP 1 (Overview, Implementaion)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-2.html"&gt;OpenMP 2 (Parallel regions, OpenMP functions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-3.html"&gt;OpenMP 3 (OpenMP clauses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-4.html"&gt;OpenMP 4 (Reductions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-5.html"&gt;OpenMP 5 (Exercise: Madelbrot set)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-6.html"&gt;OpenMP 6 (Work-sharing constructs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0x7df.github.io/openmp-7.html"&gt;OpenMP 7 (Synchronisation)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;

&lt;p&gt;These notes are built on the "Hands-on Introduction to OpenMP" tutorial given at the UK OpenMP Users' Conference.&lt;/p&gt;
&lt;p&gt;This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"&gt;http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This means you are free to copy and redistribute the material and adapt and build on the
material under the following terms: you must give appropriate credit, provide a link to the license and indicate if changes were made. If you adapt or build on the material you must distribute your work under the same license as the original.&lt;/p&gt;</content></entry><entry><title>Bash and Ksh function distinctions</title><link href="http://0x7df.github.io/bash-and-ksh-function-distinctions.html" rel="alternate"></link><published>2019-03-24T11:03:00+00:00</published><updated>2019-03-24T11:03:00+00:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2019-03-24:/bash-and-ksh-function-distinctions.html</id><summary type="html"></summary><content type="html">&lt;h1&gt;Bash and Ksh function distinctions&lt;/h1&gt;
&lt;p&gt;There are subtle differences in function declaration and behaviour between Bash
and Ksh.&lt;/p&gt;
&lt;h2&gt;Function declaration&lt;/h2&gt;
&lt;p&gt;In Bash, functions can be declared:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    name () compound-command [redirection]
    function name [()] compound-command [redirection]
            This defines a function named name.  The reserved word function is
            optional.  If the function reserved word is supplied, the parentheses are
            optional.  The body of the function is the compound command
            compound-command ...
            ...  The exit status of a function definition is zero  unless  a
            syntax  error  occurs  or  a  readonly function with the same name already
            exists.  When executed, the exit status of a function is the exit status
            of the last command executed in the body.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and in ksh:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    function varname { list ;}
    varname () { list ;}
            Define  a  function  which  is referenced by varname.
            ... The body of the function is the list of commands between { and }.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Bash, the &lt;code&gt;function&lt;/code&gt; reserved word is optional, and if used, the &lt;code&gt;()&lt;/code&gt;
brackets are optional; so it is possible to use either, or both.&lt;/p&gt;
&lt;p&gt;In Ksh, you can use &lt;em&gt;either&lt;/em&gt; the &lt;code&gt;function&lt;/code&gt; reserved word, &lt;em&gt;or&lt;/em&gt; the &lt;code&gt;()&lt;/code&gt;
brackets, but not both.&lt;/p&gt;
&lt;p&gt;Hence using either, &lt;em&gt;but not both&lt;/em&gt;, will give a function declaration that works
in both Bash and Ksh.&lt;/p&gt;
&lt;p&gt;All other things being equal, we might prefer the &lt;code&gt;function&lt;/code&gt; style as being a
bit clearer and more explicit. However, all other things are not equal...&lt;/p&gt;
&lt;h2&gt;Environment inheritance&lt;/h2&gt;
&lt;p&gt;While in Bash the two declaration styles (or three if you include the
Bash-only &lt;code&gt;function name () ...&lt;/code&gt; style) are equivalent, in Ksh they have
different behaviours. I'm interested in particular in handling errors.&lt;/p&gt;
&lt;p&gt;With the bracket style in Ksh, the function inherits its environment
from the caller, and causes the calling script to abort on an error
in the function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    Functions defined with the name() syntax ... are executed in the caller&amp;#39;s
    environment and share all variables and traps with the caller.  Errors within
    these function executions cause the script that contains them to abort.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I don't see the advertised behaviour in the case where there is an error in the
function execution; the calling script doesn't seem to abort by default.
Consider:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat ksh_brackets
&lt;span class="c1"&gt;#!/bin/ksh&lt;/span&gt;

func1 &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    grep foo bar
&lt;span class="o"&gt;}&lt;/span&gt;

func1

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Return code from function = &lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./ksh_brackets
grep: bar: No such file or directory
Return code from &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, if you introduce &lt;code&gt;set -e&lt;/code&gt; into the calling script, of course then the
calling script aborts on the failure of the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat ksh_brackets
&lt;span class="c1"&gt;#!/bin/ksh&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; -e &lt;span class="c1"&gt;# Added&lt;/span&gt;

func1 &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    grep foo bar
&lt;span class="o"&gt;}&lt;/span&gt;

func1

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Return code from function = &lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./ksh_brackets
grep: bar: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So far the behaviour will be the same if we switch to the alternative
&lt;code&gt;function ...&lt;/code&gt; declaration style. As before, without &lt;code&gt;set -e&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat ksh_function
&lt;span class="c1"&gt;#!/bin/ksh&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; func1 &lt;span class="o"&gt;{&lt;/span&gt;
    grep foo bar
&lt;span class="o"&gt;}&lt;/span&gt;

func1

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Return code from function = &lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./ksh_function
grep: bar: No such file or directory
Return code from &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and similarly with &lt;code&gt;set -e&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat ksh_function
&lt;span class="c1"&gt;#!/bin/ksh&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; -e &lt;span class="c1"&gt;# Added&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; func1 &lt;span class="o"&gt;{&lt;/span&gt;
    grep foo bar
&lt;span class="o"&gt;}&lt;/span&gt;

func1

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Return code from function = &lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./ksh_function
grep: bar: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The distinction arises in the way the functions behave. Let's add a line to
the function's body, so we can see at what point control returns from the
function to the caller. Now, in the first bracket-style form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat ksh_brackets
&lt;span class="c1"&gt;#!/bin/ksh&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; -e

func1 &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    grep foo bar
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Return code from grep = &lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# Added&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

func1

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Return code from function = &lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./ksh_brackets
grep: bar: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function aborts immediately on the error, returns control to the calling
script, which in turn also aborts immediately. The function has inherited the
&lt;code&gt;set -e&lt;/code&gt; behaviour from the caller.&lt;/p&gt;
&lt;p&gt;In the alternative form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat ksh_function
&lt;span class="c1"&gt;#!/bin/ksh&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; -e

&lt;span class="k"&gt;function&lt;/span&gt; func1 &lt;span class="o"&gt;{&lt;/span&gt;
    grep foo bar
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Return code from grep = &lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# Added&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

func1

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Return code from function = &lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./ksh_function
grep: bar: No such file or directory
Return code from &lt;span class="nv"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
Return code from &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function has not inherited the &lt;code&gt;set -e&lt;/code&gt; behaviour of the calling script,
and therefore doesn't abort on the error from &lt;code&gt;grep&lt;/code&gt;; instead it completes
normally. The return code from a function is the exit status of the last
command in the function body, which in this case is the &lt;code&gt;echo&lt;/code&gt; statement; since
this completes successfully, the return code of the function is 0, and the
calling script therefore also completes normally.&lt;/p&gt;
&lt;p&gt;In Bash, both function-declaration types are the same, and both behave the way
the bracket-style declaration works in Ksh; that is, they inherit the &lt;code&gt;set -e&lt;/code&gt;
behaviour from the caller.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat bash_function
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; -e

&lt;span class="k"&gt;function&lt;/span&gt; func1 &lt;span class="o"&gt;{&lt;/span&gt;
    grep foo bar
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Return code from grep = &lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

func1

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Return code from function = &lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./bash_function
grep: bar: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat bash_brackets 
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; -e

func1 &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    grep foo bar
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Return code from grep = &lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

func1

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Return code from function = &lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./bash_brackets
grep: bar: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the way to get equivalence between Bash and Ksh (in this respect, there
may still be other differences) is to use the bracket-style declaration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;name &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    function_body
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for functions.&lt;/p&gt;</content></entry><entry><title>Upstream differencing and the semi-Lagrangian scheme</title><link href="http://0x7df.github.io/upstream-differencing-and-the-semi-lagrangian-scheme.html" rel="alternate"></link><published>2018-05-31T22:46:00+01:00</published><updated>2018-05-31T22:46:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2018-05-31:/upstream-differencing-and-the-semi-lagrangian-scheme.html</id><summary type="html"></summary><content type="html">&lt;p&gt;The upstream differencing technique is probably the simplest numerical
discretisation technique; take as an example the linear advection equation:&lt;/p&gt;
&lt;div class="math"&gt;$$
\frac{\partial y}{\partial t} + u_0 \frac{\partial y}{\partial x} = 0
$$&lt;/div&gt;
&lt;p&gt;which becomes:&lt;/p&gt;
&lt;div class="math"&gt;$$
\frac{y_j^{n+1} - y_j^n}{\Delta t} + -u_0 \frac{y_j^n - y_{j-1}^n}{\Delta x} = 0
$$&lt;/div&gt;
&lt;p&gt;in the upstream scheme. The time and space derivatives have been treated using
forward and backward differencing, respectively. (Note that as it is, this is
upstream under the assumption that &lt;span class="math"&gt;\(u_0\)&lt;/span&gt; is positive in the positive
&lt;span class="math"&gt;\(x\)&lt;/span&gt;-direction, so the grid-point at &lt;span class="math"&gt;\(x_{j-1}\)&lt;/span&gt; is further upstream than the grid
point at &lt;span class="math"&gt;\(x_j\)&lt;/span&gt;. For &lt;span class="math"&gt;\(u_0 \lt 0\)&lt;/span&gt; the forward difference would be taken.)&lt;/p&gt;
&lt;p&gt;Rearranging for &lt;span class="math"&gt;\(y_j^{n+1}\)&lt;/span&gt; gives:&lt;/p&gt;
&lt;div class="math"&gt;$$
y_j^{n+1} = y_j^n - \alpha \left(y_j^n - y_{j-1}^n\right)
$$&lt;/div&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;div class="math"&gt;$$
\alpha = \frac{u_0\Delta t}{\Delta x}
$$&lt;/div&gt;
&lt;p&gt;This explicit scheme is stable so long as &lt;span class="math"&gt;\(\alpha \lt 1\)&lt;/span&gt;, which is the
well-known CFL condition. This is usually interpreted as saying that the scheme
remains stable only when the time-step &lt;span class="math"&gt;\(\Delta t\)&lt;/span&gt; is less than the minimum time
for information to cross the cell, which is &lt;span class="math"&gt;\(u_0/\Delta x\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The upstream differencing technique is essentially linear interpolation. In
general, to linearly interpolate values of &lt;span class="math"&gt;\(y\)&lt;/span&gt; at two grid-points &lt;span class="math"&gt;\(x_{j-1}\)&lt;/span&gt; and
&lt;span class="math"&gt;\(x_j\)&lt;/span&gt; onto some interior point &lt;span class="math"&gt;\(x_*\)&lt;/span&gt;, we write:&lt;/p&gt;
&lt;div class="math"&gt;$$
y(x_*) = y_j - \frac{y_j - y_{j-1}}{\Delta x}\left(x_j - x_*\right)
$$&lt;/div&gt;
&lt;p&gt;which we can see is equivalent to the upstream difference equations if we
equate:&lt;/p&gt;
&lt;div class="math"&gt;$$
y(x_*) = y_j^{n+1}
$$&lt;/div&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;div class="math"&gt;$$
x_j - x_* = u_0\Delta t
$$&lt;/div&gt;
&lt;p&gt;such that:&lt;/p&gt;
&lt;div class="math"&gt;$$
x_* = x_j - u_0 \Delta t
$$&lt;/div&gt;
&lt;p&gt;Therefore, the point that we interpolate onto, &lt;span class="math"&gt;\(x_*\)&lt;/span&gt;, is that point which, after the
time-step has elapsed, will have translated to location &lt;span class="math"&gt;\(x_j\)&lt;/span&gt;. The upstream
differencing equation is equivalent to equating the (interpolated) value of the
field at this location at the start of the time-step with the value of the
field at the grid point &lt;span class="math"&gt;\(x_j\)&lt;/span&gt; at the end of the time-step, which is the
solution we are seeking.&lt;/p&gt;
&lt;p&gt;This is the essence of the semi-Lagrangian differencing scheme. For each
grid-point, we track back along the fluid velocity field until the beginning of
the time-step (at which time the advected field is known) to find what is
referred to as the &lt;em&gt;departure point&lt;/em&gt;; then we interpolate the advecting field onto
the departure point, and take that value to be the field value at the grid
point at the end of the time-step. This can clearly work in multiple
dimensions, and can be adapted for space- and time-varying velocity fields.&lt;/p&gt;
&lt;p&gt;With this interpretation of upstream differencing as interpolation, we can see
that the upstream scheme becomes unstable when the point we need to interpolate onto,
that will arrive at &lt;span class="math"&gt;\(x_j\)&lt;/span&gt; at the end of the time-step, is more than one grid
cell away, and is thus no longer bounded by &lt;span class="math"&gt;\(x_{j-1}\)&lt;/span&gt; and &lt;span class="math"&gt;\(x_j\)&lt;/span&gt;. However, it is
clearly possible to generalise the interpolation such that it uses the
appropriate bounding grid points, wherever the departure point might be:&lt;/p&gt;
&lt;div class="math"&gt;$$
y_j^{n+1} = y_*
          = y_{j-p} - \frac{y_{j-p} - y_{j-p-1}}{\Delta x}\left(x_{j-p} - x_*\right)
$$&lt;/div&gt;
&lt;p&gt;Now:&lt;/p&gt;
&lt;div class="math"&gt;$$
u_0 \Delta t = p\Delta x + \left(x_{j-p} - x_*\right)
$$&lt;/div&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;div class="math"&gt;$$
\alpha  = \frac{u_0\Delta t}{\Delta x} = p + f
$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(f\)&lt;/span&gt; is the fractional distance across the cell between &lt;span class="math"&gt;\(x_*\)&lt;/span&gt; and
&lt;span class="math"&gt;\(x_{j-p}\)&lt;/span&gt;. For simple upstream differencing, the stability condition
that &lt;span class="math"&gt;\(\alpha \lt 0\)&lt;/span&gt; required that &lt;span class="math"&gt;\(p = 0\)&lt;/span&gt;, since &lt;span class="math"&gt;\(p\)&lt;/span&gt; can take the values &lt;span class="math"&gt;\(0, 1,
2, ...\)&lt;/span&gt;. However, the stability condition for the general semi-Lagrangian
technique is found to be that &lt;span class="math"&gt;\(f \lt 0\)&lt;/span&gt;. This is true as long as the closest
bounding grid points are used in the interpolation, no matter what the value
of &lt;span class="math"&gt;\(p\)&lt;/span&gt;. Hence, time-steps of any length can be chosen (on stability grounds -
accuracy is as usual a different matter).&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content></entry><entry><title>Radiation pressure and the Stefan-Boltzmann law (2/4)</title><link href="http://0x7df.github.io/radiation-pressure-and-the-stefan-boltzmann-law-24.html" rel="alternate"></link><published>2018-05-25T13:22:00+01:00</published><updated>2018-05-25T13:22:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2018-05-25:/radiation-pressure-and-the-stefan-boltzmann-law-24.html</id><summary type="html">&lt;p&gt;In a
&lt;a href="http://0x7df.github.io/thermal-radiation-kirchhoffs-law-and-black-bodies-14.html"&gt;previous post on Kirchhoff's law (1859) and black bodies&lt;/a&gt;
, we saw
that the energy density of thermal radiation is a function of
temperature only. The first measurements of thermal radiation (from hot
platinum wire) were made by Tyndall, and from his results Stefan
concluded, in 1879, that the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In a
&lt;a href="http://0x7df.github.io/thermal-radiation-kirchhoffs-law-and-black-bodies-14.html"&gt;previous post on Kirchhoff's law (1859) and black bodies&lt;/a&gt;
, we saw
that the energy density of thermal radiation is a function of
temperature only. The first measurements of thermal radiation (from hot
platinum wire) were made by Tyndall, and from his results Stefan
concluded, in 1879, that the energy radiated went as the fourth power of
the absolute temperature. This empirical relationship was later
theoretically determined, for black bodies, by Boltzmann in 1884. The
law that bears both their names is:&lt;/p&gt;
&lt;div class="math"&gt;$$ R_B = \sigma T^4 $$&lt;/div&gt;
&lt;p&gt;and &lt;span class="math"&gt;\( \sigma\)&lt;/span&gt; is known as the Stefan-Boltzmann
constant, and &lt;span class="math"&gt;\( R_B\)&lt;/span&gt; is the emissive power, the
radiant power emitted per unit area.&lt;/p&gt;
&lt;h2&gt;Radiation pressure&lt;/h2&gt;
&lt;p&gt;Before we begin, it's necessary to understand that radiation exerts a
pressure. The easiest way to calculate the radiation pressure is to
assume that photons are particles of mass &lt;span class="math"&gt;\( m\)&lt;/span&gt;, where
&lt;span class="math"&gt;\(m\)&lt;/span&gt; is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$ e = mc^2 $$&lt;/div&gt;
&lt;p&gt;&lt;span class="math"&gt;\(e\)&lt;/span&gt; being the photon energy. If we do this, then we
can treat the radiation field as a photon gas and find its pressure in
the same way as we would for a normal gas, from kinetic arguments; we
assume the pressure is the sum of all the impulses delivered to a unit
area of the wall in unit time by particles colliding with it.&lt;/p&gt;
&lt;p&gt;The collision rate of a single particle is:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{|u_x|}{2 L_x}$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\( u_x\)&lt;/span&gt; is the component of the particle's velocity normal to the wall
(assumed
conserved), and &lt;span class="math"&gt;\( L_x\)&lt;/span&gt; is the dimension of the
container along the normal to the wall. The impulse delivered in each
collision is equal to the momentum change of the particle, i.e.:&lt;/p&gt;
&lt;div class="math"&gt;$$ 2m|u_x|$$&lt;/div&gt;
&lt;p&gt;So the impulse per unit time is:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{m u_x^2}{L_x} $$&lt;/div&gt;
&lt;p&gt;for a single particle. This leads to:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{N \bar m c^2}{3 L_x}$$&lt;/div&gt;
&lt;p&gt;for &lt;span class="math"&gt;\(N\)&lt;/span&gt; particles, where &lt;span class="math"&gt;\( c^2/3\)&lt;/span&gt; is
the mean value of &lt;span class="math"&gt;\( \bar{u_x^2}\)&lt;/span&gt; and &lt;span class="math"&gt;\( \bar m\)&lt;/span&gt;
is the mean mass. This force corresponds to a pressure of:&lt;/p&gt;
&lt;div class="math"&gt;$$ p = \frac{N \bar m c^2}{3 V} $$&lt;/div&gt;
&lt;p&gt;where we have assumed the volume &lt;span class="math"&gt;\( V = L_x A\)&lt;/span&gt;; or:&lt;/p&gt;
&lt;div class="math"&gt;$$ p = \frac{n \bar m c^2}{ 3}$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\( n = N/V\)&lt;/span&gt; is the number density of particles.
Replacing &lt;span class="math"&gt;\( \bar m c^2\)&lt;/span&gt; with &lt;span class="math"&gt;\(/bar e\)&lt;/span&gt;
gives:&lt;/p&gt;
&lt;div class="math"&gt;$$ p = \frac{1}{3} n\bar e$$&lt;/div&gt;
&lt;p&gt;which is the same as:&lt;/p&gt;
&lt;div class="math"&gt;$$ p = \frac{1}{3} \frac{E}{V} $$&lt;/div&gt;
&lt;h2&gt;Derivation of the Stefan-Boltzmann law - energy density&lt;/h2&gt;
&lt;p&gt;Let's begin with the general thermodynamic expression:&lt;/p&gt;
&lt;div class="math"&gt;$$ dE = T dS - p dV $$&lt;/div&gt;
&lt;p&gt;which applies when volume is the only constraint to be be varied. If we
divide by &lt;span class="math"&gt;\( dV\)&lt;/span&gt; at fixed &lt;span class="math"&gt;\( T\)&lt;/span&gt; we
obtain:&lt;/p&gt;
&lt;div class="math"&gt;$$ \left( \partial E/\partial V\right)_T = T \left(\partial
S/\partial V\right)_T - p $$&lt;/div&gt;
&lt;p&gt;We can see that for an enclosure at constant temperature:&lt;/p&gt;
&lt;div class="math"&gt;$$ \left(\partial E/\partial V\right)_T = E/V $$&lt;/div&gt;
&lt;p&gt;(i.e. the energy density in the cavity), since increasing the size of
the cavity just adds more radiation at the same density (we proved in
the
&lt;a href="http://0x7df.github.io/thermal-radiation-kirchhoffs-law-and-black-bodies-14.html"&gt;previous post&lt;/a&gt;
that the energy density is constant throughout and
depends only on the temperature of the walls, not on the size or shape
or material). Hence:&lt;/p&gt;
&lt;div class="math"&gt;$$ E/V = T \left(\partial S/\partial V\right)_T - p
$$&lt;/div&gt;
&lt;p&gt;Next we can also use the Maxwell relation:&lt;/p&gt;
&lt;div class="math"&gt;$$ \left(\partial S/\partial V\right)_T = \left(\partial
p/\partial T\right)_V $$&lt;/div&gt;
&lt;p&gt;which comes from the fact that both:&lt;/p&gt;
&lt;div class="math"&gt;$$ dF = -S dT - p dV $$&lt;/div&gt;
&lt;div class="math"&gt;$$ dF = \left(\partial F/\partial T\right)_V dT +
\left(\partial F/\partial V\right)_T dV $$&lt;/div&gt;
&lt;p&gt;are true, so that we can identify:&lt;/p&gt;
&lt;div class="math"&gt;$$ S = -\left(\partial F/\partial T\right)_V $$&lt;/div&gt;
&lt;div class="math"&gt;$$ p = - \left(\partial F/\partial V\right)_T $$&lt;/div&gt;
&lt;p&gt;and, bearing in mind that &lt;span class="math"&gt;\( \left(\partial/\partial V\right)_T
\left(\partial F/\partial T\right)_V = \left(\partial/\partial
T\right)_V \left(\partial F/\partial V\right)_T\)&lt;/span&gt;,
arrive at:&lt;/p&gt;
&lt;div class="math"&gt;$$ \left(\partial S/\partial V\right)_T = \left(\partial
p/\partial T\right)_V$$&lt;/div&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;Inserting this result into:&lt;/p&gt;
&lt;div class="math"&gt;$$ E/V = T \left(\partial S/\partial V\right)_T - p
$$&lt;/div&gt;
&lt;p&gt;gives:&lt;/p&gt;
&lt;div class="math"&gt;$$ E/V = T \left(\partial p/\partial T\right)_V - p
$$&lt;/div&gt;
&lt;p&gt;Now, the radiation pressure is &lt;span class="math"&gt;\( p = (1/3) E/V\)&lt;/span&gt;, so:&lt;/p&gt;
&lt;div class="math"&gt;$$ 4p = T \left(\partial p/\partial T\right)_V
$$&lt;/div&gt;
&lt;p&gt;Hence:&lt;/p&gt;
&lt;div class="math"&gt;$$ dp/p = 4 dT/T $$&lt;/div&gt;
&lt;p&gt;at fixed &lt;span class="math"&gt;\( T\)&lt;/span&gt;. It follows that &lt;span class="math"&gt;\( p \propto T^4\)&lt;/span&gt;, and since &lt;span class="math"&gt;\( p \propto E/V\)&lt;/span&gt;, then:&lt;/p&gt;
&lt;div class="math"&gt;$$ E/V \propto T^4 $$&lt;/div&gt;
&lt;p&gt;That is, the radiation energy density is proportional to the fourth
power of the temperature. (We will call the constant of proportionality
here &lt;span class="math"&gt;\(a\)&lt;/span&gt; to distinguish it from &lt;span class="math"&gt;\( \sigma\)&lt;/span&gt;,
since here we are considering energy density, and the
version of the Stefan-Boltzmann law we gave at the beginning was for the
radiated power per unit area.) Hence, and finally:&lt;/p&gt;
&lt;div class="math"&gt;$$ E/V = a T^4 $$&lt;/div&gt;
&lt;h2&gt;Stefan-Boltzmann law - radiated power&lt;/h2&gt;
&lt;p&gt;If the energy density in the interior of our constant-temperature
enclosure is &lt;span class="math"&gt;\( E/V = a T^4\)&lt;/span&gt;, then the flux onto unit
area of the cavity wall would be &lt;span class="math"&gt;\( ac T^4\)&lt;/span&gt; if the
radiation were all incident normally on the wall. If it were incident at
an angle &lt;span class="math"&gt;\( \theta\)&lt;/span&gt; to the normal, the flux would be
&lt;span class="math"&gt;\( ac T^4 \cos \theta\)&lt;/span&gt;. In reality the radiation is
isotropic, so the flux is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$ R_B = \int{ac T^4 \cos \theta}df $$&lt;/div&gt;
&lt;p&gt;where we have equated the radiated power per unit area, &lt;span class="math"&gt;\(R_B\)&lt;/span&gt;, with the
flux of radiation falling on the wall, which must be true if the
wall temperature stays constant; and where &lt;span class="math"&gt;\( df\)&lt;/span&gt; is the
area element of the unit sphere centred at the point of interest on the
wall. This is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$ df = \frac{2\pi r^2 \sin \theta d\theta}{ 4\pi r^2} $$&lt;/div&gt;
&lt;p&gt;so the flux is:&lt;/p&gt;
&lt;div class="math"&gt;$$R_B = \frac{1}{2} \int_0^{\pi /2} {ac T^4 \cos\theta\sin\theta} d\theta  = \frac{1}{4} acT^4 $$&lt;/div&gt;
&lt;p&gt;If we define &lt;span class="math"&gt;\( \sigma = (1/4) ac\)&lt;/span&gt; then:&lt;/p&gt;
&lt;div class="math"&gt;$$ R_B = \sigma T^4 $$&lt;/div&gt;
&lt;p&gt;which is where we began.&lt;/p&gt;
&lt;p&gt;Note that, since we know from Kirchhoff's law that a non-black body
radiator has emissive power &lt;span class="math"&gt;\( R = a R_B\)&lt;/span&gt;, where
&lt;span class="math"&gt;\( a\)&lt;/span&gt; is the absorptivity of the non-black body at the
temperature in question, then in general:&lt;/p&gt;
&lt;div class="math"&gt;$$ R = a\sigma T^4 $$&lt;/div&gt;
&lt;p&gt;Care is needed using this formula because &lt;span class="math"&gt;\( a\)&lt;/span&gt; often
has a strong dependence on temperature.&lt;/p&gt;
&lt;p&gt;In practice, it is usually the difference between emitted and absorbed
radiation that is measured. A black body at temperature &lt;span class="math"&gt;\( T_1\)&lt;/span&gt;
emits radiation at a rate of &lt;span class="math"&gt;\( \sigma T_1^4\)&lt;/span&gt; per
unit area, but if it is placed in a sealed enclosure with wall
temperature &lt;span class="math"&gt;\( T_2\)&lt;/span&gt;, so that its surroundings are at
temperature &lt;span class="math"&gt;\( T_2\)&lt;/span&gt;, it is subject to incident
radiation at a rate of &lt;span class="math"&gt;\(\sigma T_2^4\)&lt;/span&gt;. (This latter must
be true since, if the body were in equilibrium with the radiation field
of the enclosure, it would be radiating at a rate of&lt;span class="math"&gt;\(\sigma T_2^4\)&lt;/span&gt;,
and since it's in equilibrium, must absorb radiation at
the same rate. The rate of absorption is no different when the body is
at a different temperature  (Assume the body is small enough compared to
the enclosure that its presence doesn't disturb the radiation field in
the enclosure - &lt;span class="math"&gt;\( T_2\)&lt;/span&gt; is constant.))&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="physics"></category><category term="thermodynamics"></category></entry><entry><title>Grep, regex and sed inline replace on multiple files</title><link href="http://0x7df.github.io/grep-regex-and-sed-inline-replace-on-multiple-files.html" rel="alternate"></link><published>2018-05-25T09:53:00+01:00</published><updated>2018-05-25T09:53:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2018-05-25:/grep-regex-and-sed-inline-replace-on-multiple-files.html</id><summary type="html">&lt;p&gt;I'm importing WordPress blog posts into &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;, in which I'm using the
&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/render_math"&gt;render-math plugin&lt;/a&gt;. This expects in-line equations to be delimited by single
dollar signs, and displayed equations to be delimited by double dollar signs,
e.g.:&lt;/p&gt;
&lt;pre&gt; ...an example in-line equation is $E = mc^2$, which ... &lt;/pre&gt;

&lt;p&gt;and:&lt;/p&gt;
&lt;pre&gt;... the following equation …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;I'm importing WordPress blog posts into &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;, in which I'm using the
&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/render_math"&gt;render-math plugin&lt;/a&gt;. This expects in-line equations to be delimited by single
dollar signs, and displayed equations to be delimited by double dollar signs,
e.g.:&lt;/p&gt;
&lt;pre&gt; ...an example in-line equation is $E = mc^2$, which ... &lt;/pre&gt;

&lt;p&gt;and:&lt;/p&gt;
&lt;pre&gt;... the following equation:

$$ F = ma $$

is displayed as a paragraph...&lt;/pre&gt;

&lt;p&gt;However, the original WordPress articles use &lt;code&gt;\$latex&lt;/code&gt; as the opening
delimiter, and &lt;code&gt;\$&lt;/code&gt; as the closing delimiter, for both in-line and displayed
maths. Additionally, the WordPress equations also contain the strings &lt;code&gt;&amp;amp;s=1&lt;/code&gt;
and &lt;code&gt;$bg=ffffff&lt;/code&gt; after the maths but before the closing delimiter; these were
to set the font size and the background colour, respectively.&lt;/p&gt;
&lt;p&gt;Therefore, a bit of mucking about with &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt;, and regular
expressions was required to get the equations to display in Pelican.&lt;/p&gt;
&lt;h2&gt;Regular expressions and &lt;code&gt;grep&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To begin with, look at the basic regular expression syntax
needed to pick out the &lt;code&gt;\$latex&lt;/code&gt;, &lt;code&gt;\$&lt;/code&gt;, &lt;code&gt;&amp;amp;s=1&lt;/code&gt; and &lt;code&gt;&amp;amp;bg=ffffff&lt;/code&gt; strings.&lt;/p&gt;
&lt;p&gt;First:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep &lt;span class="s1"&gt;&amp;#39;\\$[latex]\{5\}&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;find ./content -name &lt;span class="s2"&gt;&amp;quot;*.md&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, the last part - &lt;code&gt;$(find ./content -name "*.md")&lt;/code&gt; - is just using the find
command to get all the files in the content directory (which is where all the
MarkDown-format article files are stored), which have file-names ending in
&lt;code&gt;.md&lt;/code&gt;, (which is the default suffix for MarkDown); 
grep command is operating on this list, which allows grep to operate on all the files individually.&lt;/p&gt;
&lt;p&gt;The important bit is the regular expression - &lt;code&gt;\\$[latex]\{5\}&lt;/code&gt;. Matching
backslashes is slightly tricky, because backslash is a special character for grep and
many other tools. Special characters like backslash therefore need to be
preceded by a particular special character that tells grep to treat the
following character as itself, rather than as the special character it would
usually be treated as. This is called "escaping" the special character. The
special character that does this is - the backslash! That is, &lt;code&gt;\\&lt;/code&gt; is needed to match
a literal backslash in a regular expression.&lt;/p&gt;
&lt;p&gt;The next character is the dollar sign, which can be left alone. This is odd,
because the dollar sign is also a special character in regular expressions, so it ought to be escaped
by preceding it with a backslash. (Indeed, if we do, the command works equally
well.) However, the dollar sign is used to match the end of a line; the fact
that in this regular expression there are further characters to match (namely
the &lt;code&gt;[latex]\{5\}&lt;/code&gt; bit), means it can't be interpreted as the end-of-line
special character. &lt;code&gt;grep&lt;/code&gt; is clever enough to infer from the
context that the dollar sign here is intended to match itself, and not to be
interpreted as a special character.&lt;/p&gt;
&lt;p&gt;Moving on, we see &lt;code&gt;[latex]\{5\}&lt;/code&gt;. The square brackets define a range of
characters to match; in this case it should be thought of as the list of
characters l, a, t, e and x, rather than the string "latex". This part alone
would match any &lt;em&gt;single&lt;/em&gt; letter from this set. The following part - &lt;code&gt;\{5\}&lt;/code&gt; -
indicates that the preceding character (i.e. the &lt;code&gt;[latex]&lt;/code&gt; part) should be
matched five times. Therefore the combination of these matches any
five-character string composed from the letters l, a, t, e and x. Clearly this
would match strings other than "latex" - e.g. "altex", "lllll", "xetal",
etc. - but these are sufficiently unlikely that this form of syntax is
good enough. In fact, the more general &lt;code&gt;[a-z]\{5\}&lt;/code&gt;, which would match any
five-character string composed of the lower case letters, would probably 
work just fine.&lt;/p&gt;
&lt;p&gt;So, now we have our regular expression for the opening delimiter, but it does not distinguish between
in-line and displayed mathematics, which need different delimiters in the
output format we're converting to. Probably the simplest way to do this is to identify any equation that's
on a line of its own as a displayed equation, and any other equation as
inline. This means that opening delimiters that appear at the start of a line
are probably associated with a displayed equation, so can replaced with &lt;code&gt;$$&lt;/code&gt;.
To match only instances at the start of a line, we add a caret symbol to the
start of the regular expression.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep &lt;span class="s1"&gt;&amp;#39;^\\$[latex]\{5\}&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;find content -name &lt;span class="s2"&gt;&amp;quot;*.md&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Search and replace with &lt;code&gt;sed&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;So far we've used grep which lists the matches; this was useful just to
work out and test the regex. Now we have that right, we need to switch to &lt;code&gt;sed&lt;/code&gt;
- stream editor - to do the search and replace. The sed syntax is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed s/string1/string2/g inputfile &amp;gt; outputfile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The runs sed with the script &lt;code&gt;s/string1/string2/g&lt;/code&gt;, which tells sed to
substitute (because of the starting &lt;code&gt;s&lt;/code&gt;) the string &lt;code&gt;string1&lt;/code&gt; with the
replacement &lt;code&gt;string2&lt;/code&gt;, and to do it globally (due to the ending &lt;code&gt;g&lt;/code&gt;), i.e. to
replace all instances in &lt;code&gt;inputfile&lt;/code&gt;, rather than just the first one that's
encountered. By default &lt;code&gt;sed&lt;/code&gt; prints its output to standard out, which we
redirect to &lt;code&gt;outputfile&lt;/code&gt;. However, we want to edit the files inline, rather
than create a new set of files, and redirecting &lt;code&gt;sed&lt;/code&gt; output to the same file
that is being processed is not recommended. To edit inline, the &lt;code&gt;-i&lt;/code&gt; switch is
added, giving in general:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed -i s/string1/string2/g inputfile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or in our case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed -i s/&lt;span class="s1"&gt;&amp;#39;^\\$[latex]\{5\}&amp;#39;&lt;/span&gt;/&lt;span class="s1"&gt;&amp;#39;$$&amp;#39;&lt;/span&gt;/g inputfile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The final step in building this up is to take care of the fact that I want to
do this with dozens of files, and I don't want to do it manually. I could
write a script that loops over the files, but it's easier to use the &lt;code&gt;xargs&lt;/code&gt;
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find content -name *.md &lt;span class="p"&gt;|&lt;/span&gt; xargs sed -i s/&lt;span class="s1"&gt;&amp;#39;^\\$[latex]\{5\}&amp;#39;&lt;/span&gt;/&lt;span class="s1"&gt;&amp;#39;$$&amp;#39;&lt;/span&gt;/g
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here the output of the find command, which is a list of the files that
were found, is piped to the xargs command, which takes the list passed to it
and applies the commands that come after it to each member of the list.&lt;/p&gt;
&lt;h2&gt;More of the same&lt;/h2&gt;
&lt;p&gt;The next command replaces the WordPress-style closing delimiters - &lt;code&gt;\$&lt;/code&gt; - &lt;em&gt;that appear at the end of
a line&lt;/em&gt; (and which are therefore most likely to be associated with displayed rather than
in-line equations), with &lt;code&gt;$$&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find content -name *.md &lt;span class="p"&gt;|&lt;/span&gt; xargs sed -i s/&lt;span class="s1"&gt;&amp;#39;\\\$$&amp;#39;&lt;/span&gt;/&lt;span class="s1"&gt;&amp;#39;$$&amp;#39;&lt;/span&gt;/g
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The difference here is that we have now had to escape the dollar sign - &lt;code&gt;\$&lt;/code&gt;
rather than just &lt;code&gt;$&lt;/code&gt; - because we have added a final &lt;code&gt;$&lt;/code&gt; which is the special
character to match the end of a line.&lt;/p&gt;</content><category term="bash"></category><category term="computing"></category><category term="linux"></category><category term="programming"></category></entry><entry><title>Scripting Safari's Export to PDF function on a Mac</title><link href="http://0x7df.github.io/scripting-safaris-export-to-pdf-function-on-a-mac.html" rel="alternate"></link><published>2017-08-06T18:55:00+01:00</published><updated>2017-08-06T18:55:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2017-08-06:/scripting-safaris-export-to-pdf-function-on-a-mac.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Safari has an 'Export to PDF...' item in the 'File' menu which, if you use it a
lot, is something worth automating.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://macscripter.net/viewtopic.php?id=41654"&gt;this thread&lt;/a&gt; on
&lt;a href="http://macscripter.net"&gt;MacScripter&lt;/a&gt; this is easy to do using AppleScript.&lt;/p&gt;
&lt;h1&gt;Create script&lt;/h1&gt;
&lt;p&gt;First create the AppleScript script using the native Script Editor app.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open 'Launchpad' and begin typing 'script editor' into the search bar at
   the top to find this app.
   &lt;img alt="Photo" src="http://0x7df.github.io/images/screenshot_launchpad.png"&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Paste the following script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set SaveFolderPath to &amp;quot;~/Documents/Test_PDF_Save_Folder/&amp;quot;
tell application &amp;quot;Safari&amp;quot; to activate
tell application &amp;quot;System Events&amp;quot;
    tell process &amp;quot;Safari&amp;quot;
        click menu item &amp;quot;Show Reader&amp;quot; of menu &amp;quot;View&amp;quot; of menu bar 1
        click menu item &amp;quot;Export as PDF…&amp;quot; of menu &amp;quot;File&amp;quot; of menu bar 1
        repeat until exists sheet 1 of window 1
            delay 0.02
        end repeat
        keystroke &amp;quot;g&amp;quot; using {command down, shift down}
        repeat until exists sheet 1 of sheet 1 of window 1
            delay 0.02
        end repeat
        tell sheet 1 of sheet 1 of window 1
            set value of text field 1 to SaveFolderPath
            click button &amp;quot;Go&amp;quot;
        end tell
        click button &amp;quot;save&amp;quot; of sheet 1 of window 1
        click menu item &amp;quot;Close Tab&amp;quot; of menu &amp;quot;File&amp;quot; of menu bar 1
    end tell
end tell
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;into the Script Editor:
   &lt;img alt="Photo" src="http://0x7df.github.io/images/screenshot_scripteditor.png"&gt;
   This is slightly different from the script at
   &lt;a href="http://macscripter.net/viewtopic.php?id=41654"&gt;this thread&lt;/a&gt;, in that it
   hard-wires a save folder instead of bringing up a dialogue box each time,
   and also that it puts the web page into reader view before exporting it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save the script somewhere, e.g.
    &lt;code&gt;~/Documents/Test_PDF_Save_Folder/safari_export_PDF.scpt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This script can be run from the command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;osascript ~/Documents/Test_PDF_Save_Folder/safari_export_PDF.scpt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to export the currently active tab in Safari to a PDF in the specified
location.&lt;/p&gt;
&lt;h1&gt;Create a keyboard shortcut&lt;/h1&gt;
&lt;p&gt;For extra convenience a keyboard shortcut can be created to run the script.
This uses the 'Automator' app.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start typing 'automator' into the Launchpad search bar:
   &lt;img alt="Photo" src="http://0x7df.github.io/images/screenshot_launchpad2.png"&gt;&lt;/li&gt;
&lt;li&gt;Select 'Service'
   &lt;img alt="Photo" src="http://0x7df.github.io/images/screenshot_automator.png"&gt;&lt;/li&gt;
&lt;li&gt;In the automator app, drag the 'Run shell script' item over to the main
   panel&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;osascript ~/Documents/Test_PDF_Save_Folder/safari_export_PDF.scpt&lt;/code&gt;
   command
   &lt;img alt="Photo" src="http://0x7df.github.io/images/screenshot_automator2.png"&gt;&lt;/li&gt;
&lt;li&gt;Save the workflow. The default save location is &lt;code&gt;~/Library/Services&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the 'System Preferences', go to 'Keyboard', 'Shortcuts', select
   'Services', and select the recently-saved workflow
   &lt;img alt="Photo" src="http://0x7df.github.io/images/screenshot_keyboard_shortcut.png"&gt;&lt;/li&gt;
&lt;li&gt;Choose a shortcut: in this example Shift-Command-E has been chosen&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;Now, after reading an article in Safari, pressing Shift-Command-E saves a PDF
version of the article in the folder specified, and closes the tab.&lt;/p&gt;
&lt;h1&gt;Update&lt;/h1&gt;
&lt;p&gt;I found this script was broken after upgrading from El Capitan to Safari.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;System Events got an error: Can’t get text field 1 of sheet 1 of sheet 1 of
window 1 of process &amp;quot;Safari&amp;quot;. Invalid index.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solving this required downloading XCode to make available the Accessibility
Inspector, which allows you to point and click on graphical interfaces to get
information on the UI elements. It turns out the &lt;code&gt;text field&lt;/code&gt; is now a &lt;code&gt;combo
box&lt;/code&gt;, and changing that in the script got it working again.&lt;/p&gt;</content></entry><entry><title>Calling bullshit</title><link href="http://0x7df.github.io/calling-bullshit.html" rel="alternate"></link><published>2017-05-20T23:20:00+01:00</published><updated>2017-05-20T23:20:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2017-05-20:/calling-bullshit.html</id><summary type="html"></summary><content type="html">&lt;p&gt;I've been watching the really great online lecture series
&lt;a href="http://callingbullshit.org"&gt;Calling Bullshit in the Age of Big Data&lt;/a&gt;
from the &lt;a href="http://www.washington.edu"&gt;University of Washington&lt;/a&gt;
&lt;a href="https://ischool.uw.edu"&gt;Information School&lt;/a&gt;:
&lt;div style="position:relative;height:0;padding-bottom:56.25%"&gt;&lt;iframe src="https://www.youtube.com/embed/A2OtU5vlR0k?list=PLPnZfvKID1Sje5jWxt-4CSZD7bUI4gSPS?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;So when I saw this tweet:
&lt;blockquote class="twitter-tweet" data-lang="en-gb"&gt;&lt;p lang="en" dir="ltr"&gt;If you&amp;#39;re worried / surprised by the NHS still running Windows XP, the good news is our nuclear submarines are all on XP too &lt;a href="https://twitter.com/hashtag/nhscyberattack?src=hash"&gt;#nhscyberattack&lt;/a&gt; &lt;a href="https://t.co/DgR16t3nLe"&gt;https://t.co/DgR16t3nLe&lt;/a&gt;&lt;/p&gt;&amp;mdash; ben goldacre (@bengoldacre) &lt;a href="https://twitter.com/bengoldacre/status/863305364544081920"&gt;13 May 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
in the aftermath of the
&lt;a href="https://arstechnica.com/security/2017/05/an-nsa-derived-ransomware-worm-is-shutting-down-computers-worldwide"&gt;WCry&lt;/a&gt; attack which badly hit the NHS, it struck me as:
'&lt;em&gt;too bad to be true&lt;/em&gt;'. We're often wary of things that are
too &lt;em&gt;good&lt;/em&gt; to be true (although surely still not often enough), but the course
authors point out that the opposite case should also invite our scepticism. We
first need to eschew the possibility that the large numbers of people involved in developing,
procuring, maintaining and protecting IT systems for nuclear
deterrent submarines are all inherently evil, and don't care if the world
accidentally ends in a conflagration, because that would be an example of the
&lt;a href="https://www.researchgate.net/publication/235413325_The_Intuitive_Psychologist_And_His_Shortcomings_Distortions_in_the_Attribution_Process"&gt;&lt;em&gt;fundamental attribution error&lt;/em&gt;&lt;/a&gt;
. Then what remains, the proposition that there's
such a gaping whole in the security infrastructure of a nation state's nuclear
arsenal, should strike us as unlikely enough to want to dig in a bit.&lt;/p&gt;
&lt;p&gt;Before we do, we should note that within hours there was a follow-up tweet
that provided some balance:
&lt;blockquote class="twitter-tweet" data-lang="en-gb"&gt;&lt;p lang="en" dir="ltr"&gt;I can believe there are safe ways to still run Windows XP given resources effort and attentiveness &lt;a href="https://t.co/pYTJ94MWQS"&gt;https://t.co/pYTJ94MWQS&lt;/a&gt;&lt;/p&gt;&amp;mdash; ben goldacre (@bengoldacre) &lt;a href="https://twitter.com/bengoldacre/status/863324326879268864"&gt;13 May 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
but comparing these two tweets gives us a nice illustration of one of the most
important properties of bullshit pointed out by the course authors. It's become
known as Brandolino's Law or Brandolino's Asymmetry Principle:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en-gb"&gt;&lt;p lang="en" dir="ltr"&gt;The bullshit asimmetry: the amount of energy needed to refute bullshit is an order of magnitude bigger than to produce it.&lt;/p&gt;&amp;mdash; Alberto Brandolini (@ziobrando) &lt;a href="https://twitter.com/ziobrando/status/289635060758507521"&gt;11 January 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;To evidence that, the original tweet was retweeted and liked 1.1K and 668
times respectively, versus 12 retweets and 27 likes on the follow-up tweet.&lt;/p&gt;
&lt;h1&gt;I call bullshit&lt;/h1&gt;
&lt;p&gt;So let's look closer.&lt;/p&gt;
&lt;h2&gt;Source&lt;/h2&gt;
&lt;p&gt;First, the tweet is a retweet of one that links to
&lt;a href="http://www.popularmechanics.com/military/weapons/a19061/britains-doomsday-subs-run-windows-xp"&gt;an article in Popular Mechanics&lt;/a&gt;,
which itself is pretty much just a rehash of
&lt;a href="https://www.theguardian.com/technology/2016/jan/16/trident-old-technology-brave-new-world-cyber-warfare"&gt;a slightly earlier Guardian article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, another well-respected debunker of bullshit,
&lt;a href="http://www.badscience.net/about-dr-ben-goldacre"&gt;Ben Goldacre&lt;/a&gt;
(the name should be
familiar), wrote in his book &lt;a href="https://read.amazon.co.uk/kp/embed?asin=B00HATQA8K&amp;amp;preview=newtab&amp;amp;linkCode=kpe&amp;amp;ref_=cm_sw_r_kb_dp_uJlizbW9JX5QN"&gt;&lt;em&gt;I think you'll find it's a bit more complicated
than that&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why Don't Journalists Link to Primary Sources?&lt;/p&gt;
&lt;p&gt;Whether it's a press release, an academic journal article, a formal report,
or even the full transcript of an interview, the primary source contains more
information for interested readers: it shows your working, and it allows
people to check whether what you wrote is true.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now I appreciate that the tweet, even though made by a journalist, isn't journalism
- it's just a tweet - but a well-known journalist has an 'institutional
credibility' that gives his output weight, so perhaps linking to primary
sources still matters in this case too. More importantly:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... There is a bigger fish here: if we had a &lt;em&gt;culture&lt;/em&gt; of linking to primary
sources - if they were always just a click away - then shame alone would
probably have stopped it going online. [My italics.]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That culture, if we're to protect against bullshit when we get much of our news
from Twitter and Facebook, needs to be ubiquitous and not just the purview of
professional journalists when doing their day jobs.&lt;/p&gt;
&lt;p&gt;So now we know the 'original' source of the story, we might slightly update our Bayesian
priors for the story being true, because we know the Guardian has political
leanings that could mean it's more inclined to be against nuclear weapons. In
fact the Guardian article is largely about how Trident is obsolete (&lt;em&gt;'Trident is
old technology': the brave new world of cyber warfare&lt;/em&gt;).
We might reasonably expect a platform called Popular Mechanics to be more
neutral, so by referring us to this, we're not only one unecessary step removed
from the 'original', but also deprived of some important information about the
possible interests and agenda of the originator. Calling Bullshit's guide to
spotting bullshit urges us always to ask:
&lt;em&gt;Who is telling me this?&lt;/em&gt; and &lt;em&gt;What's in it for them?&lt;/em&gt;. We need the primary
source to do this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Spotting bullshit" src="http://0x7df.github.io/images/calling_bullshit_0x7df.png"&gt;&lt;/p&gt;
&lt;h2&gt;Weasel words&lt;/h2&gt;
&lt;p&gt;In any case, I refer to the Guardian article as the 'primary source' or
'original' in only the loosest sense. In fact it simply says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Critics point in particular to the Royal Navy’s decision to install a variant
of Windows XP as the operating system on its missile-carrying Vanguard-class
submarines. It was cheaper than the alternatives, but Windows for Submarines,
as it is called, is also more vulnerable to malware as it comes off-the-
shelf. This also means there are more bugs in circulation that could affect
it, and every time a submarine comes to port and gets a software patch, it
is newly vulnerable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Over and above the apparent technical solecism of suggesting that
patching an operating system is what makes it vulnerable, the article uses
weasel words, citing anonynous 'critics' without giving any indication of how
credible they might be, or how to verify them.&lt;/p&gt;
&lt;h2&gt;Missing information&lt;/h2&gt;
&lt;p&gt;On further Googling, the story seems to originate with a
&lt;a href="https://www.theregister.co.uk"&gt;Register&lt;/a&gt;
&lt;a href="https://www.theregister.co.uk/2008/12/16/windows_for_submarines_rollout"&gt;article&lt;/a&gt;
, which says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Initial reports as the programme developed suggested that the OS in question
would be Windows 2000, but those who have worked on it have since informed
the Reg that in fact it is mostly based on XP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is slightly better than the Guardian's weasel words because at least the
assertion that XP is being used is attributed to people who have
worked on the installation of the system. However it's still pretty weak.&lt;/p&gt;
&lt;p&gt;The Register article though, isn't actually critical of the system:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Many in the software community have viewed the Royal Navy's wholesale move to
Windows-based command systems with concern [and note here that it's actally
the use of Windows-based systems overall that is criticised, not the use of
XP specifically]... we'd go relatively easy on submarine worries - even the
Trident boats - as sub command LANs are by their nature very isolated and
physically secure, and submarines almost never need to give their command
systems autonomous firing authority.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not only this, but this article is from &lt;em&gt;2008&lt;/em&gt;, six years before
support for XP ended, and there is no information about what might have
happened since then - it's perfectly plausible that the systems were upgraded,
or a support contract was negotiated like the one the US Navy is reported to
have (by Popular Mechanics again), which involves:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;paying for extra security and updates while it transitions to more modern
operating systems. A $9 million dollar tech support deal it cut with
Microsoft is good until July 2016, with an option to extend for another year
for $31 million.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the news article is really reporting, not that we know Trident submarines
run an obsolete operating system, but that back in 2008, there was a hint that
Trident ran an operating system, which didn't become obsolete for a further six
years.&lt;/p&gt;</content></entry><entry><title>Locking Git worktrees</title><link href="http://0x7df.github.io/locking-git-worktrees.html" rel="alternate"></link><published>2017-03-06T23:08:00+00:00</published><updated>2017-03-06T23:08:00+00:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2017-03-06:/locking-git-worktrees.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Git worktrees provide a way of separating the worktree for a given branch -
i.e. the project working files that are being version controlled - from the
.git directory containing Git's system files. The worktree can be stored
anywhere, and Git keeps a reference to it in the .git directory (in
the &lt;code&gt;.git/worktrees/&amp;lt;branchame&amp;gt;&lt;/code&gt; directory.)&lt;/p&gt;
&lt;p&gt;Worktrees can be safely deleted when finished with, as long as all important
changes have been committed. However, when you delete a worktree directory, the
references remain. If you try to create a new worktree for the same branch, Git
issues an error message because it checks for this reference metadata, rather
than for the actual worktree itself. Under normal circumstances this metadata
remains only until Git does its regular garbage collection, or you run &lt;code&gt;git
worktree prune&lt;/code&gt;. At that point Git cleans up references to any worktrees that
it can't find, and thence you can create a new worktree without the error.&lt;/p&gt;
&lt;p&gt;This is a problem if you store worktrees on removable media, or on local
disks whilst using multiple machines (with a network-accessible .git). It's
possible to unintentionally clean up references in the .git dir to worktrees
that haven't been deleted, but are just on currently-unmounted disks. To avoid
this you can protect the worktree by adding a file called &lt;code&gt;locked&lt;/code&gt; in the .git
directory for the branch (e.g. &lt;code&gt;.git/worktrees/&amp;lt;branchname&amp;gt;/locked&lt;/code&gt;). The
content of this file is unimportant, but it's not a bad idea to describe the
reason for locking the branch.&lt;/p&gt;
&lt;p&gt;The side effect is of course that worktree metadata doesn't get cleaned up for
worktrees that have been deleted; it's a good idea to get into the habit of
deleting the &lt;code&gt;locked&lt;/code&gt; file when deleting a worktree, until a there's a built-in
&lt;code&gt;git worktree remove&lt;/code&gt; command to look after this automatically.&lt;/p&gt;</content></entry><entry><title>Diffusion</title><link href="http://0x7df.github.io/diffusion.html" rel="alternate"></link><published>2017-03-05T14:07:00+00:00</published><updated>2017-03-05T14:07:00+00:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2017-03-05:/diffusion.html</id><summary type="html">&lt;h2&gt;Diffusion Equation&lt;/h2&gt;
&lt;p&gt;The time-dependent diffusion equation is:&lt;/p&gt;
&lt;div class="math"&gt;$$  
\frac{\partial u}{\partial t} = \nabla \cdot \left(
D\left(\mathbf{r}, t\right) \nabla u\left(\mathbf{r}, t\right)
\right) + Q\left(\mathbf{r}, t\right)  
 $$&lt;/div&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\( \mathbf{r}\)&lt;/span&gt; is position&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\( t\)&lt;/span&gt; is time&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\( u \left( \mathbf{r}, t \right)\)&lt;/span&gt; is …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;Diffusion Equation&lt;/h2&gt;
&lt;p&gt;The time-dependent diffusion equation is:&lt;/p&gt;
&lt;div class="math"&gt;$$  
\frac{\partial u}{\partial t} = \nabla \cdot \left(
D\left(\mathbf{r}, t\right) \nabla u\left(\mathbf{r}, t\right)
\right) + Q\left(\mathbf{r}, t\right)  
 $$&lt;/div&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\( \mathbf{r}\)&lt;/span&gt; is position&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\( t\)&lt;/span&gt; is time&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\( u \left( \mathbf{r}, t \right)\)&lt;/span&gt; is the
    unknown, i.e. diffusing quantity&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\( D \left( \mathbf{r}, t \right)\)&lt;/span&gt; is the
    diffusion coefficient&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\( Q \left( \mathbf{r}, t \right)\)&lt;/span&gt; is the
    source density&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From hereon we will display the quantities &lt;span class="math"&gt;\( D\)&lt;/span&gt;,
&lt;span class="math"&gt;\( Q\)&lt;/span&gt; and &lt;span class="math"&gt;\( u\)&lt;/span&gt; without
their arguments, for simplicity of notation.&lt;/p&gt;
&lt;p&gt;To derive the diffusion equation we begin with Fick's law &lt;a href="#fn1"&gt;(Fick,
1855)&lt;/a&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$  
\mathbf{F} = -D \nabla u  
 $$&lt;/div&gt;
&lt;p&gt;The vector field &lt;span class="math"&gt;\( \mathbf{F}\)&lt;/span&gt; is the flux,
which is the rate of transfer per unit area; the integral of the normal
component of &lt;span class="math"&gt;\( \mathbf{F}\)&lt;/span&gt; over a given surface
is equal to the rate of flow through the surface. The direction of the
flux vector is normal to the surface of constant concentration. Fick's
law says that for a given concentration &lt;span class="math"&gt;\( u\)&lt;/span&gt; at a
point &lt;span class="math"&gt;\( \mathbf{r}\)&lt;/span&gt;, the flux is
proportional to the concentration gradient there, and has the opposite
direction.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\( Q\)&lt;/span&gt; is the source density: the concentration
produced per unit time per unit volume.&lt;/p&gt;
&lt;p&gt;The divergence of &lt;span class="math"&gt;\( \mathbf{F}\)&lt;/span&gt;, i.e. &lt;span class="math"&gt;\(
\nabla \cdot \mathbf{F}\)&lt;/span&gt;, is the rate of loss of
concentration per unit time from the volume element.&lt;/p&gt;
&lt;p&gt;Hence, by conservation:&lt;/p&gt;
&lt;div class="math"&gt;$$  
\frac{\partial u}{\partial t} =  
- \nabla \cdot \mathbf{F} + Q  
 $$&lt;/div&gt;
&lt;p&gt;Hence:&lt;/p&gt;
&lt;div class="math"&gt;$$  
\frac{\partial u}{\partial t} =  
\nabla \cdot D \nabla u + Q  
 $$&lt;/div&gt;
&lt;p&gt;As we saw above, this is the diffusion equation (sometimes known as
Fick's second law).&lt;/p&gt;
&lt;p&gt;The equation as written is linear, although it would be non-linear if we
allowed the diffusion coefficient &lt;span class="math"&gt;\( D\)&lt;/span&gt; to vary
with the unknown &lt;span class="math"&gt;\( u\)&lt;/span&gt;, as well as with &lt;span class="math"&gt;\( x\)&lt;/span&gt;
and &lt;span class="math"&gt;\( t\)&lt;/span&gt;.&lt;/p&gt;
&lt;h2&gt;Special Cases&lt;/h2&gt;
&lt;p&gt;In the special case that &lt;span class="math"&gt;\( D\)&lt;/span&gt; is constant in space and time, then
this equation simplifies to:&lt;/p&gt;
&lt;div class="math"&gt;$$  
\frac{\partial u}{\partial t} = D \nabla^2 u + Q  
 $$&lt;/div&gt;
&lt;p&gt;and in steady-state, if &lt;span class="math"&gt;\(Q\)&lt;/span&gt; is also constant, &lt;span class="math"&gt;\( \partial u/\partial t = 0\)&lt;/span&gt;,
it reduces to Poisson's equation:&lt;/p&gt;
&lt;div class="math"&gt;$$  
\nabla^2 u = \frac{Q}{D}
 $$&lt;/div&gt;
&lt;p&gt;and further to Laplace's equation if the source term is zero:&lt;/p&gt;
&lt;div class="math"&gt;$$  
\nabla^2 u = 0  
 $$&lt;/div&gt;
&lt;p&gt;Returning now to the full equation, we recall that:&lt;/p&gt;
&lt;div class="math"&gt;$$
\nabla = \hat i \frac{\partial}{\partial x} + \hat j
\frac{\partial}{\partial y} + \hat k \frac{\partial}{\partial z}
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
= \hat e_{\rho} \frac{\partial}{\partial \rho} + \hat
e_{\phi} \frac{\partial}{\partial \phi} + \hat e_z
\frac{\partial}{\partial z}
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
= \hat e_{r} \frac{\partial}{\partial r} + \hat e_{\theta}
\frac{\partial}{\partial \theta} + \hat e_{\phi}
\frac{\partial}{\partial \phi}  
$$&lt;/div&gt;
&lt;p&gt;in Cartesian, cylindrical and spherical geometries, respectively.&lt;/p&gt;
&lt;p&gt;Consider first spherical geometry:&lt;/p&gt;
&lt;div class="math"&gt;$$  
\nabla \cdot D \nabla u = $$&lt;/div&gt;
&lt;div class="math"&gt;$$
\frac{1}{r^2} \frac{\partial}{\partial r} \left( r^2 D
\frac{\partial u}{\partial r} \right) +  
\frac{1}{r \sin \theta} \frac{\partial}{\partial \theta} \left(
\frac{D \sin \theta }{r} \frac{\partial u}{\partial \theta}
\right) +  
\frac{1}{r \sin \theta} \frac{\partial}{\partial \phi} \left(
\frac{D}{r \sin \theta} \frac{\partial u}{\partial \phi}
\right)  
 $$&lt;/div&gt;
&lt;p&gt;In cylindrical geometry:&lt;/p&gt;
&lt;div class="math"&gt;$$  
\nabla \cdot D \nabla u =  
\frac{1}{\rho} \frac{\partial}{\partial \rho} \left( \rho D
\frac{\partial u}{\partial \rho} \right) +  
\frac{1}{\rho} \frac{\partial}{\partial \phi} \left(
\frac{D}{\rho} \frac{\partial u}{\partial \phi} \right) +  
\frac{\partial}{\partial z} \left( D \frac{\partial u}{\partial
z} \right)  
 $$&lt;/div&gt;
&lt;p&gt;and in Cartesian geometry:&lt;/p&gt;
&lt;div class="math"&gt;$$  
\nabla \cdot D \nabla u =  
\frac{\partial}{\partial x}\left( D \frac{\partial u}{\partial
x} \right) +  
\frac{\partial}{\partial y}\left( D \frac{\partial u}{\partial
y} \right) +  
\frac{\partial}{\partial z}\left( D \frac{\partial u}{\partial
z} \right)  
 $$&lt;/div&gt;
&lt;p&gt;In one dimension:&lt;/p&gt;
&lt;div class="math"&gt;$$
\frac{\partial u}{\partial t} = \frac{1}{r^2}
\frac{\partial}{\partial r} \left( r^2 D \frac{\partial
u}{\partial r} \right) + Q   
$$&lt;/div&gt;
&lt;div class="math"&gt;$$\frac{\partial u}{\partial t} = \frac{1}{\rho}
\frac{\partial}{\partial \rho} \left( \rho D \frac{\partial
u}{\partial \rho} \right) + Q
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\frac{\partial u}{\partial t} = \frac{\partial}{\partial x}
\left( D \frac{\partial u}{\partial x} \right) + Q  
 $$&lt;/div&gt;
&lt;p&gt;These equations can be generalised:&lt;/p&gt;
&lt;div class="math"&gt;$$  
\frac{\partial u}{\partial t} = \frac{1}{x^p}
\frac{\partial}{\partial x} \left(x^p D \frac{\partial
u}{\partial x} \right) + Q  
 $$&lt;/div&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\( p = 0\)&lt;/span&gt; for plane geometry&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\( p = 1\)&lt;/span&gt; for 1D cylindrical geometry, and&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\( p = 2\)&lt;/span&gt; for 1D spherical geometry.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Heat Flow Equation&lt;/h2&gt;
&lt;p&gt;The phenomena of heat conduction and diffusion are basically the same,
and &lt;a href="#fn1"&gt;Fick, 1855&lt;/a&gt; first put diffusion on a quantitative
basis by adopting the mathematical equation of heat conduction derived
by Fourier &lt;a href="#fn2"&gt;(Fourier, 1822)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The heat flow equation of Fourier is:&lt;/p&gt;
&lt;div class="math"&gt;$$  
a \frac{\partial \theta}{\partial t} = \frac{\partial}{\partial
x} K \frac{\partial \theta}{\partial x}  
 $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\( a\)&lt;/span&gt; is the heat capacity of the material
per unit volume and &lt;span class="math"&gt;\(K\)&lt;/span&gt; is the thermal
conductivity. For constant conductivity this becomes:&lt;/p&gt;
&lt;div class="math"&gt;$$  
\frac{\partial \theta}{\partial t} = \frac{K}{a}
\frac{\partial^2 \theta}{\partial x^2}  
 $$&lt;/div&gt;
&lt;p&gt;where the corresponding equation for diffusion is:&lt;/p&gt;
&lt;div class="math"&gt;$$  
\frac{\partial u}{\partial t} = D \frac{\partial^2 u}{\partial
x^2}  
 $$&lt;/div&gt;
&lt;p&gt;For the two equations to correspond, we equate temperature
&lt;span class="math"&gt;\( \theta\)&lt;/span&gt; with concentration &lt;span class="math"&gt;\( u\)&lt;/span&gt;, which clearly implies that &lt;span class="math"&gt;\( D = K/a\)&lt;/span&gt;.
However, it is also the case that:&lt;/p&gt;
&lt;div class="math"&gt;$$  
\mathbf{F} = -K \nabla \theta  
 $$&lt;/div&gt;
&lt;p&gt;which, when compared with Fick's law for diffusion, implies that
&lt;span class="math"&gt;\( D = K\)&lt;/span&gt;, and therefore that in diffusion, unlike in heat
conduction, &lt;span class="math"&gt;\( a = 1\)&lt;/span&gt;. This is because we have
identified &lt;span class="math"&gt;\( C\)&lt;/span&gt; with &lt;span class="math"&gt;\( \theta\)&lt;/span&gt;,
whereas in heat conduction, the diffusing 'substance'
is actually heat, not temperature. The factor &lt;span class="math"&gt;\( a\)&lt;/span&gt; 
is needed to convert temperature to the amount of heat per unit
volume, whereas in diffusion, the concentration is already by definition
the amount of substance per unit volume, so &lt;span class="math"&gt;\( a = 1\)&lt;/span&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a name="fn1" href="http://www.tandfonline.com/doi/abs/10.1080/14786445508641925"&gt;
    Fick, A, 1855. On liquid diffusion. The London,
    dinburgh, and Dublin Philosophical Magazine and Journal of Science,
    X, 30-39.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a name="fn2" href="https://books.google.co.uk/books?id=No8IAAAAMAAJ"&gt;
    Fourier, JBJ, 1822. Théorie Analytique de la chaleur. F.
    Didot, Paris.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="diffusion"></category><category term="physics"></category></entry><entry><title>Improving Bash scripts</title><link href="http://0x7df.github.io/improving-bash-scripts.html" rel="alternate"></link><published>2017-03-05T11:44:00+00:00</published><updated>2017-03-05T11:44:00+00:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2017-03-05:/improving-bash-scripts.html</id><summary type="html"></summary><content type="html">&lt;p&gt;I've been working on improving my Bash scripting recently, working
systematically through the &lt;a href="http://www.tldp.org/LDP/abs/abs-guide.pdf"&gt;Advanced Bash-Scripting Guide&lt;/a&gt; for things I didn't know and for
good practices that I haven't systematically applied.&lt;/p&gt;
&lt;p&gt;Here are a few of the things it motivated me to apply across all my Bash
scripts.&lt;/p&gt;
&lt;h2&gt;Finding shell scripts&lt;/h2&gt;
&lt;p&gt;All my scripts already consistently used a sha-bang, which made them easy to
find:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find ~/Code -type f -not -path &lt;span class="s2"&gt;&amp;quot;*/.git/*&amp;quot;&lt;/span&gt; -print0 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; xargs -0 grep -Il &lt;span class="s2"&gt;&amp;quot;^[ ]*\#\!/[^\#\!]*sh&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;find&lt;/code&gt; command searches for all files in the &lt;code&gt;~/Code&lt;/code&gt; directory (filtering
out any that are inside a &lt;code&gt;.git&lt;/code&gt; directory) and passes the resulting list to
&lt;code&gt;xargs&lt;/code&gt;, which runs the &lt;code&gt;grep&lt;/code&gt; command on each result.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-print0&lt;/code&gt; and &lt;code&gt;-0&lt;/code&gt;
arguments to &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;xargs&lt;/code&gt; are designed to work with each other to protect
against whitespace or other dodgy characters in pathnames that &lt;code&gt;xargs&lt;/code&gt; would
split on. The former causes &lt;code&gt;find&lt;/code&gt; to separate the list of pathnames that it
produces with a special null character, and the latter causes &lt;code&gt;xargs&lt;/code&gt; to split
the list on that same character rather than on the usual characters, like
whitespace.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-I&lt;/code&gt; and &lt;code&gt;-l&lt;/code&gt; flags to &lt;code&gt;grep&lt;/code&gt; tell it to ignore binary files, and to print
out the name of the matched file, rather than the matching line, respectively.&lt;/p&gt;
&lt;p&gt;The regular expression matches strings of the form &lt;code&gt;#!/&lt;/code&gt;...&lt;code&gt;sh&lt;/code&gt;, where the
middle part represented here by ... can consist of any number of characters
other than &lt;code&gt;#&lt;/code&gt; or &lt;code&gt;!&lt;/code&gt;. This allows it to match various forms of sha-bang, such
as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;#!/bin/ksh&lt;/span&gt;
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="c1"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note also that only cases where the sha-bang is preceded by zero or more spaces
are matched, to prevent, for example, &lt;code&gt;this is a sha-bang: #!/bin/bash&lt;/code&gt; from
being matched.&lt;/p&gt;
&lt;p&gt;Once I had the list of scripts, I looped over the resulting list and &lt;code&gt;grep&lt;/code&gt;ped
for the following desirable features.&lt;/p&gt;
&lt;h2&gt;Error-checking with &lt;code&gt;set&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;A few of my scripts used &lt;code&gt;set -e&lt;/code&gt; or &lt;code&gt;set -u&lt;/code&gt;, depending on whether some
problem had cropped up while I was developing or debugging them that using
those commands helped me solve. However I decided it was time to get into the
habit of using them systematically across all my scripts, and to start using
&lt;code&gt;pipefail&lt;/code&gt; as well. Hence I added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; -eu
&lt;span class="nb"&gt;set&lt;/span&gt; -o pipefail
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to the top of all scripts that didn't already have them. If a script fails
because of an error in a pipe, no information is printed; but:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PIPESTATUS&lt;/span&gt;&lt;span class="p"&gt;[*]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will show the return codes of each command in the pipe; irritatingly, this
works only in Bash and not in Korn shell scripts. (There is an equivalent
&lt;code&gt;$pipestatus&lt;/code&gt; variable in Z shell.)&lt;/p&gt;
&lt;h2&gt;Extended test command&lt;/h2&gt;
&lt;p&gt;I was inconsistently mixing the standard &lt;code&gt;test&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt; ... &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the extended version, originally introduced in Korn shell and later ported
to Bash:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt; ... &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The latter has a few advantages.&lt;/p&gt;
&lt;p&gt;Quoting variables within &lt;code&gt;[[ ... ]]&lt;/code&gt; isn't necessary. &lt;code&gt;[&lt;/code&gt; is a command
and what follows are arguments to that command; if a variable in a
comparison is unset, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; -lt &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then &lt;code&gt;[&lt;/code&gt; sees only two arguments, and therefore complains that &lt;code&gt;-lt&lt;/code&gt; is not
a permissible operator for what it thinks is a two-argument form of the
command. Quoting ensures that the correct number of arguments is seen by
test. However, this isn't the case with &lt;code&gt;[[ .. ]]&lt;/code&gt; constructs.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; logical operators can be used, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$d&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$d&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; relational operators work without being escaped:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &amp;lt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but remember of course that these are text comparisons, so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt; &amp;gt; &lt;span class="m"&gt;54&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;   &lt;span class="c1"&gt;# Returns true&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt; -gt &lt;span class="m"&gt;54&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="c1"&gt;# Returns false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The extended test command implements the &lt;code&gt;=~&lt;/code&gt; regular-expression match:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;foobar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ bar &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It should be noted tht file globbing and word splitting do not take place in
the extended test command. From the Advanced Bash-Scripting Guide (attributed
to Stephane Chazelas):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; z* &lt;span class="o"&gt;]]&lt;/span&gt;   &lt;span class="c1"&gt;# True if $a starts with a &amp;quot;z&amp;quot; (pattern matching).&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;z*&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="c1"&gt;# True if $a is equal to z* (literal matching).&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; z* &lt;span class="o"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;# File globbing and word splitting take place.&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;z*&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# True if $a is equal to z* (literal matching).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Explicit typing&lt;/h2&gt;
&lt;p&gt;In Bash, either &lt;code&gt;declare&lt;/code&gt; or its synonym &lt;code&gt;typeset&lt;/code&gt; can be used to specify the
type of variables. I prefer &lt;code&gt;typeset&lt;/code&gt;, as it's also recognised by the Korn
shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;typeset&lt;/span&gt; -i integer_variable
&lt;span class="nb"&gt;typeset&lt;/span&gt; -r constant
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;-r&lt;/code&gt; form has the alternative &lt;code&gt;readonly&lt;/code&gt;, but using the &lt;code&gt;typeset&lt;/code&gt; form also
gives some consistency since &lt;code&gt;typeset&lt;/code&gt; has other uses, such as declaring
arrays:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;typeset&lt;/span&gt; -a an_array &lt;span class="c1"&gt;# Prior to Bash v4&lt;/span&gt;
&lt;span class="nb"&gt;typeset&lt;/span&gt; -A an_array &lt;span class="c1"&gt;# Bash v4 and Korn shell&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as well as allowing multiple attributes to be declared at once:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;typeset&lt;/span&gt; -ir integer_constant
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and attributes to be removed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;typeset&lt;/span&gt; +r variable &lt;span class="c1"&gt;# No longer read-only&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and finally in functions to define the variable scope to be local to
the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;typeset&lt;/span&gt; local_variable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The variable is local whether or not other arguments (e.g. &lt;code&gt;-i&lt;/code&gt;, &lt;code&gt;-r&lt;/code&gt;, etc.)
are supplied. Note that a variable inside a function declared with &lt;code&gt;readonly&lt;/code&gt;
is &lt;em&gt;not&lt;/em&gt; local, whereas if declared with &lt;code&gt;typeset -r&lt;/code&gt; it is - this is another
reason to use &lt;code&gt;typeset -r&lt;/code&gt; over &lt;code&gt;readonly&lt;/code&gt;, since it's good practice to make
variables local by default.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is just scratching the surface of 'advanced' Bash scripting tips for
defensive programming. More later.&lt;/p&gt;</content></entry><entry><title>Using the Atlassian Bitbucket API</title><link href="http://0x7df.github.io/using-the-atlassian-bitbucket-api.html" rel="alternate"></link><published>2017-02-27T14:39:00+00:00</published><updated>2017-02-27T14:39:00+00:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2017-02-27:/using-the-atlassian-bitbucket-api.html</id><summary type="html"></summary><content type="html">&lt;p&gt;A few pointers / examples for using the Bitbucket Server API (the API syntax
for Bitbucket Cloud might differ in some cases).&lt;/p&gt;
&lt;h2&gt;API authentication&lt;/h2&gt;
&lt;p&gt;Accessing Bitbucket through its API using curl requires username/password
authentication. Using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -u &amp;lt;username&amp;gt;:&amp;lt;password&amp;gt; ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is no good in a script if the script is intended to be used by several people.
Just:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -u &amp;lt;username&amp;gt; ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is better, as the password is then requested by curl and can be entered
by the user at the command line. However, the password is requested each time
curl is used in the script, which makes it irritating if there are several
calls in the script. The
solution is to record the password in a 'netrc' file, and then point curl to
this. If the file is called &lt;code&gt;.netrc&lt;/code&gt; and stored in the user's home directory,
then the &lt;code&gt;-n&lt;/code&gt; / &lt;code&gt;--netrc&lt;/code&gt; option can be used. The syntax of the file is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;machine &amp;lt;host.domain.com&amp;gt; login &amp;lt;username&amp;gt; password &amp;lt;password&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The same &lt;code&gt;.netrc&lt;/code&gt; file can hold lines for multiple hosts, so it would be fine
to add a line for Bitbucket to an existing &lt;code&gt;.netrc&lt;/code&gt; or to create it if it
didn't already exist. However to keep it simpler I chose to create a dedicated
netrc file and point to it with the &lt;code&gt;--netrc-file&lt;/code&gt; option (available in curl
from 7.21.5 onwards), which allows an arbitrary path/name for the netrc file.&lt;/p&gt;
&lt;h2&gt;SSH key&lt;/h2&gt;
&lt;p&gt;If access to Bibucket via SSH is required, then the user needs to add an SSH
key to their account. Using the API, we can do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl --netrc-file &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NETRC_FILE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -o json.tmp &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/ssh/1.0/keys&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to get any SSH keys already associated with the user's Bitbucket account,
where we have stored the full path to the authentication file discussed above
in the variable &lt;code&gt;$NETRC_FILE&lt;/code&gt;, and the URL to the Bitbucket server in &lt;code&gt;$URL&lt;/code&gt;.
The data returned by the API call gets stored in a file called &lt;code&gt;json.tmp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can pretty-print the JSON data returned by the Bitbucket API using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat json.tmp &lt;span class="p"&gt;|&lt;/span&gt; python -m json.tool
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;from which it's easy to extract the SSH key returned and match it against the
user's SSH key(s) in &lt;code&gt;${HOME}/.ssh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If there's no match, then we can take an existing key (or create one with
&lt;code&gt;ssh-keygen&lt;/code&gt;) and post it using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl --netrc-file &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NETRC_FILE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -i -H &lt;span class="s2"&gt;&amp;quot;Content-Type:application/json&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     -X POST --data &lt;span class="s1"&gt;&amp;#39;{&amp;quot;text&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SSH_KEY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/ssh/1.0/keys&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we have already stored the SSH key we want to post in the &lt;code&gt;$SSH_KEY&lt;/code&gt;
variable. The &lt;code&gt;-i&lt;/code&gt; flag includes the HTTP header in the output, and the &lt;code&gt;-H&lt;/code&gt;
option includes the argument that follows it as an extra header in the request
that curl sends. The &lt;code&gt;-X&lt;/code&gt; option is used to specify that curl should use the
'POST' method; this is actually redundant since the use of &lt;code&gt;--data&lt;/code&gt; implies
use of a 'POST' request.&lt;/p&gt;
&lt;p&gt;(As an aside, the annoying:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;X11 forwarding request failed on channel 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;message when using SSH can be suppressed by adding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Host &amp;lt;URL&amp;gt; [&amp;lt;URL&amp;gt; ...]
  ForwardX11 no
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to the &lt;code&gt;$HOME/.ssh/config&lt;/code&gt; file.)&lt;/p&gt;
&lt;h2&gt;Forking a repository&lt;/h2&gt;
&lt;p&gt;To check whether a repository &lt;code&gt;$REPO_NAME&lt;/code&gt; exists in &lt;code&gt;$USER&lt;/code&gt;'s personal space:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl --netrc-file &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NETRC_FILE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/1.0/projects/~&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/repos/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REPO_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;\&amp;quot;name\&amp;quot;:\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REPO_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and to create a user fork of a Bitbucket repository &lt;code&gt;$REPO_NAME&lt;/code&gt; under project
&lt;code&gt;$PROJECT&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl --netrc-file &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NETRC_FILE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -X POST -H &lt;span class="s2"&gt;&amp;quot;Content-Type:application/json&amp;quot;&lt;/span&gt;
     --data &lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/1.0/projects/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/repos/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REPO_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Changing repository permissions and settings&lt;/h2&gt;
&lt;p&gt;Changing permissions can also be done via the API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl --netrc-file &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NETRC_FILE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -X PUT &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/1.0/projects/~&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/repos/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REPO_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/permissions/groups?permission=REPO_READ&amp;amp;name=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example a repository &lt;code&gt;$REPO_NAME&lt;/code&gt; in &lt;code&gt;$USER&lt;/code&gt;'s personal space has had
read permission added for &lt;code&gt;$USER_NAME&lt;/code&gt; (which could also be the name of a
group defined on Bitbucket).&lt;/p&gt;
&lt;p&gt;An example of changing a setting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl --netrc-file &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NETRC_FILE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -X POST  -H &lt;span class="s2"&gt;&amp;quot;Content-Type:application/json&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     --data &lt;span class="s1"&gt;&amp;#39;{&amp;quot;type&amp;quot;:&amp;quot;fast-forward-only&amp;quot;,&amp;quot;matcher&amp;quot;:{&amp;quot;id&amp;quot;:&amp;quot;*&amp;quot;,&amp;quot;type&amp;quot;:{&amp;quot;id&amp;quot;:&amp;quot;PATTERN&amp;quot;}}}&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/branch-permissions/2.0/projects/~&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/repos/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REPO_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/restrictions&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we've added protection against re-writing history to all branches. In
the web interface to Bitbucket we would do this in 'Settings' / 'Branch
permissions' by clicking the 'Add permissions' button. We can add permissions
to a specific branch, a 'branch pattern' (which allows the use of wildcards),
or according to the branching model. The &lt;code&gt;"matcher"&lt;/code&gt; key in the data posted to
the API specifies that we want to use the 'branch pattern' mode of specifying
branches, and that we want the branch pattern itself to be '*' - i.e. we want
to apply the permission to all branches in the repository. The permission
itself is 'fast-forward-only', which corresponds to 'Prevent rewriting
history'.&lt;/p&gt;</content><category term="bitbucket"></category><category term="api"></category><category term="bash"></category><category term="atlassian"></category><category term="curl"></category></entry><entry><title>The shallow water equations</title><link href="http://0x7df.github.io/the-shallow-water-equations.html" rel="alternate"></link><published>2017-02-17T15:29:00+00:00</published><updated>2017-02-17T15:29:00+00:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2017-02-17:/the-shallow-water-equations.html</id><summary type="html"></summary><content type="html">&lt;p&gt;The governing equations in geophysical fluid dynamics can be simplified somewhat if the
horizontal length and velocity scales are much larger than the vertical length and
velocity scales, respectively.&lt;/p&gt;
&lt;p&gt;They are commonly used to describe both the ocean and atmosphere, as well as estuaries,
rivers and channels.&lt;/p&gt;
&lt;p&gt;A set of assumptions are made:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The fluid is incompressible.&lt;/li&gt;
&lt;li&gt;Vertical acceleration is small compared with horizontal accelerations, and
   &lt;a href="http://0x7df.github.io/hydrostatic-balance-in-the-atmosphere.html"&gt;hydrostatic balance&lt;/a&gt;
   can be assumed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Making these assumptions results in the 3D shallow water equations (&lt;a href="https://www.utwente.nl/ewi/sacs/teaching/Thesis/aukje-de-boer-comparison-of-two-numerical-schemes-for-solving-the-1d-shallow-water-equations.pdf"&gt;de Boer (2003)&lt;/a&gt;.
However it is much more common to make the additional assumption that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The horizontal velocity is constant with height/depth (there is no vertical shear).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given these assumptions, the 2D shallow water equations are then derived by integrating
over height to remove the vertical velocity, and therefore the vertical dimension
altogether. (Note that this is not the same as assuming the vertical velocity is zero,
which is not necessarily the case. If the bathymetry accounted for, the vertical velocity must be
non-zero where the floor changes depth. The vertical velocity can be recovered from
solutions of the shallow water equations via the continuity equation.)&lt;/p&gt;
&lt;p&gt;In the following equations we will ignore viscosity (i.e we will work from the Euler
fluid equations not the Navier-Stokes equations, although in some disciplines the
fluid viscosity is important and can be included in the shallow water equtions). This
renders the non-linear PDEs hyperbolic rather than parabolic. We shall also ignore
diffusion.&lt;/p&gt;
&lt;h2&gt;Three-dimensional shallow water equtions&lt;/h2&gt;
&lt;p&gt;In general in 3D the conservation of momentum is expressed by:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{\partial \mathbf{u}}{\partial t} + \mathbf{u}\cdot\nabla\mathbf{u}
    + f\mathbf{k}\times\mathbf{v} = -\frac{1}{\rho}\nabla p - g\mathbf{\hat k} $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(f\)&lt;/span&gt; is the Coriolis parameter, &lt;span class="math"&gt;\(\mathbf{\hat k}\)&lt;/span&gt; is a unit vector pointing away
from the centre of the planet. Also, &lt;span class="math"&gt;\(\mathbf{u}\)&lt;/span&gt; is the three-dimensional velocity
vector and &lt;span class="math"&gt;\(\mathbf{v}\)&lt;/span&gt; is the two-dimensional horizontal velocity vector, and we
have assumed the Coriolis force acts solely in the horizontal, since its vertical
component is small compared with the gravitational and pressure gradient forces.&lt;/p&gt;
&lt;p&gt;Alternatively:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{\partial u}{\partial t} + \frac{\partial uu}{\partial x}
    + \frac{\partial uv}{\partial y} + \frac{\partial uw}{\partial z}
    = -\frac{1}{\rho}\frac{\partial p}{\partial x}  + fv $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \frac{\partial v}{\partial t} + \frac{\partial vu}{\partial x}
    + \frac{\partial vv}{\partial y} + \frac{\partial vw}{\partial z}
    = -\frac{1}{\rho}\frac{\partial p}{\partial y} - fu $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \frac{\partial w}{\partial t} + \frac{\partial wu}{\partial x}
    + \frac{\partial wv}{\partial y} + \frac{\partial ww}{\partial z}
    = -\frac{1}{\rho}\frac{\partial p}{\partial z} - g $$&lt;/div&gt;
&lt;p&gt;The conservation of mass under the assumption of incompressibility is:&lt;/p&gt;
&lt;div class="math"&gt;$$ \nabla\cdot\mathbf{u} = 0 $$&lt;/div&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{\partial u}{\partial x} + \frac{\partial v}{\partial y}
   + \frac{\partial w}{\partial z} = 0 $$&lt;/div&gt;
&lt;p&gt;The condition of hydrostatic balance, which is the first key assumption of the
shallow water equations, is given by:&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation} \label{HydrostaticBalance} \frac{1}{\rho}\frac{\partial p}{\partial z} = -g \end{equation}&lt;/div&gt;
&lt;p&gt;This is derived from the momentum equation describing &lt;span class="math"&gt;\(w\)&lt;/span&gt; by assuming that the left-
hand side is zero:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{Dw}{Dt} = \frac{\partial w}{\partial t} + \frac{\partial wu}{\partial x}
    + \frac{\partial wv}{\partial y} + \frac{\partial ww}{\partial z}
    = 0 $$&lt;/div&gt;
&lt;p&gt;The hydrostatic balance equation can be immediately integrated from some arbitrary depth
&lt;span class="math"&gt;\(z\)&lt;/span&gt; up to the free surface, to give:&lt;/p&gt;
&lt;div class="math"&gt;$$ p = p_0 + \rho g\left(h - z\right) $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(p_0\)&lt;/span&gt; is the fixed pressure at the free surface (e.g. zero for the atmosphere, or
atmospheric pressure for the ocean), and &lt;span class="math"&gt;\(h\)&lt;/span&gt; is the elevation of the free
surface above &lt;span class="math"&gt;\(z = 0\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Then:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{\partial p}{\partial x} = \rho g\frac{\partial h}{\partial x} $$&lt;/div&gt;
&lt;p&gt;and similarly for &lt;span class="math"&gt;\(\partial p/\partial y\)&lt;/span&gt;. I.e.:&lt;/p&gt;
&lt;div class="math"&gt;$$ -\frac{1}{\rho}\nabla_h p = -g \nabla_h h $$&lt;/div&gt;
&lt;p&gt;The implication is that the horizontal pressure gradient force is a result only of
horizontal variatons in the free surface height.&lt;/p&gt;
&lt;p&gt;The remaining two components of the momentum equation are consequently:&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation} \label{3Du} \frac{\partial u}{\partial t} + \frac{\partial uu}{\partial x}
    + \frac{\partial uv}{\partial y} + \frac{\partial uw}{\partial z}
    = -g\frac{\partial h}{\partial x} + fv \end{equation}&lt;/div&gt;
&lt;div class="math"&gt;\begin{equation} \label{3Dv} \frac{\partial v}{\partial t} + \frac{\partial vu}{\partial x}
    + \frac{\partial vv}{\partial y} + \frac{\partial vw}{\partial z}
    = -g\frac{\partial h}{\partial y} - fu \end{equation}&lt;/div&gt;
&lt;p&gt;Equations &lt;span class="math"&gt;\(\ref{3Du}\)&lt;/span&gt;, &lt;span class="math"&gt;\(\ref{3Dv}\)&lt;/span&gt; and &lt;span class="math"&gt;\(\ref{3Dh}\)&lt;/span&gt; are the 3D shallow water equations.&lt;/p&gt;
&lt;h2&gt;Two-dimensional shallow water equations&lt;/h2&gt;
&lt;p&gt;To obtain the 2D shallow water equations we integrate the 3D equations over &lt;span class="math"&gt;\(z\)&lt;/span&gt;, to
obtain depth- (or height-) averaged forms of the equations. The Liebniz integral
rule is required since &lt;span class="math"&gt;\(h\)&lt;/span&gt;, which is one of the limits of the integration over &lt;span class="math"&gt;\(z\)&lt;/span&gt;,
depends on &lt;span class="math"&gt;\(x\)&lt;/span&gt;, &lt;span class="math"&gt;\(y\)&lt;/span&gt; and &lt;span class="math"&gt;\(t\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In 2D, the shallow water equations (neglecting diffusion, viscosity and friction) are:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{\partial h}{\partial t} + \frac{\partial hu}{\partial x} + \frac{\partial hv}
    {\partial y} = 0 $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \frac{\partial hu}{\partial t} + \frac{\partial hu^2}{\partial x}
    + \frac{\partial huv}{\partial y} = -g\frac{\partial h}{\partial x} + fhv $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \frac{\partial hv}{\partial t} + \frac{\partial huv}{\partial x}
    + \frac{\partial hv^2}{\partial y} = -g\frac{\partial h}{\partial y} -fhu $$&lt;/div&gt;
&lt;p&gt;The shallow water equations can be written more compactly thus:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{\partial phi}{\partial t} + \mathbf{v}\cdot\nabla\phi + \phi\nabla\cdot\mathbf{v}
    = 0$$&lt;/div&gt;
&lt;div class="math"&gt;$$ \frac{\partial\mathbf{v}}{\partial t} + \mathbf{v}\cdot\nabla\mathbf{v}
    + \nabla\mathbf{\phi} + f\mathbf{\hat k}\times\mathbf{v} = 0 $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(\phi = gh\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The first equation is obtained by integrating the continuity equation:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{\partial u}{\partial x} + \frac{\partial v}{\partial y}
   + \frac{\partial w}{\partial z} = 0 $$&lt;/div&gt;
&lt;p&gt;with respect to &lt;span class="math"&gt;\(z\)&lt;/span&gt; to give:&lt;/p&gt;
&lt;div class="math"&gt;$$ \left(\frac{\partial u}{\partial x} + \frac{\partial v}{\partial y}\right)h + w_h - w_0 = 0 $$&lt;/div&gt;
&lt;p&gt;The vertical velocity disappears at the lower boundary (&lt;span class="math"&gt;\(w_0 = 0\)&lt;/span&gt;) and the vertical
velocity at the free surface (at height &lt;span class="math"&gt;\(h\)&lt;/span&gt;) is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$ w_h = \frac{Dh}{Dt} $$&lt;/div&gt;
&lt;p&gt;Thus:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{Dh}{Dt} = \frac{\partial h}{\partial t} 
    + \frac{\partial hu}{\partial x} + \frac{\partial hv}{\partial y} = w_h
    = \left(\frac{\partial u}{\partial x} + \frac{\partial v}{\partial y}\right)h $$&lt;/div&gt;
&lt;h1&gt;One-dimensional shallow water equations&lt;/h1&gt;
&lt;p&gt;In 1D, which is often used for river management and hydraulics, the equations are:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{\partial u}{\partial t} = -u \frac{\partial u}{\partial x}
                                   -g \frac{\partial h}{\partial x} $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \frac{\partial h}{\partial t} = -u \frac{\partial h}{\partial x}
                                   -h \frac{\partial u}{\partial x} $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(h\)&lt;/span&gt; is the height of the free surface. Accelerations in the &lt;span class="math"&gt;\(y\)&lt;/span&gt; direction have
also been assumed negligible.&lt;/p&gt;
&lt;p&gt;In both equations the first term on the right
represents advection and the second term on the right represents &lt;a href="http://0x7df.github.io/adjustment-of-meteorological-fields-in-nwp.html"&gt;adjustment&lt;/a&gt;. (More
complex variants are used in river modelling and hydraulics that account for, for example,
the cross-sectional area of the channel. These are often referred to as the
&lt;a href="https://en.wikipedia.org/wiki/Shallow_water_equations#One-dimensional_Saint-Venant_equations"&gt;Saint Venant&lt;/a&gt;
equations, having originally been derived by Adhemar Jean Claude Barre de Saint-Venant,
in 1871.)&lt;/p&gt;
&lt;p&gt;In hydraulics studies Coriolis force is ignored but in geophysics applications it is
included, making the shallow water equations a useful simplistic framework in which to
study rotational flow under gravity.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content></entry><entry><title>Adjustment of meteorological fields in NWP</title><link href="http://0x7df.github.io/adjustment-of-meteorological-fields-in-nwp.html" rel="alternate"></link><published>2017-02-16T00:32:00+00:00</published><updated>2017-02-16T00:32:00+00:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2017-02-16:/adjustment-of-meteorological-fields-in-nwp.html</id><summary type="html"></summary><content type="html">&lt;p&gt;According to &lt;a href="http://www.ecmwf.int/sites/default/files/elibrary/2002/16948-numerical-methods.pdf"&gt;Riddaway and Hortal&lt;/a&gt;, the set of coupled non-linear partial differential equations solved in &lt;a href="https://en.wikipedia.org/wiki/Numerical_weather_prediction"&gt;numerical weather prediction&lt;/a&gt; (NWP) describe three important dynamical processses:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Advection&lt;/li&gt;
&lt;li&gt;Diffusion&lt;/li&gt;
&lt;li&gt;Adjustment&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first two are familiar to the non-meteorologist more used to working with the general equations of fluid motion. The third, &lt;em&gt;adustment&lt;/em&gt;, is less so.&lt;/p&gt;
&lt;p&gt;They describe adjustment as 'how the mass and wind fields adjust to one another'.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://books.google.com/books?isbn=0323157467"&gt;Marchuk (1974)&lt;/a&gt; also identifies three basic factors defining the evolution of meteorological fields (p.118):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The transport of meteorological substances along particle trajectories&lt;/li&gt;
&lt;li&gt;Turbulent exchange&lt;/li&gt;
&lt;li&gt;The adjustment of the fields&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;which are analogous.&lt;/p&gt;
&lt;p&gt;Marchuk describes the distinction thus:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;One can imagine the following simplified pattern of evolution of the meteorological fields. Let us consider an elementary time interval &lt;span class="math"&gt;\(\Delta t\)&lt;/span&gt;. During this time interval, the meteorological [fields], fixed at the initial instant of the time interval, will move along the trajectories with a velocity &lt;span class="math"&gt;\(\mathbf{u}\)&lt;/span&gt;, so that the initial particle position vector &lt;span class="math"&gt;\(\mathbf{r}_0\)&lt;/span&gt; will become &lt;span class="math"&gt;\(\mathbf{r} = \mathbf{r}_0 + \mathbf{u}\Delta t\)&lt;/span&gt;. Naturally, this will disrupt the basic adjustment... The adjustment of the fields takes place after their displacement along the trajectories, during the second step. The wave processes, ... gravity and sound waves, are considered as the mechanism of field adjustment in the case of the simplest models of atmospheric motions. The wave processes are instrumental in distributing the discrepancies in adjustment over the [meteorological fields] and in correcting these disrepancies in accordance with the laws of dynamics... Of course, this is a simplification of the complex nature of the dynamics of atmospheric processes; however, such a model reflects, in general outline, the continuous operation of the basic factors, and does it better, the smaller the &lt;span class="math"&gt;\(\Delta t\)&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Similarly, in &lt;a href="https://www.amazon.co.uk/d/Books/Numerical-Techniques-Atmospheric-Lecture-Computational-Science-Engineering/3642116396"&gt;Lauritzen &lt;em&gt;et al.&lt;/em&gt; (2010&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;On large scales, the dynamics of the atmosphere is approximately &lt;em&gt;balanced&lt;/em&gt;,
and it is important for numerical solutions to be approximately balanced in
the same sense... Fast &lt;em&gt;acoustic&lt;/em&gt; and &lt;em&gt;inertio-gravity waves&lt;/em&gt; [are]
responsible for the &lt;em&gt;adjustment&lt;/em&gt; towards balance.&lt;/p&gt;
&lt;p&gt;... The fast acoustic and inertio-gravity waves are observed to be
energetically weak... The weakness of these fast waves corresponds to 
certain kinds of approximate balance between other terms in the governing
equations... The atmosphere is continually being perturbed away from balance
by a variety of mechanisms, including flow over orography, convective
instability, and the nonlinear nature of the balanced dynamics. The
mechanism by which the atmosphere adjusts back towards balance involves the
radiation and ultimate dissipation of the fast acoustic and inertio-gravity
waves.&lt;/p&gt;
&lt;p&gt;The physical mechanism for acoustic waves involves the interaction of
compressibility and flow divergence: convergence of fluid locally leads to
an increase in density and hence pressure; the resulting pressure gradient
then drives fluid acceleration leading to new convergence displaced from the
original convergence.&lt;/p&gt;
&lt;p&gt;There are two basic physical mechanisms underlying inertio-gravity waves.
At the inertial end of the spectrum, i.e. shallow waves, an air parcel
displaced from its equilibrium position experiences a restoring force
provided by the Coriolis effect. At the gravity wave end of the spectrum,
i.e. deep waves, an air parcel displaced from its equilibrium position
has a density different from that of the reference profile at that height
and so experiences a restoring force due to buoyancy, i.e. the imbalance
between the gravitational force on the parcel and the vertical pressure
gradient force. In intermediate parts of the spectrum both mechanisms
operate to some degree.&lt;/p&gt;
&lt;p&gt;Making the [vertical balance] approximation in the governing equations
corresponds to filtering internal acoustic waves from the governing 
equations. More precisely, it corresponds to taking the limit in which
the propagation speed of internal acoustic waves becomes infinite, so
that the adjustment to balance is instantaneous. In the unapproximated
equations all information propagates at a finite speed; these are 
&lt;em&gt;hyperbolic&lt;/em&gt; equations. The balance approximation introduces a certain
non-locality.&lt;/p&gt;
&lt;p&gt;Similar ideas apply in the case of [horizontal] balance. The atmosphere
adjusts towards... balance through the radiation and dissipation of
inertio-gravity waves. The balance approximation filters inertio-gravity
waves from the governing equations, or, rather, corresponds to the limit
in which inertio-gravity waves propagate infinitely fast so that the
adjustment process is instantaneous.&lt;/p&gt;
&lt;p&gt;Even if we are solving the unapproximated (i.e. hyperbolic) governing
equations, balance and the implied nonlocality are important. However
the solution of elliptic equations requires quite different numerical techniques
from the solution of hyperbolic equations. Model developers therefore
face an important choice between inherently local explicit time stepping
techniques and inherently nonlocal implicit time stepping techniques.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content></entry><entry><title>Fredholm integral equations and the resolvent kernel</title><link href="http://0x7df.github.io/fredholm-integral-equations-and-the-resolvent-kernel.html" rel="alternate"></link><published>2017-02-12T12:40:00+00:00</published><updated>2017-02-12T12:40:00+00:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2017-02-12:/fredholm-integral-equations-and-the-resolvent-kernel.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Consider the &lt;em&gt;inhomogeneous Fredholm integral equation&lt;/em&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ H \psi(\mu) = \lambda \int_a^b \sigma(\mu, \mu') \psi(\mu') d\mu'
               + S(\mu) $$&lt;/div&gt;
&lt;p&gt;The unknown to be solved for is &lt;span class="math"&gt;\(\psi(\mu)\)&lt;/span&gt; where &lt;span class="math"&gt;\(a \le \mu \le b\)&lt;/span&gt; is the
independent variable, and the known function &lt;span class="math"&gt;\(\sigma(\mu, \mu')\)&lt;/span&gt; is known as
the &lt;em&gt;kernel&lt;/em&gt;. This is an &lt;em&gt;inhomogeneous&lt;/em&gt; equation because the known function
&lt;span class="math"&gt;\(S(\mu) \ne 0\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;It is a &lt;em&gt;Fredholm&lt;/em&gt; equation because the limits on the integral are constants;
if they were variables then the equation would be a &lt;em&gt;Volterra&lt;/em&gt; equation.&lt;/p&gt;
&lt;p&gt;If &lt;span class="math"&gt;\(H = 0\)&lt;/span&gt;, then the equation is of the &lt;em&gt;first kind&lt;/em&gt;; &lt;span class="math"&gt;\(H = 1\)&lt;/span&gt; gives rise to a
Fredholm equation of the &lt;em&gt;second kind&lt;/em&gt;, and otherwise the equation is of the
&lt;em&gt;third kind&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For Fredholm equations of the second kind, where &lt;span class="math"&gt;\(H = 1\)&lt;/span&gt;, we can look for
iterative solutions, i.e.:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = \psi_0(\mu) + \lambda\psi_1(\mu) + \lambda^2\psi_2(\mu)
             + ... + \lambda^n\psi_n(\mu) + ... $$&lt;/div&gt;
&lt;p&gt;When this is substituted into the original equation, we obtain:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi_0(\mu) = S(\mu) $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \psi_1(\mu) = \int_a^b \sigma(\mu, \mu') \psi_0(\mu') d\mu' $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \psi_2(\mu) = \int_a^b \sigma(\mu, \mu') \psi_1(\mu') d\mu' $$&lt;/div&gt;
&lt;div class="math"&gt;$$ ... $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \psi_n(\mu) = \int_a^b \sigma(\mu, \mu') \psi_{n-1}(\mu') d\mu' $$&lt;/div&gt;
&lt;p&gt;This can be carried on until the iterative solution converges to some
desired level of accuracy. The process is called &lt;em&gt;Neumann expansion&lt;/em&gt;. The
condition for the series solution to be convergent is:&lt;/p&gt;
&lt;div class="math"&gt;$$ |\lambda| \le \frac{1}{||\sigma||} $$&lt;/div&gt;
&lt;p&gt;where the square of the norm of the kernel is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$ ||\sigma||^2 = \int_a^b \int_a^b |\sigma(\mu, \mu')|^2 d\mu' d\mu $$&lt;/div&gt;
&lt;p&gt;(See M. Masujima, &lt;em&gt;Applied Mathematical Methods in Theoretical Physics&lt;/em&gt;, 2005.)&lt;/p&gt;
&lt;p&gt;An alternative approach is called &lt;em&gt;Fredholm theory&lt;/em&gt;. In Neumann iteration, we
repeatedly operate on &lt;span class="math"&gt;\(S(\mu)\)&lt;/span&gt; using the kernel &lt;span class="math"&gt;\(\sigma(\mu, \mu')\)&lt;/span&gt;, to obtain
a converged answer for &lt;span class="math"&gt;\(\psi(\mu)\)&lt;/span&gt;. One could ask instead: what &lt;em&gt;single&lt;/em&gt;
operation, involving the kernel, could be applied to &lt;span class="math"&gt;\(S(\mu)\)&lt;/span&gt; to obtain the
same value of &lt;span class="math"&gt;\(\psi(\mu)\)&lt;/span&gt;? That is, what &lt;span class="math"&gt;\(R(\mu, \mu')\)&lt;/span&gt; for which:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = \int_a^b R(\mu, \mu') S(\mu') d\mu' + S(\mu) $$&lt;/div&gt;
&lt;p&gt;The function &lt;span class="math"&gt;\(R(\mu, \mu')\)&lt;/span&gt; is called the &lt;em&gt;resolvent kernel&lt;/em&gt;, and it is easy to
find &lt;span class="math"&gt;\(\psi(\mu)\)&lt;/span&gt; once this known. The proof of the above equation is complex
(see J. Kondo, &lt;em&gt;Integral Equations&lt;/em&gt;, 1991), but the general method of obtaining
&lt;span class="math"&gt;\(R(\mu, \mu')\)&lt;/span&gt; is quite simple.&lt;/p&gt;
&lt;p&gt;We first define the &lt;em&gt;iterated kernels&lt;/em&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ \sigma_1(\mu, \mu') = \sigma(\mu, \mu') $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \sigma_2(\mu, \mu') = \int_a^b \sigma(\mu, \mu'')\sigma(\mu'', \mu') d\mu'' $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \sigma_3(\mu, \mu') = \int_a^b \int_a^b \sigma(\mu, \mu''') \sigma(\mu''', \mu'')\sigma(\mu'', \mu') d\mu'' d\mu''' $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \sigma_n(\mu, \mu') = \int_a^b d\mu^{(n)} \int_a^b d\mu^{(n-1)} ... \int_a^b
d\mu'' \sigma(\mu, \mu^{(n)}) \sigma(\mu^{(n)}, \mu^{(n-1)}) ... \sigma(\mu'', \mu')
$$&lt;/div&gt;
&lt;p&gt;(The notation &lt;span class="math"&gt;\(x^{(n)}\)&lt;/span&gt; indicates &lt;span class="math"&gt;\(x\)&lt;/span&gt; with &lt;span class="math"&gt;\(n\)&lt;/span&gt; primes). So we can re-write:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi_0(\mu) = S(\mu) $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \psi_1(\mu) = \int_a^b \sigma_1(\mu, \mu') S(\mu') d\mu' $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \psi_2(\mu) = \int_a^b \sigma_2(\mu, \mu') S(\mu') d\mu' $$&lt;/div&gt;
&lt;div class="math"&gt;$$ ... $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \psi_n(\mu) = \int_a^b \sigma_n(\mu, \mu') S(\mu') d\mu' $$&lt;/div&gt;
&lt;p&gt;and further:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = \psi_0(\mu) + \lambda\psi_1(\mu) + \lambda^2\psi_2(\mu) + ... +
\lambda^n\psi_n(\mu) + ... $$&lt;/div&gt;
&lt;p&gt;can be written:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = S(\mu) + \lambda \int_a^b \sigma_1(\mu, \mu') S(\mu') d\mu'
             + \lambda^2 \int_a^b \sigma_2(\mu, \mu') S(\mu') d\mu' + ...
             + \lambda^n \int_a^b \sigma_n(\mu, \mu') S(\mu') d\mu' + ... $$&lt;/div&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = S(\mu) + \sum_{n=1}^\infty \lambda^n \int_a^b \sigma_n(\mu,
\mu') S(\mu') d\mu' $$&lt;/div&gt;
&lt;p&gt;Bringing the summation inside the integral:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = S(\mu) + \int_a^b \sum_{n=1}^\infty \lambda^n \sigma_n(\mu,
\mu') S(\mu') d\mu' $$&lt;/div&gt;
&lt;p&gt;we can write:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = S(\mu) + \int_a^b R(\mu, \mu'; \lambda) S(\mu') d\mu' $$&lt;/div&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;div class="math"&gt;$$ R(\mu, \mu'; \lambda) = \sum_{n=1}^{\infty} \lambda^n \sigma_n(\mu, \mu') $$&lt;/div&gt;
&lt;p&gt;Like Neumann iteration, this is an iterative process, but it has two
significant advantages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Firstly, finding the resolvent kernel requires fewer iterations than Neumann
expansion.&lt;/li&gt;
&lt;li&gt;Secondly, finding the resolvent kernel requires knowledge of only the
kernel, &lt;span class="math"&gt;\(\sigma(\mu, \mu')\)&lt;/span&gt;, not the function &lt;span class="math"&gt;\(S(\mu)\)&lt;/span&gt;. This is a practical
advantage if the same kernel is applied in different circumstances involving
different functions &lt;span class="math"&gt;\(S(\mu)\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Example 1&lt;/h2&gt;
&lt;p&gt;As an example we can take the simplest possible equation of this form, for
which the kernel and the source term are constants:&lt;/p&gt;
&lt;div class="math"&gt;$$ \sigma(\mu, \mu') = \sigma_0 $$&lt;/div&gt;
&lt;div class="math"&gt;$$ S(\mu) = S_0 $$&lt;/div&gt;
&lt;p&gt;so that:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = S(\mu) + \lambda\int_a^b \sigma(\mu, \mu') \psi(\mu') d\mu' $$&lt;/div&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = S_0 + \lambda\sigma_0\int_a^b \psi(\mu')d\mu' $$&lt;/div&gt;
&lt;p&gt;This is easily solvable; because the right-hand side clearly has no dependence on &lt;span class="math"&gt;\(\mu\)&lt;/span&gt;, we can see that
&lt;span class="math"&gt;\(\psi(\mu)\)&lt;/span&gt; must be a constant &lt;span class="math"&gt;\(\psi_0\)&lt;/span&gt;, hence:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi_0 = \frac{S_0}{1 - \lambda\sigma_0(b-a)} $$&lt;/div&gt;
&lt;p&gt;Now using the resolvent kernel method to obtain the solution, we write:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = S(\mu) + \int_a^b R(\mu, \mu'; \lambda) S(\mu') d\mu' $$&lt;/div&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;div class="math"&gt;$$ R(\mu, \mu'; \lambda) = \sum_{n=1}^{\infty} \lambda^n \sigma_n(\mu, \mu') $$&lt;/div&gt;
&lt;p&gt;We have:&lt;/p&gt;
&lt;div class="math"&gt;$$\sigma_1(\mu, \mu') = \sigma_0 $$&lt;/div&gt;
&lt;div class="math"&gt;$$\sigma_2(\mu, \mu') = \sigma_0^2 (b - a) $$&lt;/div&gt;
&lt;div class="math"&gt;$$\sigma_3(\mu, \mu') = \sigma_0^3 (b - a)^2 $$&lt;/div&gt;
&lt;div class="math"&gt;$$ ... $$&lt;/div&gt;
&lt;div class="math"&gt;$$\sigma_n(\mu, \mu') = \sigma_0^n (b - a)^{n-1} $$&lt;/div&gt;
&lt;p&gt;hence:&lt;/p&gt;
&lt;div class="math"&gt;$$ R(\mu, \mu'; \lambda) = \sum_{n=1}^{\infty} \lambda^n \sigma_0^n (b -
a)^{n-1} $$&lt;/div&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = S_0 + \int_a^b \sum_{n=1}^{\infty} \lambda^n \sigma_0^n (b -
a)^{n-1} S(\mu') d\mu' $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \psi_0 = S_0 \left(1 + \sum_{n=1}^{\infty} \left[ \lambda \sigma_0 (b -  
a)\right]^n \right) $$&lt;/div&gt;
&lt;p&gt;This is equal to:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi_0 = S_0 \left(1 - \frac{\lambda\sigma_0(b - a)}{\lambda\sigma_0(b - a)
- 1} \right) $$&lt;/div&gt;
&lt;p&gt;as long as &lt;span class="math"&gt;\(|\lambda\sigma_0(b-a)| &amp;lt; 1\)&lt;/span&gt;, hence:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi_0 = \frac{S_0}{1 - \lambda\sigma_0(b - a)} $$&lt;/div&gt;
&lt;p&gt;which is the same solution as earlier, obtained by solving directly.&lt;/p&gt;
&lt;h2&gt;Example 2&lt;/h2&gt;
&lt;p&gt;Masujima (2005) gives the following example, with &lt;span class="math"&gt;\(\sigma(\mu, \mu') = e^{\mu -
\mu'}\)&lt;/span&gt;, &lt;span class="math"&gt;\(a = 0\)&lt;/span&gt; and &lt;span class="math"&gt;\(b = 1\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = S(\mu) + \lambda\int_0^1 e^{\mu-\mu'}\psi(\mu')d\mu' $$&lt;/div&gt;
&lt;p&gt;The iterated kernels simplify to:&lt;/p&gt;
&lt;div class="math"&gt;$$ \sigma_n(\mu, \mu') = e^{\mu - \mu'} $$&lt;/div&gt;
&lt;p&gt;for all &lt;span class="math"&gt;\(n\)&lt;/span&gt;, and hence the resolvent kernel is:&lt;/p&gt;
&lt;div class="math"&gt;$$ R(\mu, \mu'; \lambda) = \sum_{n=1}^{\infty} \lambda^n e^{\mu-\mu'} $$&lt;/div&gt;
&lt;p&gt;which is:&lt;/p&gt;
&lt;div class="math"&gt;$$ R(\mu, \mu'; \lambda) = \frac{\lambda}{1 - \lambda} e^{\mu - \mu'} $$&lt;/div&gt;
&lt;p&gt;as long as &lt;span class="math"&gt;\(|\lambda| \lt 1\)&lt;/span&gt;; in which case:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = S(\mu) + \frac{\lambda}{1 - \lambda} \int_0^1 e^{\mu - \mu'}
S(\mu') d\mu' $$&lt;/div&gt;
&lt;h2&gt;Example 3&lt;/h2&gt;
&lt;p&gt;We now consider the example where &lt;span class="math"&gt;\(\sigma(\mu, \mu') = \mu\mu'\)&lt;/span&gt; and &lt;span class="math"&gt;\(a = 0\)&lt;/span&gt; and
&lt;span class="math"&gt;\(b = 1\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = S(\mu) + \lambda \int_0^1 \mu \mu' \psi(\mu') d\mu' $$&lt;/div&gt;
&lt;p&gt;The iterated kernels are:&lt;/p&gt;
&lt;div class="math"&gt;$$ \sigma_1(\mu, \mu') = \mu\mu' $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \sigma_2(\mu, \mu') = \int_0^1 \mu\mu''\mu''\mu' d\mu'' = \mu\mu'/3 $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \sigma_3(\mu, \mu') = \int_0^1 \int_0^1 \mu\mu'''\mu'''\mu''\mu''\mu'
d\mu''d\mu''' = \mu \int_0^1 \mu'''^2 \int_0^1 \mu''^2 d\mu'' d\mu''' =
\mu\mu'/9 $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \sigma_n(\mu,\mu') = \mu\mu'/3^{n-1} $$&lt;/div&gt;
&lt;p&gt;Hence the resolvent kernel is:&lt;/p&gt;
&lt;div class="math"&gt;$$ R(\mu, \mu'; \lambda) = \sum_{n=1}^\infty \lambda^n \mu\mu' / 3^{n-1} $$&lt;/div&gt;
&lt;div class="math"&gt;$$ R(\mu, \mu'; \lambda) = \frac{\mu\mu'\lambda}{1 - \lambda/3} $$&lt;/div&gt;
&lt;p&gt;The solution is therefore:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = S(\mu) + \frac{\lambda}{1 - \lambda/3} \mu \int_0^1 \mu' S(\mu')
d\mu' $$&lt;/div&gt;
&lt;p&gt;Consider three cases.&lt;/p&gt;
&lt;h3&gt;Case 1: &lt;span class="math"&gt;\(S(\mu) = S_0\)&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;For constant source:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = S_0 + \frac{\lambda}{1 - \lambda/3} \frac{\mu S_0}{2} $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = S_0 \left( 1 + \frac{\lambda\mu}{2[1 - \lambda/3]}\right) $$&lt;/div&gt;
&lt;p&gt;For &lt;span class="math"&gt;\(\lambda = 3/4\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$\psi(\mu) = S_0 \left(1 + \frac{\mu}{2}\right) $$&lt;/div&gt;
&lt;p&gt;For &lt;span class="math"&gt;\(\lambda = 1\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = S_0 \left(1 + \frac{3\mu}{4}\right) $$&lt;/div&gt;
&lt;h3&gt;Case 2: &lt;span class="math"&gt;\(S(\mu) = \mu\)&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;In this case:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = \mu + \frac{\lambda}{1 - \lambda/3} \mu \int_0^1 \mu' \mu' d\mu' $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = \mu + \frac{\lambda}{1 - \lambda/3} \mu \frac{1}{3} $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = \frac{3\mu}{3 - \lambda} $$&lt;/div&gt;
&lt;p&gt;For &lt;span class="math"&gt;\(\lambda = 1\)&lt;/span&gt;&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = \frac{3\mu}{2} $$&lt;/div&gt;
&lt;h3&gt;Case 3: &lt;span class="math"&gt;\(S(\mu) = 3\mu^2/2\)&lt;/span&gt;&lt;/h3&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = \frac{3\mu^2}{2} + \frac{3\lambda}{2[1 - \lambda/3]} \mu \int_0^1 \mu'^3 d\mu' $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = \frac{3\mu^2}{2} + \frac{3\lambda\mu}{8[1 - \lambda/3]} $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = \frac{3}{2} \left( \mu^2 + \frac{\lambda\mu}{4[1 - \lambda/3]}
\right) $$&lt;/div&gt;
&lt;p&gt;For &lt;span class="math"&gt;\(\lambda = 1\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ \psi(\mu) = \frac{3}{2}\left(\mu^2  + \frac{3\mu}{8} \right) $$&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="mathematics"></category></entry><entry><title>500 hPa geopotential height anomaly correlation</title><link href="http://0x7df.github.io/500-hpa-geopotential-height-anomaly-correlation.html" rel="alternate"></link><published>2017-02-11T20:25:00+00:00</published><updated>2017-02-11T20:25:00+00:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2017-02-11:/500-hpa-geopotential-height-anomaly-correlation.html</id><summary type="html"></summary><content type="html">&lt;p&gt;The 500 hPa &lt;a href="http://0x7df.github.io/geopotential.html"&gt;geopotential&lt;/a&gt; height anomaly
correlation is a key indicator of the skill of numerical weather prediction.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.e-education.psu.edu/worldofweather/node/2031"&gt;Patterns of 500 hPa heights reveal short- and long-wave troughs and ridges.&lt;/a&gt; Surface low
pressure tends to develop (or strengthen) to the east of 500 hPa short-wave
troughs, while surface high pressure tends to form (or strengthen) to the
east of 500 hPa short-wave ridges. &lt;/p&gt;
&lt;p&gt;The correlation is between the &lt;em&gt;observed&lt;/em&gt; and &lt;em&gt;forecast&lt;/em&gt; 500 hPa geopotential
height anomaly. A higher value is better, indicating a forecast that was closer
to the observed situation.&lt;/p&gt;
&lt;p&gt;A correlation of 0.6 is considered to represent a useful forecast. For the
&lt;a href="https://www.ecmwf.int"&gt;ECMWF&lt;/a&gt; model, forecasts fell below 0.6 at about 5.5
days in 1980, whereas by 2010 they did not fall below 0.6 until about 8.5 days
- this represents an improvement in skill of one day per decade. The forecast
for which the value falls to 0.8 is approaching 6.5 days.&lt;/p&gt;</content><category term="meteorology"></category></entry><entry><title>Setting up Pelican</title><link href="http://0x7df.github.io/setting-up-pelican.html" rel="alternate"></link><published>2016-09-26T17:52:00+01:00</published><updated>2016-09-26T17:52:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2016-09-26:/setting-up-pelican.html</id><summary type="html"></summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install pelican and its prerequisites:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install markdown
pip install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone the "nest" theme somewhere:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/Perm/Pelican
git clone https://github.com/molivier/nest.git
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the "nest" theme:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-themes --install ~/Perm/Pelican/nest --verbose
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the "render_math" plugin and its prerequisites:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install typogrify
pip install beautifulsoup4
cd ~/Perm/Pelican
git clone --recursive https://github.com/getpelican/pelican-plugins
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the location of the "render_math" plugin to the settings file. Ensure the
   following lines are in the "pelicanconf.py" file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PLUGIN_PATHS = [&amp;quot;/full/path/to/Perm/Pelican/pelican-plugins&amp;quot;]
PLUGINS = [&amp;quot;render_math&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Note that on a Mac OS X system, "~/Perm/Pelican..." didn't work.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone the site repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/Code
git clone https://github.com/0x7df/0x7df.github.io.git
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter the repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd 0x7df.github.io
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Switch to the "source" branch (never use the "master" branch, as it is
   purely derivative and gets over-written whenever the static site is built
   from source):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout source
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build locally:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make html
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;View local build:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd output
python -m SimpleHTTPServer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and go to &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install ghp-import:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/davisp/ghp-import.git
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Publish to GitHub:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make github
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</content><category term="linux"></category><category term="markdown"></category><category term="pelican"></category><category term="programming"></category><category term="publishing"></category><category term="python"></category></entry><entry><title>Connecting Twitter and Pocket using Python</title><link href="http://0x7df.github.io/connecting-twitter-and-pocket-using-python.html" rel="alternate"></link><published>2015-10-23T10:06:00+01:00</published><updated>2015-10-23T10:06:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-10-23:/connecting-twitter-and-pocket-using-python.html</id><summary type="html"></summary><content type="html">&lt;p&gt;&lt;a href="http://adilmoujahid.com/posts/2014/07/twitter-analytics/"&gt;This&lt;/a&gt; blog post gives an intro to connecting to the Twitter Streaming
API using the &lt;a href="https://python.org"&gt;Python&lt;/a&gt; library &lt;a href="http://tweepy.readthedocs.org"&gt;Tweepy&lt;/a&gt;. There are two Python routines:
one to connect to Twitter and download relevant tweets to a file, and a
second to post-process the file using &lt;a href="http://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; and create some graphs
using &lt;a href="http://matplotlib.org"&gt;Matplotlib&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In particular the scripts use &lt;a href="https://en.wikipedia.org/wiki/Regular_expression"&gt;regular expressions&lt;/a&gt; to identify tweets
that contain links, where those tweets have previously been filtered by
keywords such as 'python', 'javascript', 'tutorial', etc.&lt;/p&gt;
&lt;p&gt;I liked the idea of extracting these links automatically, and thought about
going a step further and collecting those links in &lt;a href="http://getpocket.com"&gt;Pocket&lt;/a&gt;, using the
&lt;a href="http://getpocket.com/developer/"&gt;Pocket API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;None of this required the tweets to be written to a file first, so I adapted
the scripts to do everything in real time rather than post-processing, and
Pandas wasn't required.&lt;/p&gt;
&lt;p&gt;The script needs to connect to the Pocket account using previously retrieved
credentials. It uses &lt;a href="https://github.com/tapanpandita/pocket"&gt;pocket&lt;/a&gt;, another Python library for
connecting to the Pocket API; an example of its use is &lt;a href="https://w.wol.ph/2013/09/18/batch-adding-data-to-pocket/"&gt;here&lt;/a&gt;.
My code for connecting to Pocket looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pocket&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pocket_api_key.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fileHandle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pckt_consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pckt_access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect_uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fileHandle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Pocket authentication&lt;/span&gt;
    &lt;span class="n"&gt;pocket_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pckt_consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pckt_access_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, I connect to the Twitter Streaming API using 
the &lt;code&gt;filter&lt;/code&gt; method, which returns only tweets that contain certain pre-defined
keywords. This is straight from &lt;a href="http://adilmoujahid.com/posts/2014/07/twitter-analytics/"&gt;the original post&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tweepy.streaming&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StreamListener&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OAuthHandler&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Stream&lt;/span&gt;

&lt;span class="c1"&gt;# Read the Twitter API key data from a file (not in the repository)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;twitter_api_key.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fileHandle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;access_token_secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fileHandle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

&lt;span class="c1"&gt;# Set the keywords to filter the Twitter stream for&lt;/span&gt;
&lt;span class="n"&gt;keywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;javascript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fortran&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bash&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;linux&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;api&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;git&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;vim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;julia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# This is a basic listener that prints received tweets to stdout&lt;/span&gt;
&lt;span class="c1"&gt;# Over-ride the tweepy.Stream listener to provide methods&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StdOutListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StreamListener&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Create stream listener class for Twitter Streaming API.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Process individual tweet.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;myrespond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;on_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Handle error from Twitter Streaming API.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;420&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="c1"&gt;# Handle Twitter authentication and connection to Twitter Streaming API&lt;/span&gt;
        &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StdOutListener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OAuthHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;access_token_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Filter Twitter stream according to keywords&lt;/span&gt;
        &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Clearly the error-handling needs finishing.) Each tweet is processed by the
function &lt;code&gt;myrespond()&lt;/code&gt;, which looks for tweets that also
contain the word 'tutorial', and extracts the link if there is one.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getdata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Get dictionary value given key.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;word_in_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Search for work in text string.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Extract link from tweet or return null string.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https?:..[^\s&amp;lt;&amp;gt;&amp;quot;]+|www\.[^\s&amp;lt;&amp;gt;&amp;quot;]+&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myrespond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Respond to relevant tweet.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lang&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getdata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lang&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getdata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extract_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;word_in_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tutorial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;pocket_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-----------------------------------------------------------&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;myrespond()&lt;/code&gt; function uses the &lt;code&gt;json&lt;/code&gt; library to turn the JSON-format data
containing the tweet into a Python dictionary, then another function &lt;code&gt;getdata&lt;/code&gt;
to access individual data items; if the language is English, then the text of
the tweet is extracted and the &lt;code&gt;re&lt;/code&gt; library used to return the link. Finally,
the Pocket API is used to add the link to Pocket.&lt;/p&gt;
&lt;p&gt;There's probably some sophistication that could be added to this to ensure
better quality links are identified; I could, for example, use my own tweets
and blog posts as a reference corpus, and test the similarity of tweets
to the text in my corpus; and then only add links that have a similarity score
above some threshold.&lt;/p&gt;
&lt;p&gt;The full code is on &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;, at
&lt;a href="https://github.com/0x7df/twitter2pocket"&gt;https://github.com/0x7df/twitter2pocket&lt;/a&gt;.&lt;/p&gt;</content><category term="python"></category><category term="api"></category><category term="twitter"></category><category term="pocket"></category></entry><entry><title>Static site generation, Pelican, and GitHub hosting</title><link href="http://0x7df.github.io/static-site-generation.html" rel="alternate"></link><published>2015-10-03T20:06:00+01:00</published><updated>2015-10-03T20:06:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-10-03:/static-site-generation.html</id><summary type="html">&lt;p&gt;Comparison of static site generators&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post discusses moving setting up and using a static site generator,
&lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;, and moving existing posts from &lt;a href="http://www.wordpress.com"&gt;Wordpress&lt;/a&gt; to Pelican.&lt;/p&gt;
&lt;h2&gt;Comparing and choosing a generator&lt;/h2&gt;
&lt;p&gt;Many options are available for static site generation, with
&lt;a href="http://octopress.org"&gt;Octopress&lt;/a&gt; being a popular choice. I was interested in a Python-
based one, &lt;a href="https://jakevdp.github.io/blog/2013/05/07/migrating-from-octopress-to-pelican"&gt;for reasons that have been discussed elsewhere&lt;/a&gt;, and the
usual options that come up are &lt;a href="http://hyde.github.io"&gt;Hyde&lt;/a&gt;, &lt;a href="https://getnikola.com"&gt;Nikola&lt;/a&gt;, and
Pelican. &lt;a href="https://jakevdp.github.io/blog/2013/05/07/migrating-from-octopress-to-pelican"&gt;The article cited above&lt;/a&gt; suggested Hyde wasn't
well documented, so I skipped that altogether in the interests of time. The
Nikola documentation looked great, so I started with that; however, I spent
quite a while trying to install it, eventually with no luck. I needed to
install some prerequisites, the installation took a long time, and I ended up
with some missing packages. I'm sure another hour of Googling
&lt;a href="http://stackoverflow.com"&gt;StackOverflow&lt;/a&gt; and messing would have sorted it, but I lost
interest and moved on to Pelican; this &lt;a href="http://docs.getpelican.com/en/stable/quickstart.html"&gt;installed out of the box in a few
seconds&lt;/a&gt;, and I was away.&lt;/p&gt;
&lt;h2&gt;Importing from Wordpress&lt;/h2&gt;
&lt;p&gt;Importing from Wordpress just involves exporting the &lt;a href="http://0x7df.wordpress.com"&gt;original blog&lt;/a&gt; as
an XML file, which can be done from the "WP Admin" menu under "Tools". Pelican
provides a command for importing from this file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;wpfile&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;wordpress&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;--wpfile&lt;/code&gt; flag specifies that the source is Wordpress (various
alternatives are available), the &lt;code&gt;-m&lt;/code&gt; option specified that the output should
be Markdown (as opposed to reStructured Text), and &lt;code&gt;--dir-page&lt;/code&gt; tells Pelican
to include the "Pages" from the Wordpress blog as well as the blog articles,
and put them in a &lt;code&gt;pages&lt;/code&gt; directory.&lt;/p&gt;
&lt;h2&gt;Maths pain&lt;/h2&gt;
&lt;p&gt;The original Wordpress articles that I imported contained a lot of maths, and
there was a significant amount of pain involved in converting the syntax used
by Wordpress to the syntax required by Pelican. in fact, Pelican doesn't
natively support maths, so a plugin is required: for this I used
&lt;a href="https://github.com/barrysteyn/pelican_plugin-render_math"&gt;render-math&lt;/a&gt;. As per the docs, for this I needed to install
&lt;a href="https://github.com/mintchaos/typogrify"&gt;Typogrify&lt;/a&gt; first, then add the following to the &lt;code&gt;pelicanconf.py&lt;/code&gt;
settings file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PLUGIN_PATHS = [&amp;quot;..&amp;quot;]
PLUGINS = [&amp;quot;pelican_plugin-render_math&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to point Pelican at the location where I cloned the plugin.&lt;/p&gt;
&lt;p&gt;The text wrangling that was required to convert the Wordpress-syntax maths
delimiters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\$latex ...maths... \$latex
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to those required for Pelican (i.e.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$$ ...maths... $$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for displayed equations and:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ...math...$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for in-line equations), was both annoying and unnecessary in theory (since
both platforms are using LaTeX, dammit), and is the subject of &lt;a href="http://0x7df.github.io/grep-regex-and-sed-inline-replace-on-multiple-files.html"&gt;a different
post&lt;/a&gt;. Once
done, I could move on to themes.&lt;/p&gt;
&lt;h2&gt;Pelican themes&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://pelicanthemes.com/"&gt;This website&lt;/a&gt; shows examples of available themes, from
which I chose the &lt;a href="https://github.com/molivier/nest"&gt;Nest&lt;/a&gt; theme; I cloned this directly into the Pelican
install directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /usr/local/lib/python2.7/dist-packages/pelican/themes/
sudo git clone https://github.com/molivier/nest.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(The &lt;code&gt;pelican-themes -lv&lt;/code&gt; command can be used to determine the path to the
Pelican installation directory.)&lt;/p&gt;
&lt;p&gt;(Afterwards I realised a &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt; repository &lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt; containing
a large number of themes is available, making it a lot easier to switch while
looking for a good theme.)&lt;/p&gt;
&lt;h2&gt;Deployment to GitHub&lt;/h2&gt;
&lt;p&gt;Although I have a domain - &lt;a href="http://0x7df.io"&gt;0x7df.io&lt;/a&gt; - and a website hosted
on &lt;a href="http://aws.amazon.com/"&gt;Amazon Web Services&lt;/a&gt;, I wanted both to keep this separate to begin
with, and try out hosting on &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are two ways to manage a website/blog on GitHub pages. The first is to
create a special branch, which has to be called &lt;code&gt;gh-pages&lt;/code&gt; inside a repository;
the web documents committed on that branch then become available at:
&lt;code&gt;http://username.github.io/project/&lt;/code&gt;. This is ideal for creating
project-specific sites, like documentation. The second method, which is what I
used, is to create a special repository, called &lt;code&gt;username.github.io&lt;/code&gt; which
contains the web pages. These are then available at
&lt;code&gt;http://username.github.io/&lt;/code&gt;; they're considered the general user or
organisation web pages, as opposed to being specific to any one project. In
this case, the data doesn't need to be on the &lt;code&gt;gh-pages&lt;/code&gt; branch, but can be on
the more usual branch &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I used the &lt;a href="https://github.com/davisp/ghp-import/"&gt;ghp-import&lt;/a&gt; tool to do the uploading - this is used by the
Pelican &lt;code&gt;Makefile&lt;/code&gt; and is recommended &lt;a href="http://martinbrochhaus.com/pelican2.html"&gt;elsewhere&lt;/a&gt;. I installed it
with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;even though this isn't documented. As suggested &lt;a href="http://martinbrochhaus.com/pelican2.html#comment-1819417669"&gt;here&lt;/a&gt;, I added all
the content and tools to a
different branch called &lt;code&gt;source&lt;/code&gt;, but it can be anything - to keep it
separate from the output, which I want to commit to the &lt;code&gt;master&lt;/code&gt; branch. After
making changes to the content, running &lt;code&gt;make html&lt;/code&gt; to re-build, checking on a
local development server that runs in the background (initiated by &lt;code&gt;python -m
pelican.server &amp;amp;&lt;/code&gt; inside the &lt;code&gt;output&lt;/code&gt; directory), then committing to the
&lt;code&gt;source&lt;/code&gt; branch of my repository, I can just run &lt;code&gt;make github&lt;/code&gt; to call
&lt;code&gt;ghp-import&lt;/code&gt;. This commits the changes to the built website (in the &lt;code&gt;output&lt;/code&gt;
directory) to branch &lt;code&gt;master&lt;/code&gt;, and pushes the modified &lt;code&gt;master&lt;/code&gt; branch to the
repository on GitHub. With this workflow there is never a need to explicitly
switch to &lt;code&gt;master&lt;/code&gt; and do any commits - this is all handled by &lt;code&gt;ghp-import&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you're using the project-specific &lt;code&gt;gh-pages&lt;/code&gt; branch, the &lt;code&gt;ghp-import&lt;/code&gt; will
still do the job. It defaults actually to committing the built website to this
branch, and in my workflow requires the &lt;code&gt;-b master&lt;/code&gt; switch to tell it to commit
to &lt;code&gt;master&lt;/code&gt; instead. Note that the &lt;code&gt;-p&lt;/code&gt; flag to &lt;code&gt;ghp-import&lt;/code&gt; will handle the
push to GitHub, although in the Pelican Makefile this flag isn't used and the
push is a separate command.&lt;/p&gt;
&lt;p&gt;Either way, it's worth being very clear that &lt;code&gt;ghp-import&lt;/code&gt; treats the branch it
commits to - &lt;code&gt;gh-pages&lt;/code&gt; by default or whatever branch you specify if the &lt;code&gt;-b&lt;/code&gt;
flag is supplied - as &lt;em&gt;totally derivative&lt;/em&gt;. Assume it blows away whatever is
already there and replaces it with the new content. So you never manually
modify anything on that branch; keep all your content, configuration files,
tools, and anything else you care about, on a different branch, and keep the
destination branch for &lt;code&gt;ghp-import&lt;/code&gt; clean.&lt;/p&gt;</content><category term="pelican"></category><category term="publishing"></category><category term="blog"></category><category term="python"></category><category term="github"></category><category term="latex"></category></entry><entry><title>Remembering Bayes's formula</title><link href="http://0x7df.github.io/remembering-bayess-formula.html" rel="alternate"></link><published>2015-10-03T00:00:00+01:00</published><updated>2015-10-03T00:00:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-10-03:/remembering-bayess-formula.html</id><summary type="html">&lt;p&gt;An easier way to remember Bayes's formula&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's probably just me, but I could never remember Bayes's formula:&lt;/p&gt;
&lt;div class="math"&gt;$$ P(A|B) = \frac{P(B|A) P(A)}{P(B)} $$&lt;/div&gt;
&lt;p&gt;as-is. I don't use it very often, so I didn't have it at my fingertips.
However, I found it easy to remember:&lt;/p&gt;
&lt;div class="math"&gt;$$ P(A,B) = P(A|B) P(B) $$&lt;/div&gt;
&lt;p&gt;which is the more general formula that says that the probability of &lt;span class="math"&gt;\(A\)&lt;/span&gt; &lt;em&gt;and&lt;/em&gt;
&lt;span class="math"&gt;\(B\)&lt;/span&gt; is the probability of &lt;span class="math"&gt;\(A\)&lt;/span&gt; given &lt;span class="math"&gt;\(B\)&lt;/span&gt; multiplied by the probability of just &lt;span class="math"&gt;\(B\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This sticks. So:&lt;/p&gt;
&lt;div class="math"&gt;$$ P(A,B) = P(A|B) P(B) $$&lt;/div&gt;
&lt;div class="math"&gt;$$ P(A,B) = P(B|A) P(A) $$&lt;/div&gt;
&lt;p&gt;Therefore:&lt;/p&gt;
&lt;div class="math"&gt;$$ P(A|B)P(B) = P(B|A)P(A) $$&lt;/div&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;div class="math"&gt;$$ P(A|B) = \frac{P(B|A)P(A)}{P(B)} $$&lt;/div&gt;
&lt;p&gt;which is Bayes's formula.&lt;/p&gt;
&lt;p&gt;The other trick I use to help remember what it all means is, once I've got the
formula, not to use &lt;span class="math"&gt;\(A\)&lt;/span&gt; and &lt;span class="math"&gt;\(B\)&lt;/span&gt;
as the symbols representing events, but instead to use &lt;span class="math"&gt;\(C\)&lt;/span&gt; and &lt;span class="math"&gt;\(E\)&lt;/span&gt; for "cause"
and "effect":&lt;/p&gt;
&lt;div class="math"&gt;$$ P(C|E) = \frac{P(E|C)P(C)}{P(E)} $$&lt;/div&gt;
&lt;p&gt;You could use &lt;span class="math"&gt;\(T\)&lt;/span&gt; and &lt;span class="math"&gt;\(O\)&lt;/span&gt;, for "theory" and "observation", or whatever works
for you.&lt;/p&gt;
&lt;p&gt;Then it's easier to know, given some situation, which numbers to put where. To
illustrate this, we'll use a 
classic example from &lt;a href="https://faculty.washington.edu/jmiyamot/p548/eddydm%20prob%20reas%20i%20clin%20medicine.pdf"&gt;Eddy, D. M. (1982), &lt;em&gt;Probabilistic reasoning in
clinical medicine: problems and opportunities&lt;/em&gt;&lt;/a&gt;, in &lt;a href="https://books.google.co.uk/books?id=MScNAAAAQBAJ"&gt;Kahneman &lt;em&gt;et al.&lt;/em&gt;
(Eds.),
&lt;em&gt;Judgement under uncertainty: heuristics and biases&lt;/em&gt;, Cambridge University
Press&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;In this example, the following problem concerning diagnosing breast cancer
using a mammogram is set:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Suppose a physician has had experience with a number of women who, in all
important aspects... are similar to this particular patient. And suppose the
physician knows from this experience that the frequency of cancer in this
group is, say, 1 out of 100... Now let the physician order a mammogram and
receive a report that... the lesion is malignant.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Values of 80% for true positives and 10% for false positives are reported for
this particular kind of diagnostic test (or thereabouts).&lt;/p&gt;
&lt;p&gt;Now we can distinguish between cause and effect; we let "the patient has
cancer" be the cause, &lt;span class="math"&gt;\(C\)&lt;/span&gt;, and "the test is positive" be the effect, &lt;span class="math"&gt;\(E\)&lt;/span&gt;.
The question posed is what is the probability that the patient has cancer given
that the test is reported as positive: i.e. what is &lt;span class="math"&gt;\(P(C|E)\)&lt;/span&gt;. Recall that:&lt;/p&gt;
&lt;div class="math"&gt;$$ P(C|E) = \frac{P(E|C)P(C)}{P(E)} $$&lt;/div&gt;
&lt;p&gt;We have to insert numbers in for the other values, to solve the problem. The
first is &lt;span class="math"&gt;\(P(E|C)\)&lt;/span&gt;: the probability of the effect (a positive test) given that
the cause is true (the patient has cancer). This is simply the true positive
rate of the test, 0.8. Next, &lt;span class="math"&gt;\(P(C)\)&lt;/span&gt; is the probability that the patient has
cancer; i.e. the base rate for the reference group. The doctor has already
judged this to be 0.01 (1 in 100 for women similar to this one in all important
aspects). The final number we need is &lt;span class="math"&gt;\(P(E)\)&lt;/span&gt;; i.e. the probability of this
effect occurring. This isn't a conditional probability, but the probability
irrespective of the cause. We can work this out by summing the conditional
probabilities of the effect over all possible causes.&lt;/p&gt;
&lt;p&gt;Generally then:&lt;/p&gt;
&lt;div class="math"&gt;$$ P(E) = \sum_c P(E|c) P(c) $$&lt;/div&gt;
&lt;p&gt;where we have used the symbol &lt;span class="math"&gt;\(c\)&lt;/span&gt; to represent causes. When &lt;span class="math"&gt;\(c = C\)&lt;/span&gt;, the cause
is that the patient has cancer; all possible &lt;span class="math"&gt;\(c \ne C\)&lt;/span&gt; represent other causes.
In this case we don't have to itemise all the possibilites, because no matter
how many other reasons there are for the test coming up true, they are
accounted for in the false positive rate.&lt;/p&gt;
&lt;p&gt;Hence:&lt;/p&gt;
&lt;div class="math"&gt;$$ P(E) = P(E|c{=}C) P(c{=}C) + P(E|c{\ne}C) P(c{\ne}C) $$&lt;/div&gt;
&lt;p&gt;The first two quantities on the right hand side have been identified already:
0.8 and 0.01. The probability of a positive test arising when no cancer is
present is 0.1 (false positive rate of 10%), and the probability of no cancer
is simply 1 - 0.01 = 0.99. Hence, and finally:&lt;/p&gt;
&lt;div class="math"&gt;$$ P(C|E) = \frac{(0.8)(0.01)}{(0.8)(0.01) + (0.1)(0.99)} $$&lt;/div&gt;
&lt;p&gt;which gives an answer of abut 0.075, or 7.5% probability that the patient
actually has cancer given a positive test. The main reason this is so
surprisingly low is
the low relative incidence of cancer in the first place. If the rate of cancer
in this group, the formula would be:&lt;/p&gt;
&lt;div class="math"&gt;$$ P(C|E) = \frac{(0.8)(0.5)}{(0.8)(0.5) + (0.1)(0.5)} $$&lt;/div&gt;
&lt;p&gt;giving nearly a 90% chance of the patient having cancer, given exactly the same
test. This illustrates a key point - the usefulness of a test doesn't
depend on only the intrinsic properties of the test, like its accuracy (true
positive rate) and its false alarm rate, but also on how common the phenomenon
being tested for is. Two tests with the same accuracy and false alarm rate,
that test for, say, lung cancer and asthma, cannot be treated with the same
degree of confidence given the different underlying prevalences of those two
conditions. Interestingly, this also means the same test for the same disease
might need to be treated with differing confidence in different
populations; cystic fibrosis is much commoner in European countries than in
Asia, so doctors in those locations would have different levels of confidence
in the test.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="bayes"></category><category term="mathematics"></category><category term="probabililty"></category><category term="statistics"></category></entry><entry><title>Virtual Temperature</title><link href="http://0x7df.github.io/virtual-temperature.html" rel="alternate"></link><published>2015-08-31T22:02:00+01:00</published><updated>2015-08-31T22:02:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-08-31:/virtual-temperature.html</id><summary type="html">&lt;h2&gt;Equation of state for dry air&lt;/h2&gt;
&lt;p&gt;The ideal-gas equation of state is:&lt;/p&gt;
&lt;div class="math"&gt;$$ p = \rho R T $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\( R\)&lt;/span&gt; is the individual gas constant for the
gas in question, and:&lt;/p&gt;
&lt;div class="math"&gt;$$ R = \frac{nR^*}{m} = \frac{R^*}{M} $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\( R^*\)&lt;/span&gt; is the universal gas constant (&lt;span class="math"&gt;\( 8.31~
\mathrm{J/mol.K}\)&lt;/span&gt;) and …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Equation of state for dry air&lt;/h2&gt;
&lt;p&gt;The ideal-gas equation of state is:&lt;/p&gt;
&lt;div class="math"&gt;$$ p = \rho R T $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\( R\)&lt;/span&gt; is the individual gas constant for the
gas in question, and:&lt;/p&gt;
&lt;div class="math"&gt;$$ R = \frac{nR^*}{m} = \frac{R^*}{M} $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\( R^*\)&lt;/span&gt; is the universal gas constant (&lt;span class="math"&gt;\( 8.31~
\mathrm{J/mol.K}\)&lt;/span&gt;) and &lt;span class="math"&gt;\( n, m\)&lt;/span&gt; are the number of moles and the
mass of the sample of gas, respectively; and &lt;span class="math"&gt;\( M = m/n\)&lt;/span&gt;
is the molecular mass of the gas.&lt;/p&gt;
&lt;p&gt;Dry air is typically assumed to be a perfect gas, with an individual gas
constant of &lt;span class="math"&gt;\( 287~\mathrm{J/kg.K}\)&lt;/span&gt;  or &lt;span class="math"&gt;\( 2.87 \times 10^6~\mathrm{cm^2/s^2.K}\)&lt;/span&gt;.&lt;/p&gt;
&lt;h2&gt;Moist air and virtual temperature&lt;/h2&gt;
&lt;p&gt;Water vapour is also assumed to be a perfect gas, with an individual gas
constant of &lt;span class="math"&gt;\( 461.5~\mathrm{J/kg.K}\)&lt;/span&gt;. The ratio of &lt;span class="math"&gt;\( R / R_v\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ \sigma = \frac{R}{R_v} = \frac{M_v}{M} = 0.622 $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\( R, M\)&lt;/span&gt; are the gas constant and molecular mass
of dry air, and &lt;span class="math"&gt;\( R_v, M_v\)&lt;/span&gt; of water vapour.&lt;/p&gt;
&lt;p&gt;Moist air is a mixture of dry air and water vapour. To determine the
individual gas constant of moist air, consisting of some mixture of dry
air and water vapour, we first write the equation of state for water
vapour:&lt;/p&gt;
&lt;div class="math"&gt;$$ e = \rho_v R_v T $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\( e\)&lt;/span&gt; is the water vapour pressure and &lt;span class="math"&gt;\( \rho_v\)&lt;/span&gt; is the density of water
vapour. The pressure of the moist air is the sum of the partial pressures of
the dry air and the water vapour:&lt;/p&gt;
&lt;div class="math"&gt;$$ p_m = p + e = \rho R T + \rho_v R_v T $$&lt;/div&gt;
&lt;div class="math"&gt;$$ p_m = \rho R T + \rho_v \frac{R}{\sigma} T $$&lt;/div&gt;
&lt;div class="math"&gt;$$ p_m = RT\left(\rho + \frac{\rho_v}{\sigma}\right) $$&lt;/div&gt;
&lt;div class="math"&gt;$$ p_m = RT\frac{1}{V}\left(m + \frac{m_v}{\sigma}\right) $$&lt;/div&gt;
&lt;div class="math"&gt;$$ p_m = RT \frac{\rho_m}{m + m_v}\left(m +
\frac{m_v}{\sigma}\right) $$&lt;/div&gt;
&lt;p&gt;This allows us to introduce the &lt;em&gt;virtual temperature&lt;/em&gt;, which is the
fictitious temperature that dry air would have to have to achieve
the same (lower) density of the moist air, at the same pressure:&lt;/p&gt;
&lt;div class="math"&gt;$$ p_m = \rho_m RT_v $$&lt;/div&gt;
&lt;p&gt;From comparing the last two equations we can see that:&lt;/p&gt;
&lt;div class="math"&gt;$$ T_v = \left[m + \frac{m_v}{\sigma}\right]\frac{1}{m+m_v} T $$&lt;/div&gt;
&lt;div class="math"&gt;$$ T_v = \left[m + m_v + \frac{m_v}{\sigma} - m_v\right]
\frac{1}{m + m_v} T $$&lt;/div&gt;
&lt;div class="math"&gt;$$ T_v = \left[1 + \frac{m_v}{m +
m_v}\left(\frac{1}{\sigma} - 1\right)\right] T $$&lt;/div&gt;
&lt;div class="math"&gt;$$ T_v = \left[1 + \frac{m_v}{m + m_v}\frac{1 -
\sigma}{\sigma} \right] \frac{1}{m + m_v} T $$&lt;/div&gt;
&lt;p&gt;By definition, the mixing ratio &lt;span class="math"&gt;\( \mu = m_v/(m + m_v)\)&lt;/span&gt;
is the ratio of the mass of water vapour to the mass of
moist air:&lt;/p&gt;
&lt;div class="math"&gt;$$ T_v = \left[1 + \frac{1-\sigma}{\sigma} \mu \right] T $$&lt;/div&gt;
&lt;p&gt;The virtual temperature is always slightly higher, by at most a few
degrees, than the true temperature of the moist air.&lt;/p&gt;
&lt;h2&gt;Geopotential in terms of virtual temperature&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://0x7df.github.io/geopotential.html"&gt;Elsewhere&lt;/a&gt; we have seen that the geopotential is:&lt;/p&gt;
&lt;div class="math"&gt;$$ d\phi = -\frac{1}{\rho} dp $$&lt;/div&gt;
&lt;p&gt;Substituting in the equation of state for moist air, involving the
virtual temperature:&lt;/p&gt;
&lt;div class="math"&gt;$$ d\phi = -RT_v \frac{dp}{p} $$&lt;/div&gt;
&lt;p&gt;Integrating:&lt;/p&gt;
&lt;div class="math"&gt;$$ \phi = \phi_0 - R \int_{p_0}^p T_v d\ln p $$&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="atmospheric science"></category><category term="meteorology"></category><category term="physics"></category></entry><entry><title>Geopotential</title><link href="http://0x7df.github.io/geopotential.html" rel="alternate"></link><published>2015-08-30T16:58:00+01:00</published><updated>2015-08-30T16:58:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-08-30:/geopotential.html</id><summary type="html">&lt;p&gt;The &lt;em&gt;geopotential&lt;/em&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ \phi = gz $$&lt;/div&gt;
&lt;p&gt;is the gravitational potential - i.e. the gravitational potential energy
per unit mass - at a location in the earth's atmosphere. It is often
used as a vertical coordinate instead of height above sea level,
&lt;span class="math"&gt;\( z\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The geopotential at height &lt;span class="math"&gt;\( z\)&lt;/span&gt; is the difference
between the gravitational …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;em&gt;geopotential&lt;/em&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ \phi = gz $$&lt;/div&gt;
&lt;p&gt;is the gravitational potential - i.e. the gravitational potential energy
per unit mass - at a location in the earth's atmosphere. It is often
used as a vertical coordinate instead of height above sea level,
&lt;span class="math"&gt;\( z\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The geopotential at height &lt;span class="math"&gt;\( z\)&lt;/span&gt; is the difference
between the gravitational potential energy at some reference height,
&lt;span class="math"&gt;\( z_0\)&lt;/span&gt;, usually taken to be zero (sea level), and
that at &lt;span class="math"&gt;\( z\)&lt;/span&gt;. This difference is numerically equal
to the work done in raising the parcel from &lt;span class="math"&gt;\( z_0\)&lt;/span&gt;
to &lt;span class="math"&gt;\( z\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ \phi(z) = \int_{z_0}^z g(z') dz' $$&lt;/div&gt;
&lt;p&gt;The simplification to:&lt;/p&gt;
&lt;div class="math"&gt;$$ \phi = gz $$&lt;/div&gt;
&lt;p&gt;assumes that &lt;span class="math"&gt;\( g\)&lt;/span&gt; is constant with height. If the
variation is to be taken into account, a suitable profile for
&lt;span class="math"&gt;\( g(z)\)&lt;/span&gt; is:&lt;/p&gt;
&lt;div class="math"&gt;$$ g(z) = \frac{g_0}{\left[ 1 + \left(
z/E\right)\right]^2} $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\( g_0\)&lt;/span&gt; is the value at sea level and
&lt;span class="math"&gt;\( E\)&lt;/span&gt; is the earth's mean radius. Substituting into
the definition of geopotential:&lt;/p&gt;
&lt;div class="math"&gt;$$ \phi(z) = \int_{z_0}^z g(z') dz' $$&lt;/div&gt;
&lt;p&gt;gives:&lt;/p&gt;
&lt;div class="math"&gt;$$ \phi(z) = \int_{z_0}^z \frac{g_0}{\left[ 1 + z' / E
\right]^2} dz' $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \phi(z) = g_0 E^2 \int_{z_0}^z \frac{1}{\left[ E+z'
\right]^2} dz' $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \phi(z) = g_0 \frac{z-z_0}{\left( 1+z/E \right) \left(
1+z_0/E \right)} $$&lt;/div&gt;
&lt;p&gt;or, if we take &lt;span class="math"&gt;\( z_0\)&lt;/span&gt; to be zero:&lt;/p&gt;
&lt;div class="math"&gt;$$ \phi(z) = g_0 \frac{z}{1+z/E} $$&lt;/div&gt;
&lt;p&gt;The assumption that gravity is constant is equivalent to assuming that
&lt;span class="math"&gt;\( z \ll E\)&lt;/span&gt; so that &lt;span class="math"&gt;\( z/E \ll 1\)&lt;/span&gt;,
and therefore that the denominator on the right-hand
side of the above equation is unity.&lt;/p&gt;
&lt;p&gt;In terms of differentials:&lt;/p&gt;
&lt;div class="math"&gt;$$ d\phi = g dz $$&lt;/div&gt;
&lt;p&gt;and taking into consideration the hydrostatic equation:&lt;/p&gt;
&lt;div class="math"&gt;$$ dp = -\rho g dz $$&lt;/div&gt;
&lt;p&gt;we obtain:&lt;/p&gt;
&lt;div class="math"&gt;$$ d\phi = -\frac{dp}{\rho} = -\alpha dp $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\( \alpha = 1 / \rho\)&lt;/span&gt; is the specific volume
(volume per unit mass).&lt;/p&gt;
&lt;p&gt;The geopotential is larger than the geometric height by a factor of
&lt;span class="math"&gt;\( g\)&lt;/span&gt; - e.g. the geopotential in &lt;span class="math"&gt;\( \mathrm{J/kg}\)&lt;/span&gt; is about 10
times the magnitude of the geometric altitude in metres. To make the
geopotential have numerical magnitude more nearly equal to the geometric
height, it is often expressed in units a factor of &lt;span class="math"&gt;\( g_0\)&lt;/span&gt;
smaller; these units are usually called &lt;em&gt;geopotential
metres&lt;/em&gt;, or &lt;em&gt;dynamic metres&lt;/em&gt;, or &lt;em&gt;geodynamic metres&lt;/em&gt;. That is, the
geopotential in these units, is:&lt;/p&gt;
&lt;div class="math"&gt;$$ \mathrm{gpm}(z) = \frac{\phi(z)}{g_0} $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \mathrm{gpm}(z) = \frac{\int_{z_0}^z g(z') dz'}{g_0} $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \mathrm{gpm}(z) = \frac{z}{1+z/E} $$&lt;/div&gt;
&lt;h2&gt;Rogers and Yau Problem 3.2b&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Show that the geopotential at pressure level &lt;span class="math"&gt;\( p\)&lt;/span&gt;
of an atmosphere in hydrostatic equilibium is given
by:&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$ \phi(p) = R\bar T\ln{\left(p_0/p\right)} $$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;where &lt;span class="math"&gt;\( \phi(p_0) = 0\)&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The differential expression for hydrostatic equilibrium is:&lt;/p&gt;
&lt;div class="math"&gt;$$ dp = -g\rho dz $$&lt;/div&gt;
&lt;p&gt;From the definition of geopotential:&lt;/p&gt;
&lt;div class="math"&gt;$$ \phi(z) = g \int_{z_0}^z dz' $$&lt;/div&gt;
&lt;p&gt;we have:&lt;/p&gt;
&lt;div class="math"&gt;$$ d\phi = g dz $$&lt;/div&gt;
&lt;p&gt;Hence:&lt;/p&gt;
&lt;div class="math"&gt;$$ dp = -\rho d\phi $$&lt;/div&gt;
&lt;p&gt;Introducing the equation of state gives:&lt;/p&gt;
&lt;div class="math"&gt;$$ dp = \frac{p}{RT} d\phi $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \int \frac{dp}{p} = -\frac{1}{R} \int \frac{d\phi}{T} $$&lt;/div&gt;
&lt;p&gt;Performing the integration gives:&lt;/p&gt;
&lt;div class="math"&gt;$$ \ln(p) = -\frac{1}{R\bar T} \phi(p) + C $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\( \bar T\)&lt;/span&gt; is the average temperature
through the layer from &lt;span class="math"&gt;\( p_0\)&lt;/span&gt; to &lt;span class="math"&gt;\( p\)&lt;/span&gt;.
Since &lt;span class="math"&gt;\( \phi(p_0) = 0\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ C = \ln{p_0} $$&lt;/div&gt;
&lt;p&gt;Hence:&lt;/p&gt;
&lt;div class="math"&gt;$$ \phi(p) = R\bar T\ln{(p_0/p)} $$&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="atmospheric science"></category><category term="meteorology"></category><category term="physics"></category></entry><entry><title>Thermal radiation, Kirchhoff's law, and black bodies (1/4)</title><link href="http://0x7df.github.io/thermal-radiation-kirchhoffs-law-and-black-bodies-14.html" rel="alternate"></link><published>2015-05-17T14:53:00+01:00</published><updated>2015-05-17T14:53:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-05-17:/thermal-radiation-kirchhoffs-law-and-black-bodies-14.html</id><summary type="html">&lt;h2&gt;Thermal radiation&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Thermal imaging" src="https://0x7df.files.wordpress.com/2015/05/sts-3_infrared_on_reentry.jpg?w=127"&gt;&lt;/p&gt;
&lt;p&gt;All matter continuously emits electromagnetic radiation as a consequence
of its temperature. This radiation is called &lt;strong&gt;thermal radiation&lt;/strong&gt; or
&lt;strong&gt;heat radiation&lt;/strong&gt; (although of course it isn't intrinsically different
from electromagnetic radiation generated by any other means). Thermal
radiation is what makes thermal imaging possible, and why hot embers …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Thermal radiation&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Thermal imaging" src="https://0x7df.files.wordpress.com/2015/05/sts-3_infrared_on_reentry.jpg?w=127"&gt;&lt;/p&gt;
&lt;p&gt;All matter continuously emits electromagnetic radiation as a consequence
of its temperature. This radiation is called &lt;strong&gt;thermal radiation&lt;/strong&gt; or
&lt;strong&gt;heat radiation&lt;/strong&gt; (although of course it isn't intrinsically different
from electromagnetic radiation generated by any other means). Thermal
radiation is what makes thermal imaging possible, and why hot embers
glow, etc. From our everyday experience and from experimentation we can
see that both the wavelength and intensity of radiation emitted depend
in some way on the temperature of the matter.&lt;/p&gt;
&lt;p&gt;We can understand a lot about the properties of thermal radiation from
thought experiments, in particular by considering a hollow enclosure of
any shape, whose walls are opaque to radiation and which are held
everywhere at a constant temperature. The inner surface emits thermal
radiation, and therefore the interior space is filled with a radiation
field. The walls also absorb radiation. If at a particular time a small
volume &lt;span class="math"&gt;\( dv\)&lt;/span&gt; of space around a point &lt;span class="math"&gt;\( P\)&lt;/span&gt; contains an amount of radiation &lt;span class="math"&gt;\( Q\)&lt;/span&gt;,
then the quantity &lt;span class="math"&gt;\( Q/dv\)&lt;/span&gt; is called the &lt;strong&gt;energy
density&lt;/strong&gt; at point &lt;span class="math"&gt;\( P\)&lt;/span&gt;. We can show that &lt;em&gt;the energy
density in a constant-temperature enclosure is independent of the nature
of the walls of the enclosure, and depends only on the temperature of
the walls&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;First, imagine two such containers, &lt;span class="math"&gt;\( A\)&lt;/span&gt; and &lt;span class="math"&gt;\( B\)&lt;/span&gt;,
with the same wall temperatures, but in which, for some
reason (e.g. the material of the walls perhaps) the energy density is
different. It is higher in &lt;span class="math"&gt;\( B\)&lt;/span&gt;.
&lt;a href="https://0x7df.files.wordpress.com/2015/05/two_cavities.png"&gt;&lt;img alt="two_cavities" src="https://0x7df.files.wordpress.com/2015/05/two_cavities.png?w=300"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then imagine we can bring the two enclosures together to form a single
enclosure - perhaps they each have at least one flat face of a given
shape and size, which we can match up, and then instantaneously remove
these walls so the two cavities are joined into one. If &lt;span class="math"&gt;\( B\)&lt;/span&gt;
had the higher initial energy density, then the energy
density in &lt;span class="math"&gt;\( A\)&lt;/span&gt; will begin to increase, and the energy
density in &lt;span class="math"&gt;\( B\)&lt;/span&gt; will decrease. Correspondingly, the
walls of &lt;span class="math"&gt;\( A\)&lt;/span&gt; will increase in temperature by
absorbing the excess radiation, and the walls of &lt;span class="math"&gt;\( B\)&lt;/span&gt;
will cool. The result is that we are causing heat to flow from one body
to another at higher temperature without doing any work, which
contravenes the second law of thermodynamics. From this we can conclude
that, if the walls are at the same temperature, then the energy
densities must be the same, no matter what. Hence, the energy density in
each enclosure is dependent on only the wall temperature.&lt;/p&gt;
&lt;p&gt;The result also applies to the energy density in any restricted range of
wavelengths,  between &lt;span class="math"&gt;\( \lambda\)&lt;/span&gt; and &lt;span class="math"&gt;\( \lambda
+ d\lambda\)&lt;/span&gt;. If, when we first conjoin the two enclosures,
instead of simply removing the interior walls we replace them with a
screen that is transparent to radiation only in the wavelength range of
interest, then the situation is the same. Therefore not only must the
total energy density be the same in the two enclosures (if their wall
temperatures are the same), but the energy density in any given range of
wavelengths must also be the same; i.e. the energy in both enclosures
must have the same &lt;em&gt;spectrum&lt;/em&gt;. This spectrum is called the &lt;strong&gt;Planck
spectrum&lt;/strong&gt; or the &lt;strong&gt;black-body spectrum&lt;/strong&gt;, and is evidently a function
of temperature only.&lt;/p&gt;
&lt;h2&gt;Kirchhoff's Law (1859)&lt;/h2&gt;
&lt;p&gt;For radiation of wavelengths between &lt;span class="math"&gt;\( \lambda\)&lt;/span&gt; and
&lt;span class="math"&gt;\( \lambda + d\lambda\)&lt;/span&gt;, the &lt;strong&gt;absorptive power&lt;/strong&gt; (or
&lt;strong&gt;absorptivity&lt;/strong&gt;), &lt;span class="math"&gt;\( a_\lambda\)&lt;/span&gt;, of a surface is
defined as the fraction of the energy incident on the surface that is
absorbed. The &lt;strong&gt;emissive power&lt;/strong&gt;, &lt;span class="math"&gt;\( e_\lambda\)&lt;/span&gt;, is
the energy emitted per unit area per unit time (per unit wavelength);
such that &lt;span class="math"&gt;\( e_\lambda d\lambda\)&lt;/span&gt; is the energy
emitted per unit area per unit time.&lt;/p&gt;
&lt;p&gt;Knowing this, we can determine that, if a new body is inserted into a
constant-temperature enclosure of the kind discussed earlier, then some
amount of radiation, &lt;span class="math"&gt;\( dQ\)&lt;/span&gt;, will be incident on each
unit area in each unit time, and an amount &lt;span class="math"&gt;\( a_\lambda dQ\)&lt;/span&gt;
will be absorbed. Since the nature of the walls of the
outer container cannot have any effect on the density or spectrum of the
radiation inside the enclosure, then the body cannot either; it must be
in equilibrium and the emission per unit area per unit time -
&lt;span class="math"&gt;\( e_\lambda d\lambda\)&lt;/span&gt; - must equate to the absorption.
Hence:&lt;/p&gt;
&lt;div class="math"&gt;$$ a_\lambda dQ = e_\lambda d\lambda $$&lt;/div&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{dQ}{d\lambda} = \frac{e_\lambda}{a_\lambda} $$&lt;/div&gt;
&lt;p&gt;Because &lt;span class="math"&gt;\( dQ\)&lt;/span&gt; depends only on the temperature, then
for a given temperature both sides of the above equation are equal to a
constant, whose value depends on the temperature and the wavelengths in
question, but not on the composition of the body. This is &lt;strong&gt;Kirchhoff's
law&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The ratio of the emissive to absorptive power for radiation of a
given wavelength is the same for all bodies at the same temperature&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A way of clarifying this is to compare two different bodies, placed
separately in the interior. The body discussed above, has equilibrium
state:&lt;/p&gt;
&lt;div class="math"&gt;$$ a_\lambda dQ = e_\lambda d\lambda $$&lt;/div&gt;
&lt;p&gt;but if this is replaced with a different body having different surface
properties &lt;span class="math"&gt;\( a_\lambda'\)&lt;/span&gt; and &lt;span class="math"&gt;\( e_\lambda'\)&lt;/span&gt;,
then the new equilibrium state is:&lt;/p&gt;
&lt;div class="math"&gt;$$ a_\lambda' dQ = e_\lambda' d\lambda $$&lt;/div&gt;
&lt;p&gt;The ratios &lt;span class="math"&gt;\( a_\lambda/e_\lambda\)&lt;/span&gt; and
&lt;span class="math"&gt;\( a_\lambda' / e_\lambda'\)&lt;/span&gt; must clearly be equal.
Alternatively, you can think of a body inside and therefore in
equilibrium with one enclosure, being instantaneously transferred to a
different enclosure at the same temperature, and arrive at the same
conclusion again.&lt;/p&gt;
&lt;h2&gt;Black bodies and perfect radiators&lt;/h2&gt;
&lt;p&gt;One interesting consequence of the fact that:&lt;/p&gt;
&lt;div class="math"&gt;$$ a_\lambda dQ = e_\lambda d\lambda $$&lt;/div&gt;
&lt;p&gt;is that a stronger absorber (larger &lt;span class="math"&gt;\( a_\lambda\)&lt;/span&gt;) is
also a stronger emitter (larger &lt;span class="math"&gt;\( e_\lambda\)&lt;/span&gt;), at a
given temperature and for a given wavelength of radiation. In fact a
perfect absorber, for which &lt;span class="math"&gt;\( a_\lambda = 1\)&lt;/span&gt;, and
which we therefore refer to as a &lt;strong&gt;black body&lt;/strong&gt;, also radiates as
intensely as it's possible to do so under the given conditions; so it is
also sometimes called a &lt;strong&gt;full&lt;/strong&gt; or &lt;strong&gt;perfect radiator&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hole in cavity as black body" src="http://upload.wikimedia.org/wikipedia/commons/e/ef/Hole_in_Cavity_as_Blackbody.png"&gt;&lt;/p&gt;
&lt;p&gt;An enclosure with a small hole acts nearly as a block body, absorbing
radiation incident on it with a very small probability of escape (as
long as the walls absorb a non-zero fraction of the radiation incident
on them).&lt;/p&gt;
&lt;p&gt;A black body is a theoretical construct - a substance like
&lt;a href="https://paleotechnics.wordpress.com/2014/02/25/lampblack-what-it-is-and-what-its-good-for/"&gt;lamp black&lt;/a&gt;
is an excellent but not perfect absorber - but one way to approach a
black body very nearly, is by constructing a sealed enclosure with only
a small hole through the walls. Radiation incident on this hole has a
very tiny probability of escaping again (i.e. by being reflected off the
interior walls) as long as the hole is small in comparison with the
dimensions of the enclosure; therefore this system acts as a perfect
absorber or black body.&lt;/p&gt;
&lt;p&gt;Interestingly, such an enclosure doesn't have the characteristics of a
black body only in terms of its ability to &lt;em&gt;absorb&lt;/em&gt; the radiation
incident on it; radiation &lt;em&gt;emitted&lt;/em&gt; from the hole also has identical
characteristics to radiation emitted from a black body. We can see this
from the fact that, if we were to place a black body of the same
temperature into the interior of the cavity, then for it to remain at
this original temperature (which it must), the radiation emitted from
the cavity walls must be incident on the black body inside it with just
the same rate as the rate at which the black body is emitting radiation
itself. Hence, the radiation in the enclosure - or any enclosure with
constant wall temperature - is black-body radiation.&lt;/p&gt;
&lt;p&gt;Since the radiation in the interior of any constant-temperature
enclosure has the intensity of black-body radiation, then another way of
expressing Kirchhoff's law is that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The ratio of the emissive power of a body to the emissive power of a
black body at the same temperature is equal to the absorptive power of
the body.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(Recall that the absorptive power is just a number between 0 and 1).
This ratio is also called the &lt;strong&gt;emissivity&lt;/strong&gt;, or &lt;strong&gt;absorptivity&lt;/strong&gt;.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="black body"></category><category term="thermal radiation"></category><category term="thermodynamics"></category></entry><entry><title>Python wordcloud for WordPress</title><link href="http://0x7df.github.io/python-wordcloud-for-wordpress.html" rel="alternate"></link><published>2015-05-10T12:06:00+01:00</published><updated>2015-05-10T12:06:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-05-10:/python-wordcloud-for-wordpress.html</id><summary type="html">&lt;p&gt;There is a &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; routine available on
&lt;a href="https://github.com/"&gt;Github&lt;/a&gt; for creating a word cloud, created by
&lt;a href="http://peekaboo-vision.blogspot.co.uk/"&gt;Andreas Mueller&lt;/a&gt;:
&lt;a href="https://github.com/amueller/word_cloud"&gt;https://github.com/amueller/word_cloud&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://sebastianraschka.com/Articles/2014_twitter_wordcloud.html"&gt;A blog post
here&lt;/a&gt;,
and &lt;a href="https://github.com/rasbt/datacollect"&gt;the Github repo that it goes
with&lt;/a&gt; (both due to &lt;a href="http://sebastianraschka.com/"&gt;Sebastien
Raschka&lt;/a&gt;), make it easy to use the
&lt;a href="https://dev.twitter.com/rest/public"&gt;Twitter API&lt;/a&gt; to download your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There is a &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; routine available on
&lt;a href="https://github.com/"&gt;Github&lt;/a&gt; for creating a word cloud, created by
&lt;a href="http://peekaboo-vision.blogspot.co.uk/"&gt;Andreas Mueller&lt;/a&gt;:
&lt;a href="https://github.com/amueller/word_cloud"&gt;https://github.com/amueller/word_cloud&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://sebastianraschka.com/Articles/2014_twitter_wordcloud.html"&gt;A blog post
here&lt;/a&gt;,
and &lt;a href="https://github.com/rasbt/datacollect"&gt;the Github repo that it goes
with&lt;/a&gt; (both due to &lt;a href="http://sebastianraschka.com/"&gt;Sebastien
Raschka&lt;/a&gt;), make it easy to use the
&lt;a href="https://dev.twitter.com/rest/public"&gt;Twitter API&lt;/a&gt; to download your
&lt;a href="https://support.twitter.com/articles/164083-what-s-a-twitter-timeline#"&gt;Twitter
timeline&lt;/a&gt;
(as a &lt;a href="http://en.wikipedia.org/wiki/Comma-separated_values"&gt;CSV&lt;/a&gt; file),
and then use the word cloud script to produce a word cloud from it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://0x7df.files.wordpress.com/2015/04/my_twitter_wordcloud_1.png"&gt;&lt;img alt="my_twitter_wordcloud_1" src="https://0x7df.files.wordpress.com/2015/04/my_twitter_wordcloud_1.png?w=660"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To add something to this, I did the same thing with my
&lt;a href="https://wordpress.com"&gt;WordPress&lt;/a&gt; blog posts. I didn't want to bother
fighting with the WordPress API, so I simply exported the blog contents
to an XML file, which WordPress allows you to do through the admin
interface (so you can archive your blog locally and/or transfer it into
a different blog). Hence, this really just ends up being about XML
parsing. Here is the source code:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
#!/usr/bin/python&lt;/p&gt;
&lt;p&gt;from HTMLParser import HTMLParser&lt;br&gt;
import xml.etree.ElementTree as ET&lt;br&gt;
import matplotlib.pyplot as plt&lt;br&gt;
from wordcloud import WordCloud, STOPWORDS&lt;/p&gt;
&lt;p&gt;#
http://stackoverflow.com/questions/753052/strip-html-from-strings-in-python&lt;br&gt;
class MLStripper(HTMLParser):&lt;br&gt;
def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br&gt;
self.reset()&lt;br&gt;
self.fed = []&lt;br&gt;
def handle_data(self, d):&lt;br&gt;
self.fed.append(d)&lt;br&gt;
def get_data(self):&lt;br&gt;
return ''.join(self.fed)&lt;/p&gt;
&lt;p&gt;tree = ET.parse('0x7df.wordpress.2015-04-25.xml')&lt;/p&gt;
&lt;p&gt;root = tree.getroot()&lt;/p&gt;
&lt;p&gt;postwords = []&lt;/p&gt;
&lt;p&gt;for child in root.iter():&lt;br&gt;
if child.tag == 'item':&lt;br&gt;
if child.find('{http://wordpress.org/export/1.2/}status').text ==
'publish':&lt;br&gt;
postbody =
child.find('{http://purl.org/rss/1.0/modules/content/}encoded').text&lt;br&gt;
s = MLStripper()&lt;br&gt;
s.feed(postbody)&lt;br&gt;
postwords += s.get_data().split()&lt;/p&gt;
&lt;p&gt;keywords = ' '.join([wd for wd in postwords&lt;br&gt;
if 'http' not in wd and&lt;br&gt;
'bg=' not in wd and&lt;br&gt;
not wd.startswith('$') and&lt;br&gt;
not wd.startswith('[') and&lt;br&gt;
not wd.startswith('&amp;amp;')&lt;br&gt;
])&lt;/p&gt;
&lt;p&gt;wordcloud = WordCloud(&lt;br&gt;
font_path='./SaucerBB.ttf',&lt;br&gt;
stopwords=STOPWORDS,&lt;br&gt;
background_color='black',&lt;br&gt;
width=1800,&lt;br&gt;
height=1800&lt;br&gt;
).generate(keywords)&lt;/p&gt;
&lt;p&gt;plt.imshow(wordcloud)&lt;br&gt;
plt.axis('off')&lt;br&gt;
plt.savefig('./my_wordpress_wordcloud_2.png', dpi=300)&lt;br&gt;
plt.show()&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;I used the standard library light-weight
&lt;code&gt;&amp;lt;a href="https://docs.python.org/2/library/xml.etree.elementtree.html" target="_blank"&amp;gt;xml.etree.ElementTree&amp;lt;/a&amp;gt;&lt;/code&gt;
parser. I get the root of the &lt;a href="http://en.wikipedia.org/wiki/XML"&gt;XML&lt;/a&gt;
document, and iterate over its children; this is recursive, so it
descends down the tree to all nodes. Whenever I encounter a node which
has the tag &lt;code&gt;item&lt;/code&gt; (which contains the post information), I search
amongst its immediate children using the &lt;code&gt;find()&lt;/code&gt; method, to find one
with tag &lt;code&gt;{http://wordpress.org/export/1.2/}status&lt;/code&gt;, which contains the
status of the post, i.e. whether it's published, draft, etc. If it's
published (the text that the XML tag contains &lt;code&gt;== publish&lt;/code&gt;), then I
search again using &lt;code&gt;find()&lt;/code&gt; for the tag
&lt;code&gt;{http://purl.org/rss/1.0/modules/content/}encoded&lt;/code&gt;, which contains the
blog post text. I put this in the &lt;code&gt;postbody&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;The next few lines use the &lt;code&gt;class&lt;/code&gt; defined earlier on in the script -
&lt;code&gt;MLStripper()&lt;/code&gt; - to strip out the &lt;a href="http://www.w3schools.com/html/"&gt;HTML&lt;/a&gt;
tags from the blog post. (This came from
&lt;a href="//stackoverflow.com/questions/753052/strip-html-from-strings-in-python"&gt;StackOverflow&lt;/a&gt;.)
The rest of the script is essentially the same as &lt;a href="http://sebastianraschka.com/Articles/2014_twitter_wordcloud.html"&gt;Raschka's code for
Twitter&lt;/a&gt;,
tweaked a little where necessary.&lt;br&gt;
The result is:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://0x7df.files.wordpress.com/2015/04/my_wordpress_wordcloud_21.png"&gt;&lt;img alt="my_wordpress_wordcloud_2" src="https://0x7df.files.wordpress.com/2015/04/my_wordpress_wordcloud_21.png?w=660"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The font is called Saucer BB, from
&lt;a href="http://www.1001fonts.com/saucer-bb-font.html"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="api"></category><category term="html"></category><category term="python"></category><category term="twitter"></category><category term="wordcloud"></category><category term="wordpress"></category><category term="xml"></category></entry><entry><title>Hydrostatic balance in the atmosphere</title><link href="http://0x7df.github.io/hydrostatic-balance-in-the-atmosphere.html" rel="alternate"></link><published>2015-05-02T22:10:00+01:00</published><updated>2015-05-02T22:10:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-05-02:/hydrostatic-balance-in-the-atmosphere.html</id><summary type="html">&lt;p&gt;Atmospheric pressure at any altitude represents the total weight, per
unit area, of the air column above that altitude. The pressure,
therefore, decreases with altitude as there is less air above pressing
down. To find the rate of decrease of pressure with height, consider a
vertical column of air with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Atmospheric pressure at any altitude represents the total weight, per
unit area, of the air column above that altitude. The pressure,
therefore, decreases with altitude as there is less air above pressing
down. To find the rate of decrease of pressure with height, consider a
vertical column of air with unit cross-sectional area, having
pressure &lt;span class="math"&gt;\( p\)&lt;/span&gt; at height &lt;span class="math"&gt;\( z
$. At height $ z + dz\)&lt;/span&gt; the pressure
has decreased to some value &lt;span class="math"&gt;\( p-dp\)&lt;/span&gt;, and the
pressure difference &lt;span class="math"&gt;\( dp\)&lt;/span&gt; is equal to the weight
of the slice of the vertical air column having thickness &lt;span class="math"&gt;\( dz\)&lt;/span&gt;
(at height &lt;span class="math"&gt;\( z\)&lt;/span&gt;).
Assuming &lt;span class="math"&gt;\( dz\)&lt;/span&gt; is small enough that the air
density, &lt;span class="math"&gt;\( \rho\)&lt;/span&gt;, and the acceleration due to
gravity, &lt;span class="math"&gt;\( g\)&lt;/span&gt;, can both be considered constant
within the slice:&lt;/p&gt;
&lt;div class="math"&gt;$$ dp = -g \rho dz $$&lt;/div&gt;
&lt;p&gt;Here &lt;span class="math"&gt;\( g\)&lt;/span&gt; is the acceleration of gravity that
transforms the areal mass element &lt;span class="math"&gt;\( \rho dz\)&lt;/span&gt; into
an areal weight element &lt;span class="math"&gt;\( g\rho dz\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This equation is called the &lt;em&gt;hydrostatic equation&lt;/em&gt;. It is commonly
written as:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{\partial p}{\partial z} = -g \rho $$&lt;/div&gt;
&lt;p&gt;This expresses that the upward vertical pressure-gradient force is
balanced by the downward gravitational force, a situation usually
referred to as &lt;em&gt;hydrostatic equilibrium&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;With increasing altitude, the density of air also decreases (e.g. from
an average of 1.2 kg/m^3^ at the surface to an average of 0.7 kg/m^3^ at
5 km); hence the rate of change of pressure with height decreases with
height. Air temperature also affects density (in a way described by the
equation of state), and therefore the rate of pressure decrease with
altitude.&lt;/p&gt;
&lt;p&gt;Substituting in the equation of state allows us to integrate the
hydrostatic equation to obtain an expression for &lt;span class="math"&gt;\( p(z)\)&lt;/span&gt;.
The equation of state for dry air is:&lt;/p&gt;
&lt;div class="math"&gt;$$ p = \rho R T $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\( R = R^{*}/m\)&lt;/span&gt; is the individual gas
constant for dry air, and &lt;span class="math"&gt;\( R^{*}\)&lt;/span&gt; and &lt;span class="math"&gt;\( m
are the universal gas constant and the molecular weight
of dry air, respectively. (The equation of state for moist air can be
obtained by replacing $ T\)&lt;/span&gt; with &lt;span class="math"&gt;\( T_v\)&lt;/span&gt;,
which is the &lt;em&gt;virtual temperature&lt;/em&gt;. It can be shown
that moist air is lighter than dry air of the same temperature and
pressure, because the water vapour is lighter than the dry air it
replaces; so that in cases where only the density of air is important,
dry air of slightly higher temperature may be substituted for moist air.
Virtual temperature is the fictitious temperature to which dry air must
be raised to have the same density as the moist air in question, and of
course it depends on the moisture content as well as the pressure.)&lt;/p&gt;
&lt;p&gt;Making this substitution gives:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{\partial p}{\partial z} = -\frac{g}{RT}p
$$&lt;/div&gt;
&lt;p&gt;and hence:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{dp}{p} = \frac{g}{RT}dz $$&lt;/div&gt;
&lt;p&gt;By integration:&lt;/p&gt;
&lt;div class="math"&gt;$$ p = p_0 \exp \left( -\frac{g}{R} \int_{z_0}^z
\frac{1}{T} dz' \right) $$&lt;/div&gt;
&lt;p&gt;(assuming &lt;span class="math"&gt;\( g\)&lt;/span&gt; is constant with height).&lt;/p&gt;
&lt;p&gt;In the special case where the temperature is constant with height, the
pressure profile is:&lt;/p&gt;
&lt;div class="math"&gt;$$ p = p_0 \exp \left( -\frac{g(z-z_0)}{RT} \right)
$$&lt;/div&gt;
&lt;p&gt;The temperature in the atmosphere varies by a factor of two, whereas the
pressure varies by six orders of magnitude.&lt;/p&gt;
&lt;h2&gt;Model atmospheres&lt;/h2&gt;
&lt;p&gt;The following is question 3.5 from &lt;a href="https://www.elsevier.com/books/a-short-course-in-cloud-physics/yau/978-0-7506-3215-7"&gt;&lt;em&gt;A Short Course in Cloud Physics&lt;/em&gt;,
by Rogers and
Yau&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Two model atmospheres often used in theoretical work are the
homogeneous atmosphere:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\( \rho(z) = \rho_0 $\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;and the exponential atmosphere:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\( \rho(z) = \rho_0 e^{-z/H} $\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;where&lt;/em&gt; &lt;span class="math"&gt;\( \rho_0\)&lt;/span&gt; &lt;em&gt;is the density at the
surface and H is called the scale height of the atmosphere. The top of
the homogeneous atmosphere is defined as the altitude where the
pressure falls to zero. Prove that the height of the top of the
homogeneous atmosphere equals the scale height of the exponential
atmosphere.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For this problem we need the equation of &lt;a href="en.wikipedia.org/wiki/Hydrostatic_equilibrium"&gt;hydrostatic
balance&lt;/a&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{\partial p}{\partial z} = -\rho(z) g $$&lt;/div&gt;
&lt;p&gt;which describes the equilibrium achieved in a fluid under gravity, where
the upward&lt;a href="en.wikipedia.org/wiki/Pressure-gradient_force"&gt;pressure gradient
force&lt;/a&gt; balances the
opposing force due to gravity.&lt;/p&gt;
&lt;p&gt;First consider the &lt;a href="http://glossary.ametsoc.org/wiki/Homogeneous_atmosphere"&gt;homogeneous
atmosphere&lt;/a&gt;;
using this equation it is very simple to calculate the height at which
the pressure falls to zero because, since the density is constant, the
gradient of pressure with height is also constant:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{\partial p}{\partial z} = -\rho_0 g $$&lt;/div&gt;
&lt;p&gt;That is, the pressure falls off linearly:&lt;/p&gt;
&lt;div class="math"&gt;$$ p(z) = \left( -\rho_0 g \right) z + p_0 $$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\( p_0\)&lt;/span&gt; is the pressure at the surface
(&lt;span class="math"&gt;\( z = 0\)&lt;/span&gt;). From this equation we see that the
pressure falls to zero when:&lt;/p&gt;
&lt;div class="math"&gt;$$ z|_{p=0} = \frac{p_0}{\rho_0 g} $$&lt;/div&gt;
&lt;p&gt;Now consider the &lt;a href="http://en.wikipedia.org/wiki/Barometric_formula"&gt;exponential
atmosphere&lt;/a&gt;; we can
determine &lt;em&gt;H&lt;/em&gt; in the following way. First, we integrate the equation for
hydrostatic balance from some height &lt;span class="math"&gt;\( z = z'\)&lt;/span&gt; up
to &lt;span class="math"&gt;\( z = \infty\)&lt;/span&gt; to obtain the pressure at height
&lt;span class="math"&gt;\($ z'\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ \int_{z'}^{\infty} \frac{\partial p}{\partial z} dz =
-\rho_0 g \int_{z'}^{\infty} e^{-z/H} dz $$&lt;/div&gt;
&lt;p&gt;If we assume that the pressure tends to zero as height tends to
infinity, and we set &lt;span class="math"&gt;\( z' = 0\)&lt;/span&gt;, then:&lt;/p&gt;
&lt;div class="math"&gt;$$ p_0 = \rho_0 g H $$&lt;/div&gt;
&lt;p&gt;Consequently:&lt;/p&gt;
&lt;div class="math"&gt;$$ H = \frac{p_0}{\rho_0 g} $$&lt;/div&gt;
&lt;p&gt;Hence, as long as &lt;span class="math"&gt;\( p_0\)&lt;/span&gt; has the same value in
both the homogeneous and exponential atmospheres, the height of the top
of the homogeneous atmosphere is equal to the scale height of the
exponential atmosphere.&lt;/p&gt;
&lt;div&gt;

[![Pressure (mb) vs. height (m) for two model
atmospheres](https://plot.ly/~0x7df/11.png)](https://plot.ly/~0x7df/11/ "Pressure (mb) vs. height (m) for two model atmospheres")  
&lt;https://plot.ly/embed.js&gt;

&lt;/div&gt;

&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="exponential atmosphere"></category><category term="fluid dynamics"></category><category term="homogeneous atmosphere"></category><category term="hydrostatic balance"></category><category term="hydrostatic equilibrium"></category><category term="meteorology"></category></entry><entry><title>Creating a new Ubuntu virtual machine in Oracle VirtualBox</title><link href="http://0x7df.github.io/creating-a-new-ubuntu-virtual-machine-in-oracle-virtualbox.html" rel="alternate"></link><published>2015-04-26T12:29:00+01:00</published><updated>2015-04-26T12:29:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-04-26:/creating-a-new-ubuntu-virtual-machine-in-oracle-virtualbox.html</id><summary type="html">&lt;p&gt;These instructions are for a Windows host machine. An article
&lt;a href="http://osxdaily.com/2012/03/27/install-run-ubuntu-linux-virtualbox/"&gt;here&lt;/a&gt;gives
instructions for Mac OS X, but are unlikely to be very different. This
assumed you've already
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;downloaded&lt;/a&gt; and
&lt;a href="https://www.virtualbox.org/manual/ch02.html"&gt;installed&lt;/a&gt;VirtualBox.&lt;/p&gt;
&lt;h2&gt;Create the VM&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Open the Oracle VM VirtualBox Manager. This brings up the window
    shown in Figure 1 …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;These instructions are for a Windows host machine. An article
&lt;a href="http://osxdaily.com/2012/03/27/install-run-ubuntu-linux-virtualbox/"&gt;here&lt;/a&gt;gives
instructions for Mac OS X, but are unlikely to be very different. This
assumed you've already
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;downloaded&lt;/a&gt; and
&lt;a href="https://www.virtualbox.org/manual/ch02.html"&gt;installed&lt;/a&gt;VirtualBox.&lt;/p&gt;
&lt;h2&gt;Create the VM&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Open the Oracle VM VirtualBox Manager. This brings up the window
    shown in Figure 1.
    &lt;p&gt;
    [caption id="attachment_474" align="alignnone"
    width="276"]&lt;a href="https://0x7df.files.wordpress.com/2015/04/01_oracle_virtualbox_manager.png"&gt;&lt;img alt="Figure 1. Oracle VirtualBox VM Manager
    window." src="https://0x7df.files.wordpress.com/2015/04/01_oracle_virtualbox_manager.png?w=276"&gt;&lt;/a&gt;
    Figure 1. Oracle VirtualBox VM Manager window.[/caption]&lt;/li&gt;
&lt;li&gt;Click "New" in the top-left corner. This brings up the "Create
    Virtual Machine" dialogue box, shown in Figure 2.&lt;/li&gt;
&lt;li&gt;Give the system a descriptive name, and select "Linux" from the
    "Type" drop-down menu, and then "Ubuntu (64 bit)" from the "Version"
    drop-down menu. (Obviously you can choose whatever you like at this
    point, I default to Ubuntu.) Click "Next".
    &lt;p&gt;
    [caption id="attachment_475" align="alignnone"
    width="300"]&lt;a href="https://0x7df.files.wordpress.com/2015/04/02_create_vm_dialogue.png"&gt;&lt;img alt="Figure 2. Create Virtual Machine dialogue
    box." src="https://0x7df.files.wordpress.com/2015/04/02_create_vm_dialogue.png?w=300"&gt;&lt;/a&gt;
    Figure 2. Create Virtual Machine dialogue box.[/caption]&lt;/li&gt;
&lt;li&gt;The next  few dialogue boxes allow you to select how much memory you
    want, decide whether or not to create a virtual hard drive or not
    (or use an existing one), and assuming you do, define its properties
    (file format, whether or not to dynamically allocate storage, size
    (or maximum size), and location). Assuming you want to keep the
    defaults for all these, click "Next" or "Create" until you get to
    the end.&lt;/li&gt;
&lt;li&gt;You've finished the first phase and have been returned to the
    VirtualBox Manager window, and you should see the system you've just
    created in the list of available VMs on the left-hand side. If you
    click on it once, the details of the system will be shown in the
    right-hand pane. To launch it, either double-click, or click "Start"
    up at the top when the VM is selected.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Install the OS&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;[caption id="attachment_476" align="alignright"
    width="300"]&lt;a href="https://0x7df.files.wordpress.com/2015/04/03_select_start-up_disk_dialogue.png"&gt;&lt;img alt="Figure 3. Select start-up disk dialogue
    box." src="https://0x7df.files.wordpress.com/2015/04/03_select_start-up_disk_dialogue.png?w=300"&gt;&lt;/a&gt;
    Figure 3. Select start-up disk dialogue box.[/caption]&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
The next step is to install the operating system. A "Select start-up
disk" dialogue box comes up, with a drop-down menu. The default
selection is "Host drive 'D:'". Rather than use a DVD installation
disk however, I've previously downloaded an ISO disk image file. I
can select this directly from the drop-down menu (see Figure 3)
because I've used it before, so VirtualBox remembers its location.
If this isn't the case for you, you can click the folder icon to the
right of the drop-down menu, which opens up a file browser and
allows you to navigate to wherever you stored the downloaded ISO
file (look &lt;a href="http://www.ubuntu.com/download/desktop"&gt;here&lt;/a&gt; for a
download). Click "Start", and the VM will start to boot from the
ISO.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From here on the instructions are as to install Ubuntu from disk.
    Click through the defaults and self-explanatory settings, until the
    installation begins proper. This takes a while, and when it's
    complete you'll be prompted to restart.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Install Guest Additions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;When the restart has completed, you have working VM. However,
    there's something obviously wrong with the desktop. When you re-size
    the VM window, the desktop doesn't scale with it but remains a fixed
    size, which is way too small. This is because the resolution is
    fixed, and having the desktop size scale with the window size
    essentially means changing the VM screen resolution. To do this you
    need to install additional software on the VM, called the Guest
    Additions. The next stage is to install the Guest Additions.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;First, the Linux VM needs Dynamic Kernel Module Support (DKMS) to be
    installed. Open a terminal on the VM and run:&lt;/p&gt;
&lt;p&gt;[code lang="bash"]sudo apt-get install dkms[/code]&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
This allows it to build external module kernels.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select, from the VM's "Devices" menu, "Insert Guest Additions CD
    image...". This will open File Manager showing the contents of the
    CD, and the path, which will be something like
    "/media/username/VBOXADDITIONS_4.3.26_98988/".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return to the terminal, cd into the Guest Additions directory, then
    run:&lt;/p&gt;
&lt;p&gt;[code lang="bash"]sudo sh ./VBoxLinuxAdditions.run[/code]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart the VM. You're done.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Initial software stack&lt;/h2&gt;
&lt;p&gt;While I try to have a VM for each project I'm working on, I start each
one with a few bits and pieces that I expect to find useful on most
projects. To make this as quick as possible I have &lt;a href="https://github.com/0x7df/mkvm"&gt;a script on
GitHub&lt;/a&gt; that performs the installation
for me. To use this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install git:&lt;/p&gt;
&lt;p&gt;[code lang="bash"] sudo apt-get install git [/code]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone the repository:&lt;/p&gt;
&lt;p&gt;[code lang="bash"] git clone https://github.com/0x7df/mkvm.git
[/code]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the script:&lt;/p&gt;
&lt;p&gt;[code lang="bash"] cd mkvm ; ./mkvm.sh [/code]&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can see the software that gets installed from the listing below:&lt;/p&gt;
&lt;p&gt;[code lang="bash"]&lt;/p&gt;
&lt;p&gt;# mkvm - Make virtual machine&lt;br&gt;
# This script configures an Ubuntu virtual machine how I like it&lt;/p&gt;
&lt;p&gt;sudo apt-get -y update               # Must be done before upgrade&lt;br&gt;
sudo apt-get -y dist-upgrade         # Does upgrade with intelligent
dependency-handling&lt;/p&gt;
&lt;p&gt;sudo apt-get -y install dkms         # For installing VirtualBox Linux
Guest Additions (https://www.virtualbox.org/manual/ch04.html)&lt;/p&gt;
&lt;p&gt;sudo apt-get -y install git&lt;br&gt;
sudo apt-get -y install nedit&lt;br&gt;
sudo apt-get -y install python-numpy # Contains, amongst other things,
f2py&lt;br&gt;
sudo apt-get -y install python-dev   # For Python.h; required by f2py&lt;br&gt;
sudo apt-get -y install gfortran&lt;br&gt;
sudo apt-get -y install python-pip&lt;br&gt;
sudo apt-get -y install python-matplotlib&lt;br&gt;
sudo apt-get -y install okular&lt;br&gt;
sudo apt-get -y upgrade graphviz&lt;br&gt;
sudo apt-get -y install texlive&lt;br&gt;
sudo apt-get -y install doxygen&lt;/p&gt;
&lt;p&gt;sudo pip install robotframework&lt;br&gt;
sudo pip install prospector[with_frosted]&lt;br&gt;
sudo pip install prospector[with_pyroma]&lt;br&gt;
sudo pip install prospector[with_vulture]&lt;/p&gt;
&lt;p&gt;sudo add-apt-repository ppa:staticfloat/juliareleases&lt;br&gt;
sudo add-apt-repository ppa:staticfloat/julia-deps&lt;br&gt;
sudo apt-get -y install julia&lt;/p&gt;
&lt;p&gt;# python-scipy&lt;br&gt;
# matplotlib&lt;/p&gt;
&lt;p&gt;# If Java JDK is required, determine the path:&lt;br&gt;
#   &amp;gt; update-alternatives --config java&lt;br&gt;
# Set JAVA_HOME=/usr/bin/java (or wherever) in /etc/environment,
which is the preferred location for JAVA_HOME or any system variable.&lt;/p&gt;
&lt;p&gt;echo "&lt;br&gt;
# Now install the Linux Guest Additions for VirtualBox. Go to the&lt;br&gt;
# \"Devices\" menu of VirtualBox when the VM is running (make sure
it is not in&lt;br&gt;
# stretch mode or the menu bar will not be visible); select \"Insert
Guest&lt;br&gt;
# Additions CD image...\"; then run VBoxLinuxAdditions.run with
administrator&lt;br&gt;
# privileges. Re-boot the VM; after this the VM desktop should resize
with the&lt;br&gt;
# VirtualBox window, rather than being a fixed (small) size.&lt;br&gt;
"&lt;br&gt;
[/code]&lt;/p&gt;
&lt;h2&gt;Shared clipboard&lt;/h2&gt;
&lt;p&gt;One extra useful thing to do is enable the shared clipboard, which
allows copy-and-paste from the host to the guest, vice versa, or both.
Make sure the VM is shut down, select it in the VirtualBox Manager
window, go to "Settings", "General", "Advanced" and select from the
"Shared Clipboard" drop-down. Detailed descriptions with screen shots
are
&lt;a href="http://www.howtogeek.com/187535/how-to-copy-and-paste-between-a-virtualbox-host-machine-and-a-guest-machine"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="linux"></category><category term="ubuntu"></category><category term="virtual machine"></category><category term="virtualbox"></category><category term="vm"></category></entry><entry><title>CUDA basics part 2</title><link href="http://0x7df.github.io/cuda-basics-part-2.html" rel="alternate"></link><published>2015-04-21T20:58:00+01:00</published><updated>2015-04-21T20:58:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-04-21:/cuda-basics-part-2.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently, I posted &lt;a href="https://0x7df.wordpress.com/2015/04/05/cuda-basics-part-1/" title="CUDA basics part 1"&gt;a basic introduction to CUDA C for programming
GPUs&lt;/a&gt;,
which showed how to do a vector addition. This illustrated some of the
CUDA basic syntax, but it wasn't a complex- enough example to bring to
light some of the trickier issues to do with designing algorithms …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently, I posted &lt;a href="https://0x7df.wordpress.com/2015/04/05/cuda-basics-part-1/" title="CUDA basics part 1"&gt;a basic introduction to CUDA C for programming
GPUs&lt;/a&gt;,
which showed how to do a vector addition. This illustrated some of the
CUDA basic syntax, but it wasn't a complex- enough example to bring to
light some of the trickier issues to do with designing algorithms
carefully to minimise data movement. Here we move on to the more
complicated algorithm for matrix multiplication, &lt;em&gt;C = AB&lt;/em&gt;, where we'll
see that elements of the matrices get used multiple times, so we'll want
to put them in the shared memory to minimise the number of times they
get retrieved from the much slower global (or device) memory. We'll also
see that, because data that a thread puts into shared memory is only
accessible by the other threads in the same thread block, we need to be
careful how we do this.&lt;/p&gt;
&lt;h2&gt;Naive matrix multiplication in CUDA&lt;/h2&gt;
&lt;p&gt;First, let's ignore those concerns and put together the simplest
implementation of matrix multiplication; then we'll analyse the memory
access, and see how we can improve on it.&lt;/p&gt;
&lt;p&gt;Before we begin, however, some-error checking. Below is a function-like
C macro that will be used to surround each CUDA statement we execute
with a check of the return code. The return code is set to the
pre-defined variable &lt;code&gt;cudaSuccess&lt;/code&gt; if the statement executed
successfully, or an error value otherwise. (Hence, we declare the
variable that will contain the CUDA statement return to be type
&lt;code&gt;cudaError_t&lt;/code&gt;.) Where an error value is returned, we pass this to the
CUDA function &lt;code&gt;cudaGetErrorString&lt;/code&gt;, which returns an error message that
we can print.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\#define cudaCheck(stmt)                                               
\\  
    do \\  
{                                                                \\  
        cudaError_t err = stmt;                                       
\\  
        if (err != cudaSuccess) \\  
{                          \\  
     printf("ERROR: failed to run %s\\n", stmt);                \\  
      printf("ERROR: CUDA error %s\\n", cudaGetErrorString(err)); \\  
      return -1;                                                 \\  
    }                                                              \\  
} while (0)&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Simple matrix multiplication kernel&lt;/h3&gt;
&lt;h3&gt;&lt;a href="https://0x7df.files.wordpress.com/2015/03/tiled_matrix_multiplication_1.png"&gt;&lt;img alt="tiled_matrix_multiplication_1" src="https://0x7df.files.wordpress.com/2015/03/tiled_matrix_multiplication_1.png?w=296"&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now for the kernel function. The way we've chosen to divide this problem
up amongst threads is to have each thread calculate a single element in
the output vector, &lt;em&gt;C&lt;/em&gt;. Mathematically, for an &lt;em&gt;m&lt;/em&gt;-by-&lt;em&gt;n&lt;/em&gt; matrix &lt;em&gt;A&lt;/em&gt; and
an &lt;em&gt;n&lt;/em&gt;-by-&lt;em&gt;p&lt;/em&gt; matrix &lt;em&gt;B&lt;/em&gt;, this is:&lt;/p&gt;
&lt;div class="math"&gt;$$ C_{i,j} = \sum_{k=1}^n A_{i,k}B_{k,j} $$&lt;/div&gt;
&lt;p&gt;for each of the &lt;em&gt;m&lt;/em&gt;-by-&lt;em&gt;p&lt;/em&gt; elements in &lt;em&gt;C&lt;/em&gt;. This is illustrated in the
figure, where the input matrices &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt; are shown in grey, and the
result, matrix &lt;em&gt;C&lt;/em&gt;, in blue; a single element of &lt;em&gt;C&lt;/em&gt; is highlighted in
red, and the corresponding row and column of &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt; are also
highlighted.&lt;/p&gt;
&lt;p&gt;We implement this in CUDA C as follows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__global__ void matrixMultiply(float *A, float *B,  
float *C, int numACols,  
int numBRows, int numBCols,  
    int numCRows, int numCCols)  
{  
        
// Get the row and column indices of the single  
// element of the output matrix that this thread  
// is dealing with  
    int col = threadIdx.x + blockDim.x*blockIdx.x;  
    int row = threadIdx.y + blockDim.y*blockIdx.y;  
      
// Calculate the output matrix element  
    if ((row &amp;lt; numCRows) &amp;amp;&amp;amp; (col &amp;lt; numCCols))  
{  
        float Ctmp = 0;  
        for (int k = 0; k &amp;lt; numACols; ++k)  
{  
            Ctmp += A[row*numACols+k]*B[k*numBCols+col];  
        }  
        C[row*numCCols + col] = Ctmp;  
    }  
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is reasonably simple. Each thread figures out which output matrix
element it is responsible for, simply by checking the thread indices. It
proceeds only if the element indices are within the correct bounds of
the output matrix, which may not be the case if there are more threads
than elements (because we have to have a whole number of thread blocks).
Where they are, it retrieves the correct row of &lt;em&gt;A&lt;/em&gt; and column of &lt;em&gt;B&lt;/em&gt;,
and calculates the corresponding single element of &lt;em&gt;C&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Naive matrix multiplication host code&lt;/h3&gt;
&lt;p&gt;For completeness, here is the host code. The new things here that we
didn't see in the vector multiplication example are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The use of the C macro &lt;code&gt;cudaCheck&lt;/code&gt; (defined above) for error
    checking&lt;/li&gt;
&lt;li&gt;The fact that the grid and the thread blocks are two-dimensional&lt;/li&gt;
&lt;li&gt;The call to &lt;code&gt;cudaDeviceSynchronize()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;`&lt;/p&gt;
&lt;p&gt;int main(int argc, char **argv) {&lt;/p&gt;
&lt;p&gt;float &lt;em&gt;hostA, &lt;/em&gt;hostB, &lt;em&gt;hostC;&lt;br&gt;
  float &lt;/em&gt;deviceA, &lt;em&gt;deviceB, &lt;/em&gt;deviceC;&lt;br&gt;
  int numARows, numACols; // Rows, columns in the matrix A&lt;br&gt;
  int numBRows, numBCols; // Rows, columns in the matrix B&lt;br&gt;
  int numCRows, numCCols; // Rows, columns in the matrix C&lt;br&gt;
    int sizeA, sizeB, sizeC; // Size in memory of each of A, B and C&lt;br&gt;
    int gridXSize, gridYSize; // Number of thread blocks in x, y
dimensions of grid&lt;br&gt;
    int blockSize; // Number of threads in block&lt;/p&gt;
&lt;p&gt;// Allocate and populate the A and B matrices&lt;br&gt;
// hostA and hostB, and get numARows, numACols,&lt;br&gt;
// numBRows, numBCols&lt;/p&gt;
&lt;p&gt;// Set numCRows and numCCols&lt;br&gt;
    numCRows = numARows;&lt;br&gt;
    numCCols = numBCols;&lt;br&gt;
&lt;br&gt;
  // Allocate the C matrix&lt;br&gt;
    hostC = (float&lt;em&gt;)malloc(numCRows&lt;/em&gt;numCCols&lt;em&gt;sizeof(float));&lt;br&gt;
&lt;br&gt;
// Allocate GPU memory&lt;br&gt;
sizeA = numARows&lt;/em&gt;numACols&lt;em&gt;sizeof(float);&lt;br&gt;
sizeB = numBRows&lt;/em&gt;numBCols&lt;em&gt;sizeof(float);&lt;br&gt;
sizeC = numCRows&lt;/em&gt;numCCols&lt;em&gt;sizeof(float);&lt;br&gt;
cudaCheck(cudaMalloc((void &lt;strong&gt;) &amp;amp;deviceA, sizeA));&lt;br&gt;
cudaCheck(cudaMalloc((void &lt;/strong&gt;) &amp;amp;deviceB, sizeB));&lt;br&gt;
   cudaCheck(cudaMalloc((void &lt;/em&gt;*) &amp;amp;deviceC, sizeC));&lt;/p&gt;
&lt;p&gt;// Copy data to the GPU&lt;br&gt;
   cudaCheck(cudaMemcpy(deviceA, hostA, sizeA,
cudaMemcpyHostToDevice));&lt;br&gt;
   cudaCheck(cudaMemcpy(deviceB, hostB, sizeB,
cudaMemcpyHostToDevice));&lt;/p&gt;
&lt;p&gt;// Initialize the grid and block dimensions&lt;br&gt;
   blockSize = 16;&lt;br&gt;
   gridXSize = (numCCols-1)/blockSize + 1;&lt;br&gt;
   gridYSize = (numCRows-1)/blockSize + 1;&lt;br&gt;
   dim3 dimGrid(gridXSize, gridYSize, 1);&lt;br&gt;
   dim3 dimBlock(blockSize, blockSize, 1);&lt;br&gt;
&lt;br&gt;
   // Launch the GPU Kernel&lt;br&gt;
   matrixMultiply&amp;lt;&amp;lt;&lt;dimGrid,dimBlock&gt;&amp;gt;&amp;gt;(deviceA, deviceB,&lt;br&gt;
deviceC, numACols,&lt;br&gt;
numBRows, numBCols,&lt;br&gt;
                               numCRows, numCCols);&lt;br&gt;
  cudaDeviceSynchronize();&lt;/p&gt;
&lt;p&gt;// Copy the GPU memory back to the CPU&lt;br&gt;
   cudaCheck(cudaMemcpy(hostC, deviceC, sizeC,
cudaMemcpyDeviceToHost));&lt;/p&gt;
&lt;p&gt;// Free the GPU memory&lt;br&gt;
   cudaCheck(cudaFree(deviceA));&lt;br&gt;
   cudaCheck(cudaFree(deviceB));&lt;br&gt;
   cudaCheck(cudaFree(deviceC));&lt;br&gt;
&lt;br&gt;
  // Do something with the solution, free the host memory, return&lt;/p&gt;
&lt;p&gt;}&lt;br&gt;
`&lt;/p&gt;
&lt;p&gt;The call to &lt;code&gt;cudaDeviceSynchronize()&lt;/code&gt; ensures that all threads have
finished before the host code proceeds any further.&lt;/p&gt;
&lt;h3&gt;Performance analysis of the naive implementation&lt;/h3&gt;
&lt;p&gt;Clearly, each of the &lt;em&gt;mp&lt;/em&gt; elements of &lt;em&gt;C&lt;/em&gt; requires a full row of &lt;em&gt;A&lt;/em&gt; and
a full column of &lt;em&gt;B&lt;/em&gt; - both of length &lt;em&gt;n&lt;/em&gt; - to be read from memory, and
one value to be written back. Hence there are &lt;em&gt;(2n + 1)mp&lt;/em&gt; memory
accesses. Re-examining the kernel, we see that there are two floating
point operations per iteration of the inner loop (one multiply and one
add), and &lt;em&gt;n&lt;/em&gt; iterations of that loop, which is completed for each of
the &lt;em&gt;mp&lt;/em&gt; elements in the product matrix. Hence, there are 2&lt;em&gt;nmp&lt;/em&gt; FLOP,
and the CGMA is 2&lt;em&gt;n&lt;/em&gt;/(2&lt;em&gt;n&lt;/em&gt; + 1); which is effectively 1, except when the
matrices are very small. With a memory bandwidth of 150 GB/s, the
algorithm is limited to just under 150/8 = 20 GFLOP/s (assuming double
precision), which is still less than 2% of the available compute of our
nominal 1 TFLOP GPU.&lt;/p&gt;
&lt;h2&gt;Improving on the naive implementation&lt;/h2&gt;
&lt;p&gt;However, it turns out that we can improve on this. So far, all the data
storage has been in global memory, because that's the only permissible
location for CUDA memory allocations in the host code, and that's where
the data stays unless we explicitly move it, once inside the kernel
function (we'll see how later). It's also clear that in this algorithm
data gets re-used frequently. Every row of matrix &lt;em&gt;A&lt;/em&gt; is used &lt;em&gt;p&lt;/em&gt; times
and every column of matrix &lt;em&gt;B&lt;/em&gt; is used &lt;em&gt;m&lt;/em&gt; times. If we contrive an
algorithm that gets the necessary data into shared memory before it is
needed, and keeps it there while it is being re-used, then we can
clearly reduce the global memory accesses.&lt;/p&gt;
&lt;p&gt;However, it's not as though we can read &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt; into shared memory
and have them accessible to all the threads working on the computation;
shared memory isn't globally accessible, despite the name, but is
instead local to a single streaming multiprocessor, and only 'shared'
amongst the threads in whichever thread block is currently assigned to
the SM. Hence our goal is to ensure that the threads in a given thread
block have the subset of input data they need available in their SM's
shared memory, under the general assumption that because of the small
size of the shared memory, not all of the needed data will fit in at
once.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://0x7df.files.wordpress.com/2015/03/tiled_matrix_multiplication_2.png"&gt;&lt;img alt="tiled_matrix_multiplication_2" src="https://0x7df.files.wordpress.com/2015/03/tiled_matrix_multiplication_2.png?w=285"&gt;&lt;/a&gt;Consider
a thread block covering an area of the product matrix &lt;em&gt;C&lt;/em&gt;, which is &lt;em&gt;a&lt;/em&gt;
rows high by &lt;em&gt;a&lt;/em&gt; columns wide, with the top-left element being &lt;em&gt;i&lt;/em&gt;,&lt;em&gt;j&lt;/em&gt;
and the bottom-right therefore being &lt;em&gt;i+a,j+a&lt;/em&gt;. This is shown in the
figure. To compute these values, the rows &lt;em&gt;i, i+1, ..., i+a&lt;/em&gt; of matrix
&lt;em&gt;A&lt;/em&gt; and columns &lt;em&gt;j, j+1, ..., j+a&lt;/em&gt; of matrix &lt;em&gt;B&lt;/em&gt; are required,
comprising horizontal and vertical strips, respectively, of dimension &lt;em&gt;a
× n&lt;/em&gt; elements. We assume in general these strips comprise too much data
to move all together to shared memory. Instead, we move a block of
elements from the strip of &lt;em&gt;A&lt;/em&gt;, and a block of elements from the strip
of &lt;em&gt;B&lt;/em&gt; - i.e. two blocks of size &lt;em&gt;a&lt;/em&gt; × &lt;em&gt;a&lt;/em&gt;, one from each matrix; we
will refer to these as &lt;em&gt;tiles&lt;/em&gt;. Performing matrix multiplication on
these two tiles creates a tile of partial sums in the &lt;em&gt;C&lt;/em&gt; elements. When
the next pair of tiles from &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt; are retrieved, the partial sums
are further incremented, until eventually the full strips have been
processed and the final answers are available.&lt;/p&gt;
&lt;p&gt;There is still some duplication of global memory accesses, because any
given strip of &lt;em&gt;A&lt;/em&gt; will be required by all the thread blocks of the &lt;em&gt;C&lt;/em&gt;
matrix that share the same row indices; and any given strip of &lt;em&gt;B&lt;/em&gt; will
be required by all the thread blocks of the &lt;em&gt;C&lt;/em&gt; matrix that share the
same column indices. However, we can see that there is at least &lt;em&gt;some&lt;/em&gt;
re-use of data in shared memory; each sub-row of the tile from &lt;em&gt;A&lt;/em&gt; gets
re-used &lt;em&gt;a&lt;/em&gt; times (for the &lt;em&gt;a&lt;/em&gt; elements of the output matrix that have
the same row index), as does each sub-column of the tile from &lt;em&gt;B&lt;/em&gt;. This
data re-use reduces the retrievals from global memory by a factor of
&lt;em&gt;a&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here is the kernel for tiled matrix multiplication.&lt;/p&gt;
&lt;p&gt;`&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;global&lt;/strong&gt; void matrixMultiply(float &lt;em&gt;A, float &lt;/em&gt;B, float *C,&lt;br&gt;
int numARows, int numACols,&lt;br&gt;
int numBRows, int numBCols,&lt;br&gt;
int numCRows, int numCCols) {&lt;/p&gt;
&lt;p&gt;// Define device shared-memory storage for&lt;br&gt;
// tiles of the matrices&lt;br&gt;
// Scope: each tile is accessible by a single&lt;br&gt;
// block of threads&lt;br&gt;
&lt;strong&gt;shared&lt;/strong&gt; float tileA[TILE_WIDTH][TILE_WIDTH];&lt;br&gt;
&lt;strong&gt;shared&lt;/strong&gt; float tileB[TILE_WIDTH][TILE_WIDTH];&lt;/p&gt;
&lt;p&gt;// Define abbreviated variables for the&lt;br&gt;
// block and thread IDs&lt;br&gt;
// Scope: stored in registers and therefore&lt;br&gt;
// accessible by single threads&lt;br&gt;
int bx =  blockIdx.x;&lt;br&gt;
int by =  blockIdx.y;&lt;br&gt;
int tx =  threadIdx.x;&lt;br&gt;
int ty =  threadIdx.y;&lt;/p&gt;
&lt;p&gt;// Each thread is responsible for a single&lt;br&gt;
// element of the product matrix C.&lt;br&gt;
// Determine which element, from the block&lt;br&gt;
// and thread indices&lt;br&gt;
int row = by&lt;em&gt;TILE_WIDTH + ty;&lt;br&gt;
int col = bx&lt;/em&gt;TILE_WIDTH + tx;&lt;/p&gt;
&lt;p&gt;// Initialise a temp variable for the solution&lt;br&gt;
// for this matrix element&lt;br&gt;
// Scope: in register, private to individual thread&lt;br&gt;
float Ctemp = 0;&lt;/p&gt;
&lt;p&gt;// Loop over the tiles in the A and B matrices&lt;br&gt;
// that will contribute to the calculation of&lt;br&gt;
// this element in the product matrix. We are&lt;br&gt;
// looping over columns of A for a given row&lt;br&gt;
// (equal to the row index of the C element),&lt;br&gt;
// and over rows of the B matrix for a given&lt;br&gt;
// column index (equal to the column index of&lt;br&gt;
// the C element)&lt;br&gt;
int numTiles = (numACols-1)/TILE_WIDTH + 1;&lt;/p&gt;
&lt;p&gt;for (int tl = 0; tl &amp;lt; numTiles; ++tl) {&lt;/p&gt;
&lt;p&gt;// Load the tiles into shared memory, so all&lt;br&gt;
// threads in the block have access to the&lt;br&gt;
// whole tiles. Each thread needs to load only&lt;br&gt;
// a single value of each of the A and B tiles.&lt;br&gt;
if ((row &amp;lt; numARows) &amp;amp;&amp;amp; (tl&lt;em&gt;TILE_WIDTH + tx &amp;lt; numACols)) {&lt;br&gt;
tileA[ty][tx] = A[row&lt;/em&gt;numACols + tl&lt;em&gt;TILE_WIDTH + tx];&lt;br&gt;
} else {&lt;br&gt;
tileA[ty][tx] = 0.;&lt;br&gt;
}&lt;br&gt;
if ((tl&lt;/em&gt;TILE_WIDTH + ty &amp;lt; numBRows) &amp;amp;&amp;amp; (col &amp;lt; numBCols)) {&lt;br&gt;
tileB[ty][tx] = B[(tl&lt;em&gt;TILE_WIDTH + ty)&lt;/em&gt;numBCols + col];&lt;br&gt;
} else {&lt;br&gt;
tileB[ty][tx] = 0.;&lt;br&gt;
}&lt;br&gt;
__syncthreads();&lt;/p&gt;
&lt;p&gt;// Loop over the elements within the A and B&lt;br&gt;
// tiles that contribute to this element of C&lt;br&gt;
for (int k = 0; k &amp;lt; TILE_WIDTH; ++k) {&lt;br&gt;
Ctemp += tileA[ty][k] * tileB[k][tx];&lt;br&gt;
}&lt;br&gt;
__syncthreads();&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;// Write the final value into the output array&lt;br&gt;
if ((row &amp;lt; numARows) &amp;amp;&amp;amp; (col &amp;lt; numBCols)) {&lt;br&gt;
C[row*numBCols + col] = Ctemp;&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
`&lt;/p&gt;
&lt;p&gt;In each thread block, the &lt;em&gt;a&lt;/em&gt;^2^ threads load two float values each and
perform 2&lt;em&gt;a&lt;/em&gt; floating-point operations to compute the dot product of the
row and column sub-sections (both of length &lt;em&gt;a&lt;/em&gt;) required for the single
output matrix element it holds. Hence there are 2&lt;em&gt;a&lt;/em&gt; computations for
two memory loads, which gives a CGMA ratio of &lt;em&gt;a&lt;/em&gt;. For the naive
implementation it was 1, so we have improved the CGMA by a factor of &lt;em&gt;a&lt;/em&gt;
by tiling the data.&lt;/p&gt;
&lt;p&gt;There are a few other things to note in the kernel.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The use of the &lt;code&gt;__shared__&lt;/code&gt; identifier in the allocations statements
    for &lt;code&gt;tileA&lt;/code&gt; and &lt;code&gt;tileB&lt;/code&gt; (which are the temporary storage arrays for
    the tiles of &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt;). This keyword is how we cause the storage
    to be allocated in shared memory (and therefore it can be used only
    in &lt;code&gt;__device__&lt;/code&gt; functions, not &lt;code&gt;__host__&lt;/code&gt; functions).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TILE_WIDTH&lt;/code&gt; is a C macro that we assume has been defined elsewhere.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculation of the &lt;em&gt;C&lt;/em&gt; element indices &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;col&lt;/code&gt; is done using
    &lt;code&gt;TILE_WIDTH&lt;/code&gt;, where previously &lt;code&gt;blockDim.x&lt;/code&gt; and &lt;code&gt;blockDim.y&lt;/code&gt;
    appeared. This works because we have &lt;em&gt;defined&lt;/em&gt; the tile to be the
    same size as the thread block. In theory it could be different, but
    doing so gives us the very convenient consequence that each thread
    needs only to load a single element from each of &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt; into
    shared memory to construct the tiles. This means the host code that
    calls the kernel needs to use &lt;code&gt;TILE_WIDTH&lt;/code&gt; to define the block size:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gridXSize = (numCCols-1)/TILE_WIDTH + 1;  
gridYSize = (numCRows-1)/TILE_WIDTH + 1;  
dim3 DimGrid(gridXSize, gridYSize, 1);  // gridSize blocks in the
grid  
dim3 DimBlock(TILE_WIDTH, TILE_WIDTH, 1); // blockSize threads in
each block  
matrixMultiply&amp;lt;&amp;lt;&amp;lt;DimGrid,DimBlock&amp;gt;&amp;gt;&amp;gt;(deviceA, deviceB,
deviceC, ...&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have put some logic around the statements that transfer data to
    the shared-memory tile storage. Since we can't guarantee that there
    will be a whole number of thread blocks in the matrix, this prevents
    threads whose &lt;code&gt;row&lt;/code&gt;, &lt;code&gt;col&lt;/code&gt; indices are outside the bounds of either
    &lt;em&gt;A&lt;/em&gt; or &lt;em&gt;B&lt;/em&gt; from attempting to retrieve data that isn't there.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;The appearance of &lt;code&gt;__syncthreads()&lt;/code&gt;. This is a barrier
    synchronization across all threads that ensures all threads complete
    any work up to this point before any proceed further. Without this,
    some threads could move on to begin computing matrix elements before
    other threads have loaded the correct data into shared memory, and
    out-of-date data could be used.&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="c"></category><category term="cuda"></category><category term="gpu"></category><category term="hpc"></category><category term="massively parallel"></category><category term="parallel computing"></category><category term="parallel programming"></category></entry><entry><title>Python code analysis using Prospector</title><link href="http://0x7df.github.io/python-code-analysis-using-prospector.html" rel="alternate"></link><published>2015-04-11T23:32:00+01:00</published><updated>2015-04-11T23:32:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-04-11:/python-code-analysis-using-prospector.html</id><summary type="html">&lt;p&gt;A &lt;a href="https://blog.landscape.io/prospector-python-static-analysis-for-humans.html"&gt;recent blog
post&lt;/a&gt;
I came across introduced me to
&lt;a href="https://github.com/landscapeio/prospector"&gt;Prospector&lt;/a&gt;, a
&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; &lt;a href="http://en.wikipedia.org/wiki/Static_program_analysis"&gt;static
analysis&lt;/a&gt; tool
developed by &lt;a href="https://landscape.io/"&gt;Landscape&lt;/a&gt;. From the
&lt;a href="https://prospector.readthedocs.org"&gt;documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Prospector is a tool to analyse Python code and output information
about errors, potential problems, convention violations and
complexity.&lt;/p&gt;
&lt;p&gt;It brings together the functionality of other Python analysis …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;A &lt;a href="https://blog.landscape.io/prospector-python-static-analysis-for-humans.html"&gt;recent blog
post&lt;/a&gt;
I came across introduced me to
&lt;a href="https://github.com/landscapeio/prospector"&gt;Prospector&lt;/a&gt;, a
&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; &lt;a href="http://en.wikipedia.org/wiki/Static_program_analysis"&gt;static
analysis&lt;/a&gt; tool
developed by &lt;a href="https://landscape.io/"&gt;Landscape&lt;/a&gt;. From the
&lt;a href="https://prospector.readthedocs.org"&gt;documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Prospector is a tool to analyse Python code and output information
about errors, potential problems, convention violations and
complexity.&lt;/p&gt;
&lt;p&gt;It brings together the functionality of other Python analysis tools
such as &lt;a href="http://docs.pylint.org/"&gt;Pylint&lt;/a&gt;,
&lt;a href="http://pep8.readthedocs.org/en/latest/"&gt;pep8&lt;/a&gt;, and &lt;a href="https://pypi.python.org/pypi/mccabe"&gt;McCabe
complexity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The primary aim of Prospector is to be useful ‘out of the box’. A
common complaint of other Python analysis tools is that it takes a
long time to filter through which errors are relevant or interesting
to your own coding style. Prospector provides some default profiles,
which hopefully will provide a good starting point and will be useful
straight away, and adapts the output depending on the libraries your
project uses.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So rather than configuring and individually using the various different
static analysis packages mentioned, and wading through the potentially
overwhelming output, Prospector provides a single interface to all of
them, and is set up to give a more manageable level of information
straight-away, without much user intervention. I won't repeat the sales
pitch and the basic how-to that &lt;a href="https://blog.landscape.io/prospector-python-static-analysis-for-humans.html"&gt;that
post&lt;/a&gt;
contains, but will go on from there to give a bit more information.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Cyclomatic complexity&lt;/h2&gt;
&lt;p&gt;The first thing you might come across that might not be self-evident is
the complexity rating given by the
&lt;a href="https://github.com/flintwork/mccabe"&gt;mccabe&lt;/a&gt; package. E.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; prospector --strictness low  
Messages  
========

main.py  
  Line: 13  
    mccabe: MC0001 / run is too complex (17)

Check Information  
=================  
        Started: 2015-04-11 15:59:47.759944  
       Finished: 2015-04-11 15:59:51.598176  
     Time Taken: 3.84 seconds  
      Formatter: grouped  
       Profiles: default, strictness_low, strictness_medium,
strictness_high, strictness_veryhigh, no_doc_warnings,
no_test_warnings, no_member_warnings  
     Strictness: low  
 Libraries Used:  
      Tools Run: dodgy, mccabe, pep8, profile-validator, pyflakes,
pylint  
 Messages Found: 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;cyclomatic complexity&lt;/em&gt; metric was defined by &lt;a href="http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=1702388&amp;amp;filter%3DAND%28p_IS_Number%3A35895%29"&gt;Thomas J. McCabe in a
1976
paper&lt;/a&gt;
(the PDF of which can be found
&lt;a href="http://www.literateprogramming.com/mccabe.pdf"&gt;here&lt;/a&gt;, or reproduced in
the &lt;a href="https://books.google.com/books?id=vtNWAAAAMAAJ"&gt;book "Structured Testing" which is available on Google
Books&lt;/a&gt;).
It is essentially a measure of the number of logical paths through a
piece of source code: the higher the number, the higher the complexity,
and therefore the more error-prone the code is likely to be. McCabe
suggested "10... seems like a reasonable, but not magical, upper limit".
The example given above was found to have a complexity of 17, so needs
simplifying (e.g by breaking up into more than one routine).&lt;/p&gt;
&lt;p&gt;For more detail, the McCabe paper gives a very good description which is
hard to improve on:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a program we will associate with it a directed graph that has
unique entry and exit nodes [vertices]. Each node in the graph
corresponds to a block of code in the program where the flow is
sequential and the arcs [edges] correspond to branches taken in the
program. This graph is classically known as the program control
graph... and it is assumed that each node can be reached by the entry
node and each node can reach the exit node. For example the following
is a program control graph with entry node &lt;span class="math"&gt;\( a\)&lt;/span&gt; and
exit node &lt;span class="math"&gt;\( f\)&lt;/span&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://books.google.co.uk/books?id=vtNWAAAAMAAJ&amp;pg=PA3&amp;ci=504%2C979%2C469%2C191&amp;source=bookclip"&gt;&lt;img src="https://books.google.co.uk/books/content?id=vtNWAAAAMAAJ&amp;pg=PA3&amp;img=1&amp;zoom=3&amp;hl=en&amp;sig=ACfU3U2LbN62dSqC_xZCFeoYcb-COKZ7IA&amp;ci=504%2C979%2C469%2C191&amp;edge=0" alt="Reproduced from McCabe (1976)"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The following mathematical preliminaries will be needed...&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Definition 1&lt;/em&gt;: The cyclomatic number &lt;span class="math"&gt;\( V(G)\)&lt;/span&gt; of a
graph &lt;span class="math"&gt;\( G\)&lt;/span&gt; with &lt;span class="math"&gt;\( n\)&lt;/span&gt; vertices,
&lt;span class="math"&gt;\( e\)&lt;/span&gt; edges and &lt;span class="math"&gt;\( p\)&lt;/span&gt; connected
components is&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$ V(G) = e - n + p $$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Theorem 1&lt;/em&gt;: In a strongly connected graph &lt;span class="math"&gt;\( G\)&lt;/span&gt; the
cyclomatic number is equal to the maximum number of linearly
independent circuits.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note here that at this stage we are concerned with &lt;em&gt;circuits&lt;/em&gt; - i.e.
closed loops that start at a given node and return back to that same
node - rather than &lt;em&gt;paths&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Theorem 1 is applied to &lt;span class="math"&gt;\( G\)&lt;/span&gt; in the following way.
Imagine that the exit node &lt;span class="math"&gt;\( f\)&lt;/span&gt; branches back to the
entry node &lt;span class="math"&gt;\( a\)&lt;/span&gt;. The control graph &lt;span class="math"&gt;\( G\)&lt;/span&gt;
is now strongly connected (there is a path joining any
pair of arbitrary distinct vertices) so Theorem 1 applies. Therefore
the maximum number of linearly independent circuits in &lt;span class="math"&gt;\( G\)&lt;/span&gt;
is &lt;span class="math"&gt;\( 9 - 6 + 2\)&lt;/span&gt;. For example one could
choose the following 5 independent circuits in &lt;span class="math"&gt;\( G\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$ B1: (abefa), (beb), (abea), (acfa), (adcfa) $$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;It follows that &lt;span class="math"&gt;\( B1\)&lt;/span&gt; forms a basis for the set of
all circuits in &lt;span class="math"&gt;\( G\)&lt;/span&gt; and any path through &lt;span class="math"&gt;\( G\)&lt;/span&gt;
can be expressed as a linear combination of circuits from
&lt;span class="math"&gt;\( B1\)&lt;/span&gt;. For instance the path &lt;span class="math"&gt;\( (abeabebebef)\)&lt;/span&gt;
is expressible as &lt;span class="math"&gt;\( (abea) + 2(beb) + (abefa)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;To see how this works it's necessary to number the edges on &lt;span class="math"&gt;\( G\)&lt;/span&gt;
as in:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://books.google.co.uk/books?id=vtNWAAAAMAAJ&amp;pg=PA4&amp;ci=1%2C391%2C503%2C195&amp;source=bookclip"&gt;&lt;img src="https://books.google.co.uk/books/content?id=vtNWAAAAMAAJ&amp;pg=PA4&amp;img=1&amp;zoom=3&amp;hl=en&amp;sig=ACfU3U2LMlgVCsIny0X682Rs8LVIkP0WqA&amp;ci=1%2C391%2C503%2C195&amp;edge=0"/&gt;&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Now for each member of the basis &lt;span class="math"&gt;\( B1\)&lt;/span&gt; associate a
vector as follows:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://books.google.co.uk/books?id=vtNWAAAAMAAJ&amp;pg=PA4&amp;ci=1%2C641%2C502%2C127&amp;source=bookclip"&gt;&lt;img src="https://books.google.co.uk/books/content?id=vtNWAAAAMAAJ&amp;pg=PA4&amp;img=1&amp;zoom=3&amp;hl=en&amp;sig=ACfU3U2LMlgVCsIny0X682Rs8LVIkP0WqA&amp;ci=1%2C641%2C502%2C127&amp;edge=0"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The path &lt;span class="math"&gt;\( (abea(be)^3fa)\)&lt;/span&gt; corresponds to the
vector &lt;span class="math"&gt;\( 2004200111\)&lt;/span&gt; and the vector addition of
&lt;span class="math"&gt;\( (abefa)\)&lt;/span&gt;, &lt;span class="math"&gt;\( 2(beb)\)&lt;/span&gt; and
&lt;span class="math"&gt;\( (abea)\)&lt;/span&gt; yields the desired result.&lt;/p&gt;
&lt;p&gt;In using Theorem 1 one can choose a basis set of circuits that
correspond to paths through the program. The set &lt;span class="math"&gt;\( B2\)&lt;/span&gt;
is a basis of program paths.&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$ B2: (abef), (abeabef), (abebef), (acf), (adcf) $$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Linear combination of paths in &lt;span class="math"&gt;\( B2\)&lt;/span&gt; will also
generate any path. For example:&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$ (abea(be)^3f) = 2(abebef) - (abef) $$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$ (a(be)^2(abef) = (a(be)^2f) + (abeabef) - (abef) $$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The overall strategy will be to measure the complexity of a program by
computing the number of linearly independent paths &lt;span class="math"&gt;\( V(G)\)&lt;/span&gt;,
control the size of programs by setting an upper limit
to &lt;span class="math"&gt;\( V(G)\)&lt;/span&gt; (instead of using just physical size),
and use the cyclomatic complexity as the basis for a testing
methodology.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you want to run &lt;code&gt;mccabe&lt;/code&gt; separately from &lt;code&gt;prospector&lt;/code&gt; you can do,
using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; python -m mccabe mysourcefile.py  
(&amp;#39;If 209&amp;#39;, 2)  
(&amp;quot;13:1: &amp;#39;run&amp;#39;&amp;quot;, 8)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can add the &lt;code&gt;-d&lt;/code&gt; option (documented
&lt;a href="http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html"&gt;here&lt;/a&gt;)
to produce output that can be passed to the
&lt;a href="http://www.graphviz.org/"&gt;Graphviz&lt;/a&gt; program
&lt;a href="http://www.graphviz.org/pdf/dotguide.pdf"&gt;dot&lt;/a&gt;, which will plot the
graph. I.e.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; python -m mccabe -d example.py | \\  
dot -Tpng -o example.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;produces something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="images/example_mccabe_graph.png" style="width: 200px; height: auto;"&gt;&lt;/p&gt;
&lt;p&gt;As well as using the cyclomatic complexity as a metric of whether a
particular piece of source code needs simplifying, it can also give an
indication of the number of tests that are required. If the number of
tests is less than the complexity metric, then clearly there must be
some paths through that are not being tested. Obviously, it doesn't
necessarily follow that, if the number of tests is equal to or greater
than the complexity, then all paths &lt;em&gt;are&lt;/em&gt; being tested - more than one
test might be following a particular logical path. So having
&lt;span class="math"&gt;\( V(G)\)&lt;/span&gt; tests for a particular routine &lt;span class="math"&gt;\( G\)&lt;/span&gt;
is necessary but not sufficient to ensure full coverage of all the
paths; but it seems like a good start.&lt;/p&gt;
&lt;h2&gt;Fine-tuning using profiles in Prospector&lt;/h2&gt;
&lt;p&gt;Probably one of the most useful aspects of Prospector is the ability to
fine-tune the warnings that are issued. For instance, once the
strictness level is up to medium or above, you might start to get a lot
of warnings from Pylint about invalid constant names:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;example.py  
Line: 1  
pylint: invalid-name / Invalid constant name &amp;quot;nmats&amp;quot;  
Line: 17  
pylint: invalid-name / Invalid constant name &amp;quot;dcoeff&amp;quot;  
Line: 21  
pylint: invalid-name / Invalid constant name &amp;quot;tpower&amp;quot;  
Line: 23  
pylint: invalid-name / Invalid constant name &amp;quot;tmp0&amp;quot;  
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;a href="https://www.python.org/dev/peps/pep-0008"&gt;PEP8 style guide&lt;/a&gt;
suggests constants should be in upper case; I'm happy with this rule but
in most cases that were identified for a particular project I used a
trial run, I didn't regard the variable as a constant (e.g. like
&lt;span class="math"&gt;\( \pi\)&lt;/span&gt;, &lt;span class="math"&gt;\( c\)&lt;/span&gt;, &lt;span class="math"&gt;\( h\)&lt;/span&gt;,
etc.), but a variable that happens not to change - in a lot of the cases
just because the code is incomplete and, at some point down the line,
these will end up changing.&lt;/p&gt;
&lt;p&gt;When we move to the &lt;code&gt;veryhigh&lt;/code&gt; strictness level, another example that
comes up is trailing whitespace. I want to remove trailing whitespace
from lines of code; but because my editor automatically indents, &lt;em&gt;blank&lt;/em&gt;
lines also get indented to the same level as the most recent non-blank
line. This whitespace on otherwise blank lines counts as trailing
whitespace, so I get far too many warning messages.&lt;/p&gt;
&lt;p&gt;Thirdly, classes that have too few (fewer than two) public methods are
warned against; &lt;a href="http://stackoverflow.com/questions/14027417/what-does-pylints-too-few-public-methods-message-mean"&gt;the advice is that classes shouldn't be used for data
storage, but should include
functions&lt;/a&gt;.
If the only purpose is data storage, then a data structure like a
dictionary is more appropriate. However, again because of the
work-in-progress status of the code being analysed, I've defined certain
classes that currently only register data, but at some point
will include methods. So in the meantime I want to turn this check off.&lt;/p&gt;
&lt;p&gt;The fine-tuning is done using profiles. A profile is just a
&lt;a href="http://yaml.org/"&gt;YAML&lt;/a&gt; file with some configuration information, so you
can give different projects different rule sets by giving them their own
configuration file. An example is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;strictness&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;veryhigh&lt;/span&gt;  
&lt;span class="n"&gt;ignore&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;QA&lt;/span&gt;  
&lt;span class="n"&gt;pylint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
&lt;span class="n"&gt;disable&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;  
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;trailing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;whitespace&lt;/span&gt;  
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;too&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;few&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The really nice part is that configurations can inherit from other
configurations. For example, Prospector's different &lt;code&gt;--strictness&lt;/code&gt;
options are really just different pre-defined profiles, and the example
above has been set up to inherit from the &lt;code&gt;--strictness veryhigh&lt;/code&gt; profile.
The project-specific tweaks are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ignore the directory called &lt;code&gt;QA&lt;/code&gt; and its contents (which in this
  project contains temporary/intermediate files). This can also be
  achieved by using &lt;code&gt;--ignore-paths QA&lt;/code&gt; on the command line.&lt;/li&gt;
&lt;li&gt;Disable the &lt;code&gt;invalid-name&lt;/code&gt; messages from Pylint.&lt;/li&gt;
&lt;li&gt;Disable the &lt;code&gt;trailing-whitespace&lt;/code&gt; messages from Pylint&lt;/li&gt;
&lt;li&gt;Disable the &lt;code&gt;too-few-public-methods&lt;/code&gt; messages from Pylint&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Adding additional tools&lt;/h2&gt;
&lt;p&gt;As well as the default tools (Pylint,
&lt;a href="https://pypi.python.org/pypi/pep8"&gt;pep8&lt;/a&gt;,
&lt;a href="https://pypi.python.org/pypi/pyflakes"&gt;pyflakes&lt;/a&gt;, mccabe,
&lt;a href="https://github.com/landscapeio/dodgy"&gt;dodgy&lt;/a&gt; and profile_validator),
additional tools can be turned on either via the command line or by
adding them to a profile. The useful extra options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/pep257"&gt;pep257&lt;/a&gt;, which checks that
  docstrings conform to the &lt;a href="https://www.python.org/dev/peps/pep-0257/"&gt;PEP257 docstring conventions
  guide&lt;/a&gt;. Use &lt;code&gt;--with-tool
  pep257&lt;/code&gt; on the command line, or add &lt;code&gt;run: true&lt;/code&gt; to a &lt;code&gt;pep257:&lt;/code&gt;
  section in a profile file.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/vulture"&gt;vulture&lt;/a&gt;, which checks for
  'dead code' (unused variables, functions, classes, etc.). This
  requires installation first, via &lt;code&gt;pip install
  prospector[with_vulture]&lt;/code&gt;. (NB this syntax doesn't work in a &lt;a href="http://zsh.sourceforge.net/"&gt;Z
  shell&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/pyroma"&gt;pyroma&lt;/a&gt;, used for checking
  that Python packaging best practices are being followed. Requires
  &lt;code&gt;pip install prospector[with_pyroma]&lt;/code&gt;. Note that using pyroma
  implies the use of pep257.&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="cyclomatic complexity"></category><category term="graph theory"></category><category term="mccabe"></category><category term="pep8"></category><category term="prospector"></category><category term="pylint"></category><category term="python"></category><category term="static analysis"></category><category term="yaml"></category></entry><entry><title>CUDA basics part 1</title><link href="http://0x7df.github.io/cuda-basics-part-1.html" rel="alternate"></link><published>2015-04-05T20:59:00+01:00</published><updated>2015-04-05T20:59:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-04-05:/cuda-basics-part-1.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/CUDA"&gt;CUDA (Compute Unified Device
Architecture)&lt;/a&gt;is an extension of
&lt;a href="http://www.tutorialspoint.com/cprogramming/c_overview.htm"&gt;C/C++&lt;/a&gt;,
developed by &lt;a href="http://www.nvidia.com/page/home.html"&gt;NVIDIA&lt;/a&gt;, the
&lt;a href="http://www.webopedia.com/TERM/G/GPU.html"&gt;GPU&lt;/a&gt;manufacturer, for
programming their devices. (There is also a &lt;a href="https://www.pgroup.com/resources/cudafortran.htm"&gt;Fortran
version&lt;/a&gt;, developed by
&lt;a href="http://www.pgroup.com/"&gt;PGI&lt;/a&gt;.) The purpose of CUDA is to allow
developers to program GPUs much more easily than previously, and since
its …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/CUDA"&gt;CUDA (Compute Unified Device
Architecture)&lt;/a&gt;is an extension of
&lt;a href="http://www.tutorialspoint.com/cprogramming/c_overview.htm"&gt;C/C++&lt;/a&gt;,
developed by &lt;a href="http://www.nvidia.com/page/home.html"&gt;NVIDIA&lt;/a&gt;, the
&lt;a href="http://www.webopedia.com/TERM/G/GPU.html"&gt;GPU&lt;/a&gt;manufacturer, for
programming their devices. (There is also a &lt;a href="https://www.pgroup.com/resources/cudafortran.htm"&gt;Fortran
version&lt;/a&gt;, developed by
&lt;a href="http://www.pgroup.com/"&gt;PGI&lt;/a&gt;.) The purpose of CUDA is to allow
developers to program GPUs much more easily than previously, and since
its inception in 2007, the use of GPUs has opened up beyond just
graphics to more general, e.g. scientific, computing, which is often
referred to as general-purpose GPU computing -
&lt;a href="http://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units"&gt;GPGPU&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;CUDA is proprietary, which in my opinion disqualifies it from use in
major code development. The lifetime of high-performance scientific and
engineering codes is typically decades, and given &lt;a href="http://dx.doi.org/10.1017/S0962492912000050"&gt;the uncertainty
surrounding supercomputing
architectures&lt;/a&gt;, a credible
candidate for a programming model needs to be supported by a wide range
of compilers and on a wide range of platforms. (A similar programming
language is &lt;a href="https://www.khronos.org/opencl/"&gt;OpenCL&lt;/a&gt;, which as the name
suggests, is an open standard, being developed by a consortium of
organisations.) However, the &lt;a href="https://www.coursera.org/course/hetero"&gt;point has been
made&lt;/a&gt;that CUDA is a useful
teaching vehicle for the basic concepts of programming heterogeneous,
many-core supercomputers.&lt;/p&gt;
&lt;h2&gt;Heterogeneous Computing&lt;/h2&gt;
&lt;p&gt;Let's assume here that the model is heterogeneous; i.e. there are CPUs
(hosts) and GPUs (devices) working in conjunction, and that the
application runs on the CPU host, handing specific, highly
&lt;a href="http://queue.acm.org/detail.cfm?id=1365499"&gt;data-parallel&lt;/a&gt; parts of the
program off to the device as and when appropriate. Also , we assume
initially that the CPU part is basically serial; that is, we're not
combining CUDA with &lt;a href="http://www.mpi-forum.org/"&gt;MPI&lt;/a&gt; at this stage.&lt;/p&gt;
&lt;p&gt;To exploit this kind of architecture, it's necessary to &lt;em&gt;kernelise&lt;/em&gt; the
code: identify parts of it suitable for a high level of concurrency,
turn them into kernel functions that are handed over to the GPU device.
These will typically be portions of the code that are highly
data-parallel - i.e. loops over large sets of data items where the
iterations of the loops are independent of each other. A nice example is
a simple "DAXPY" loop (i.e. a double precision &lt;em&gt;Ax&lt;/em&gt; + &lt;em&gt;y&lt;/em&gt; vector
addition) or "DAXBY" loop (&lt;em&gt;Ax&lt;/em&gt; × &lt;em&gt;y&lt;/em&gt;), implemented here in C:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void vectorAdd(int n, double a, double *x, double *y) {
    for (int i = 0; i &amp;lt; n; ++i) {  
        y[i] = a*x[i] + y[i];
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the element indices are all &lt;code&gt;i&lt;/code&gt;; there's no use of data from
previous iterations of the loop. It's this absence of &lt;em&gt;loop-carried
dependencies&lt;/em&gt; that makes this loop data-parallel, and therefore suitable
for threading. Essentially, we can calculate all the iterations of the
loop independently, in any order; hence we can pass it to a GPU and
invoke as many threads as there are elements, to do the work as
concurrently as possible.&lt;/p&gt;
&lt;h2&gt;GPU hardware overview&lt;/h2&gt;
&lt;h3&gt;Threading&lt;/h3&gt;
&lt;p&gt;This post is about how to program using CUDA, but to understand what's
going on it's necessary to have a minimum of knowledge about the
hardware architecture. A single GPU is comprised of a set of what are
known, in NVIDIA's terminology, as &lt;em&gt;streaming multiprocessors&lt;/em&gt; (SMs);
these are, according to &lt;a href="http://booksite.elsevier.com/9780123838728/"&gt;Hennessy and
Patterson&lt;/a&gt;, "multithreaded
&lt;a href="http://en.wikipedia.org/wiki/SIMD"&gt;SIMD&lt;/a&gt; processors", with the nearest
non-GPU equivalent being a multithreaded &lt;a href="http://www.phy.ornl.gov/csep/ca/node24.html"&gt;vector
processor&lt;/a&gt;. The typical
number of SMs in one GPU is between 2 and 30, varying from generation to
generation. Each SM can support a maximum number of threads at one time,
typically in the low thousands (e.g. 1,536) ; so overall the GPU can
handle tens of thousands of threads simultaneously. A key aspect of the
GPU is that, as well as being massively multithreaded, it also has a
SIMD aspect. The threads assigned to a streaming multiprocessor are
grouped into sets of 32 threads, called &lt;em&gt;warps&lt;/em&gt;. Each 32-thread warp is
dealt with by the SM in a SIMD fashion; that is, each instruction is
fetched once and executed for all 32 threads at the same time. So all
the threads in a particular warp are progressed in lock-step. Hence
there are two types of parallelism at play in a GPU:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Multithreading (a kind of&lt;a href="en.wikipedia.org/wiki/SPMD"&gt;SPMD - single program/multiple data
    parallelism&lt;/a&gt;), where different
    processors execute the same program independently, on different
    subsets of the data; and&lt;/li&gt;
&lt;li&gt;SIMD (single instruction/multiple data), where each processor is
    executing the same instruction at the same time as every other.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that the SIMD aspect causes problems in cases where, as a result of
the logic of the particular bit of code being executed, different
threads within the same warp end up going down different paths through
the code, and therefore require different instructions. The GPU can
handle this &lt;em&gt;control divergence&lt;/em&gt;, but execution becomes inefficient; so
it's something the programmer needs to be aware of and think explicitly
about avoiding.&lt;/p&gt;
&lt;h3&gt;Memory&lt;/h3&gt;
&lt;p&gt;As will become clear, it's also vitally important to understand the
memory hierarchy of a GPU. As well as, and separate from, the host CPU's
memory (and we'll ignore the
&lt;a href="http://www.bottomupcs.com/memory.html"&gt;hierarchy&lt;/a&gt;there), the GPU device
has several different levels of memory:&lt;/p&gt;
&lt;p&gt;&lt;img alt="gpu_layout" src="https://0x7df.files.wordpress.com/2015/02/gpu_layout.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The main &lt;em&gt;global memory&lt;/em&gt; or &lt;em&gt;device memory&lt;/em&gt;, which is accessible to
    all the threads on the GPU,&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;constant memory&lt;/em&gt;, also globally accessible,&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;shared memory&lt;/em&gt;, of which each streaming multiprocessor has its
    own private bank, accessible to only the threads on that SM, and&lt;/li&gt;
&lt;li&gt;The per-thread &lt;em&gt;private memory&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On reaching a portion of the code that is data parallel and suitable for
passing to the GPU, the programmer allocates memory in the device's
global memory, and then uses CUDA commands to transfer data items from
the CPU host memory into the global memory. Calculated quantities then
need to be explicitly transferred back again. This is where we see the
first key difference from &lt;a href="www.openmp.org"&gt;OpenMP&lt;/a&gt; threading; in that
model, variables and arrays in memory are declared as either private
(each thread has its own copy) or global (every thread sees the same bit
of memory); but either way they all reside on the same memory hardware.
In CUDA we explicitly have to transfer data from CPU to GPU memory space
and back again.&lt;/p&gt;
&lt;p&gt;The global (device) memory is the only memory that the host CPU can read
and write to. Transfers into shared memory and private memory can be
done only by the GPU itself.&lt;/p&gt;
&lt;h2&gt;Threads and blocks&lt;/h2&gt;
&lt;p&gt;When we implement a CUDA kernel function, which is a chunk of highly
data-parallel code that will be handled by a large set of threads
working concurrently, we arrange the threads into a &lt;em&gt;grid&lt;/em&gt; of &lt;em&gt;thread
blocks&lt;/em&gt;. We'll worry about why this is, later; for now just note that a
grid is a three-dimensional construction of &lt;em&gt;l ×&lt;/em&gt; &lt;em&gt;m&lt;/em&gt; × &lt;em&gt;n&lt;/em&gt; thread
blocks, each of which is three-dimensional grouping of &lt;em&gt;i&lt;/em&gt; × &lt;em&gt;j&lt;/em&gt; × &lt;em&gt;k&lt;/em&gt;
threads. The actual values of &lt;em&gt;i&lt;/em&gt;, &lt;em&gt;j&lt;/em&gt;, ... to be used are defined in
the host code by the special CUDA statements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dim3 gridDims(l,m,n);  
dim3 blockDims(i,j,l);  
myKernel&amp;lt;&amp;lt;&amp;lt;gridDims,blockDims&amp;gt;&amp;gt;&amp;gt;(args);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The third statement launches the kernel function called &lt;code&gt;myKernel&lt;/code&gt;, and
is a standard C function call statement - i.e. &lt;code&gt;myKernel(args)&lt;/code&gt; - but
with the special CUDA notation - &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;gridDims, blockDims&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; - rather
unpleasantly intruding between the function name and its arguments. The
previous two lines define the variables &lt;code&gt;gridDims&lt;/code&gt; and &lt;code&gt;blockDims&lt;/code&gt; as
having &lt;code&gt;dim3&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;CUDA requires that the blocks be independent of each other; there is no
way to communicate between different blocks that are executing.&lt;/p&gt;
&lt;p&gt;The reason for grouping threads together into blocks, is so that the
streaming multiprocessor can switch between threads (or really between
warps, which are sets of 32 threads that are always executed in
lock-step) - this means that one warp is waiting for a memory access,
the SM can switch to another in the meantime.&lt;/p&gt;
&lt;h2&gt;Vector addition - host code&lt;/h2&gt;
&lt;p&gt;The host C code running on the CPU will look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;int main(int argc, char **argv) {
    int n, gridSize;  
    float *hostX, *hostY;  
    float *deviceX, *deviceY;  
    cudaError_t err;

    // Allocate and populate the hostX and hostY vectors

    // Allocate GPU memory  
    int size = n*sizeof(float);  
    err = cudaMalloc((void **) &amp;amp;deviceX, size);  
    err = cudaMalloc((void **) &amp;amp;deviceY, size);

    // Copy memory to the GPU  
    err = cudaMemcpy(deviceX, hostX, size, cudaMemcpyHostToDevice);  
    err = cudaMemcpy(deviceY, hostY, size, cudaMemcpyHostToDevice);

    // Initialize the grid and block dimensions  
    dim3 gridDims(ceil(n/256),1,1);  
    dim3 blockDims(256,1,1);

    // Launch the GPU Kernel  
    myKernel&amp;lt;&amp;lt;&amp;lt;gridDims,blockDims&amp;gt;&amp;gt;&amp;gt;(n, deviceX, deviceY);

    // Copy the GPU memory back to the CPU  
    err = cudaMemcpy(hostY, deviceY, size, cudaMemcpyDeviceToHost);

    // Free the GPU memory  
    err = cudaFree(deviceX);  
    err = cudaFree(deviceY);

    // Do something with the solution, free the host  
    // arrays, return  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the definition of the grid and block dimensions, we've chosen to have
256 threads per block, and therefore &lt;em&gt;n&lt;/em&gt;/256 blocks (and we've used the
ceiling function to make sure the number of blocks is rounded &lt;em&gt;up&lt;/em&gt; to
the nearest integer if &lt;em&gt;n&lt;/em&gt; isn't divisible by 256). The grid and the
blocks are one-dimensional, for simplicity.&lt;/p&gt;
&lt;p&gt;Hopefully, the various CUDA functions that are called - &lt;code&gt;cudaMalloc&lt;/code&gt;,
&lt;code&gt;cudaMemcpy&lt;/code&gt; and &lt;code&gt;cudaFree&lt;/code&gt; - are fairly self-explanatory, and are &lt;a href="http://docs.nvidia.com/cuda/cuda-c-programming-guide"&gt;well
documented&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Vector addition - kernel code&lt;/h2&gt;
&lt;p&gt;The CUDA kernel function that is called looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;__global__ void vecAdd(int n, float *x, float *y) {  
    int i = threadIdx.x + blockDim.x*blockIdx.x;  
    if (i &amp;lt; n) y[i] = x[i] + y[i];  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first difference from an ordinary C function is the &lt;code&gt;__global__&lt;/code&gt;
keyword at the beginning of the function declaration. The compiler needs
to distinguish between functions for the host CPU and kernel functions
intended for the GPU; it does this using the keywords &lt;code&gt;__host__&lt;/code&gt; for the
former, and either &lt;code&gt;__global__&lt;/code&gt; or &lt;code&gt;__device__&lt;/code&gt; for the latter. The
second difference is the existence of the pre-defined variables
&lt;code&gt;threadIdx&lt;/code&gt; and &lt;code&gt;blockIdx&lt;/code&gt;, which give the (&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;, &lt;em&gt;z&lt;/em&gt;) indices of
the thread within the block, and of the block within the grid,
respectively; and &lt;code&gt;blockDim&lt;/code&gt;, which gives the (&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;, &lt;em&gt;z&lt;/em&gt;) dimensions
of the block, as defined in the function call.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; statement is included for the case where &lt;em&gt;n&lt;/em&gt; is not divisible
by 256 and therefore we have &lt;code&gt;ceil(n/256)&lt;/code&gt; blocks, resulting in there
being more threads than elements in the vector(s).&lt;/p&gt;
&lt;h2&gt;Parallel efficiency&lt;/h2&gt;
&lt;p&gt;If we ignore the multiplication by the constant &lt;em&gt;A&lt;/em&gt; for the moment, and
concentrate on the vector addition &lt;code&gt;y[i] = x[i] + y[i]&lt;/code&gt;, we can see that
there are three memory accesses (two reads and a write) for each
statement, and only one floating-point calculation (the addition). The
&lt;a href="http://www.greatlakesconsortium.org/events/GPUMulticore/Chapter4-CudaMemoryModel.pdf"&gt;compute-to-global-memory-access (CGMA)
ratio&lt;/a&gt;
is therefore 1:3, or 1/3. This is an important metric of the performance
of an application or section of code. We often refer to codes as being
either &lt;em&gt;compute-bound&lt;/em&gt; or &lt;em&gt;memory-bound&lt;/em&gt;, depending on whether the
limiting factor on improving their performance is the rate at which we
can do computations, or the rate at which we can retrieve and send data
to and from memory. We'll see now that for a typical GPU, this vector
addition operation is very clearly memory-limited.&lt;/p&gt;
&lt;p&gt;A typical memory bandwidth for a GPU might be, say, 200GB/s, which means
that we can load/store:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{200\,\mathrm{GB/s}}{8\,\mathrm{B/memory\:access}} =
25 \times 10^9\,\mathrm{memory\:access/s} $$&lt;/div&gt;
&lt;p&gt;Crudely, this limits the actual computation rate to&lt;/p&gt;
&lt;div class="math"&gt;$$ 25 \times
10^9\,\mathrm{memory\:access/s}\,\times\,0.33\,\mathrm{FLOP}/\mathrm{memory\:access}
\approx 8\,\mathrm{GFLOP/s} $$&lt;/div&gt;
&lt;p&gt;The peak theoretical performance of the GPU might be, say, 1000 GFLOP/s
double-precision – i.e. the actual performance obtained is  less than 1%
of peak. This is the case no matter how many threads there are - the
limiting factor is how quickly data can be transferred between the
global memory and the processors.&lt;/p&gt;
&lt;p&gt;For this function - simple vector addition - there isn't a great deal we
can do about the fact that it's memory bound. You have to bring back
each pair of elements from &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; from memory, then put the result
back again - the number of memory operations is irreducible. For more
complex operations, where pieces of data are typically used multiple
times, the trick is to use shared memory, which is much, much faster
than global memory. However, there is obviously much less of it, so only
small chunks of data can be placed there at a time; this means that
programmers need to think very carefully about memory access patterns in
their code, to ensure that multiple uses of a given chunk of data are
grouped as closely together as possible in the flow of the program, so
data isn't continually being placed and replaced in shared memory, via
expensive global memory operations. This is analogous to moving data
from memory into local
&lt;a href="http://searchstorage.techtarget.com/definition/cache-memory"&gt;cache&lt;/a&gt; in
a normal CPU, except that in CUDA programming for GPUs, the programmer
is explicitly controlling movement of data between the shared and global
memory.&lt;/p&gt;
&lt;p&gt;Actually, one way to improve the vector addition might be to
utilise &lt;a href="www.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/instrLevParal.html"&gt;instruction-level parallelism
(ILP)&lt;/a&gt;.
In the kernel, the single floating-point operation has to wait for both
of the input vector elements (&lt;code&gt;x[i]&lt;/code&gt; and &lt;code&gt;y[i]&lt;/code&gt;) to be retrieved from
global memory before it can begin. Hence if the global memory reads and
writes take &lt;em&gt;M&lt;/em&gt; clock cycles each, and the floating operation takes &lt;em&gt;N&lt;/em&gt;,
then the total number of clock cycles is &lt;em&gt;(M+1)+N+M&lt;/em&gt; (assuming the
second load begins one clock cycle after the first, but otherwise that
they are done simultaneously). This is &lt;em&gt;2M+N+1&lt;/em&gt;, so to go through it &lt;em&gt;k&lt;/em&gt;
times is &lt;em&gt;k(2M+N+1)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;However, if within the kernel we loaded two values of each input vector,
say &lt;code&gt;x[i+1]&lt;/code&gt; and &lt;code&gt;y[i+1]&lt;/code&gt; as well as &lt;code&gt;x[i]&lt;/code&gt; and &lt;code&gt;y[i]&lt;/code&gt;, then the
computation of &lt;code&gt;x[i] + y[i]&lt;/code&gt; starts after &lt;em&gt;M+1&lt;/em&gt; cycles and takes &lt;em&gt;N&lt;/em&gt;
cycles, so the result is written back to global memory after &lt;em&gt;(M+1)+N+M&lt;/em&gt;
cycles as before; &lt;em&gt;but&lt;/em&gt;, x[i+1] can start to load after 2 cycles, and
y[i+1] after 3 cycles, so computation of &lt;code&gt;x[i+1] + y[i+1]&lt;/code&gt; can begin
after &lt;em&gt;M+3&lt;/em&gt; cycles, and still takes &lt;em&gt;N&lt;/em&gt;. Hence &lt;code&gt;y[i+1]&lt;/code&gt; has been written
back to global memory after &lt;em&gt;(M+3)+N+M&lt;/em&gt; cycles. This means the whole
operation to get &lt;code&gt;x[i] + y[i]&lt;/code&gt; and &lt;code&gt;x[i+1] + y[i+1]&lt;/code&gt; takes &lt;em&gt;(M+3)+N+M&lt;/em&gt;
cycles overall, which is only 2 cycles more than it took to get only
&lt;code&gt;x[i] + y[i]&lt;/code&gt; in the original kernel. For &lt;em&gt;k&lt;/em&gt; elements, it will take
&lt;em&gt;k(2M+N+3)/2&lt;/em&gt;. This is basically going to take half the time of the
original (as long as &lt;em&gt;2M+N&lt;/em&gt; is large enough that the constant doesn't
matter).&lt;/p&gt;
&lt;p&gt;Nothing has been done to reduce the
&lt;a href="http://www.hardwaresecrets.com/article/Understanding-RAM-Timings/26/2"&gt;latency&lt;/a&gt;of
the memory operations, or to do fewer of them; instead they've been
overlapped as much as possible. This is called &lt;em&gt;latency-hiding&lt;/em&gt; - doing
other useful things while waiting for data to return from memory.
Actually, at a different level, the concept of latency-hiding is also
fundamental to the GPU and threading; by dividing up the data to be
processed into small chunks, and having many different threads operate
on those chunks, the GPU has much more flexibility to schedule work so
that memory latency can be hidden. For this reason, GPUs are described
as &lt;em&gt;throughput-oriented&lt;/em&gt; - they are more concerned with operating on
lots of data concurrently so they need to worry less about latency;
whereas CPUs, on the other hand, are &lt;em&gt;latency-oriented&lt;/em&gt;, and are
designed with as many tricks as possible up their sleeve to reduce
latency, under the assumption of, basically, a sequential execution
model.&lt;/p&gt;
&lt;p&gt;If the same sequential processor were handling all the elements, like in
a typical CPU, then this
&lt;a href="cs.stanford.edu/people/eroberts/courses/soco/projects/risc/pipelining/"&gt;pipelining&lt;/a&gt;
is the sort of thing modern processors try to do for you anyway, without
you having to worry about it.&lt;/p&gt;
&lt;hr&gt;
&lt;div style="background:#FFFFFF;margin:0 10px 10px 0;padding:0 10px 0 0;text-align:left;font-family:Arial, Helvetica, sans-serif;line-height:1em;"&gt;
&lt;div style="font-size:11px;padding:0 0 10px;font-weight:bold;color:#045989;"&gt;

High-performance computing systems: Status and outlook

&lt;/div&gt;

&lt;div style="font-size:11px;"&gt;

J. J. Dongarra and A. J. van der Steen (2012).
&lt;a href="http://journals.cambridge.org/action/displayJournal?jid=ANU"&gt;Acta Numerica&lt;/a&gt;,
&lt;a href="http://journals.cambridge.org/action/displayIssue?iid=8539365"&gt;Volume 21 &lt;/a&gt;,
&lt;a href="http://journals.cambridge.org/action/displayAbstract?aid=8539374"&gt;May 2012, pp.379-474&lt;/a&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="c"></category><category term="cuda"></category><category term="gpu"></category><category term="hpc"></category><category term="massively parallel"></category><category term="parallel computing"></category><category term="parallel programming"></category></entry><entry><title>Converting from Doxygen to WordPress</title><link href="http://0x7df.github.io/converting-from-doxygen-to-wordpress.html" rel="alternate"></link><published>2015-03-29T19:27:00+01:00</published><updated>2015-03-29T19:27:00+01:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-03-29:/converting-from-doxygen-to-wordpress.html</id><summary type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;I write code documentation in &lt;a href="www.doxygen.org/"&gt;Doxygen&lt;/a&gt;, and in some
cases include a fair amount of information about the mathematical theory
of the problem that the code is solving. It seemed worthwhile posting
the same content on &lt;a href="https://wordpress.com"&gt;Wordpress&lt;/a&gt;. However, the
syntax isn't 100% interchangeable, despite both applications supporting
&lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;. This …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;I write code documentation in &lt;a href="www.doxygen.org/"&gt;Doxygen&lt;/a&gt;, and in some
cases include a fair amount of information about the mathematical theory
of the problem that the code is solving. It seemed worthwhile posting
the same content on &lt;a href="https://wordpress.com"&gt;Wordpress&lt;/a&gt;. However, the
syntax isn't 100% interchangeable, despite both applications supporting
&lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;. This is mainly
because Doxygen extends Markdown by providing &lt;a href="http://www.stack.nl/~dimitri/doxygen/manual/commands.html"&gt;a large range of special
commands&lt;/a&gt;,
which begin with a &lt;code&gt;/&lt;/code&gt; or a &lt;code&gt;@&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The bulk of the changes that need to be made are to the equations.
Doxygen and WordPress both allow 
&lt;a href="http://www.latex.org"&gt;&lt;img alt="\LaTeX" src="https://s0.wp.com/latex.php?latex=%5CLaTeX&amp;amp;fg=000" title="\LaTeX"&gt;&lt;/a&gt;
equations; Doxygen by actually
calling &lt;img alt="\LaTeX" src="https://s0.wp.com/latex.php?latex=%5CLaTeX&amp;amp;fg=000" title="\LaTeX"&gt;
to generate
&lt;a href="en.wikipedia.org/wiki/Portable_Network_Graphics"&gt;PNG&lt;/a&gt;-format images
which it embeds in the &lt;a href="www.w3schools.com/html/"&gt;HTML&lt;/a&gt;files that it
generates, and WordPress by using one of &lt;a href="https://wordpress.org/plugins/search.php?q=latex"&gt;various
plug-ins&lt;/a&gt; (see
documentation &lt;a href="https://en.support.wordpress.com/latex/"&gt;here&lt;/a&gt;). However,
while the code for the actual equation is identical in both, being
standard
&lt;a href="http://www.ams.org/publications/authors/tex/amsmath"&gt;amsmath&lt;/a&gt;-style
&lt;a href="http://www.latex.org"&gt;&lt;img alt="\LaTeX" src="https://s0.wp.com/latex.php?latex=%5CLaTeX&amp;amp;fg=000" title="\LaTeX"&gt;&lt;/a&gt;,
the delimiters that identify it as maths and separate it from the body
of the text are different. References also need to be handled
differently.&lt;/p&gt;
&lt;p&gt;[caption id="" align="alignright" width="404"]&lt;img alt="xkcd:
Automation" src="http://imgs.xkcd.com/comics/automation.png"&gt; xkcd: Automation
- http://imgs.xkcd.com/comics/automation.png[/caption]&lt;/p&gt;
&lt;p&gt;Rather than do the conversion by hand, I knocked up a simple
&lt;a href="http://python.org"&gt;Python&lt;/a&gt; script to do it (and in doing so risked
falling into the trap of spending more time writing code to automate the
task than I would have spent doing it manually) using simple &lt;a href="www.regular-expressions.info/"&gt;regular
expressions&lt;/a&gt; in some cases. This post
describes how the script works, so along the way we'll learn a bit of
Python, something about regular expressions, and a bit about Doxygen and
WordPress syntax.&lt;/p&gt;
&lt;p&gt;Let's jump straight in. The script is called from the command line:&lt;/p&gt;
&lt;p&gt;[code lang="bash"]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;python dox2wp.py /path/to/doxygen/data/example.md&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;The script is called &lt;code&gt;dox2wp.py&lt;/code&gt;, and we've passed the full path to a
Doxygen Markdown file called &lt;code&gt;example.md&lt;/code&gt; as an argument to the Python
script.&lt;/p&gt;
&lt;h2&gt;Main script&lt;/h2&gt;
&lt;p&gt;The first part of the script looks like this:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;/p&gt;
&lt;p&gt;args = sys.argv[1:]&lt;/p&gt;
&lt;p&gt;reffile = '/default/path/to/references.md'&lt;/p&gt;
&lt;p&gt;for arg in args:&lt;br&gt;
errmsg = processdox(arg,reffile)&lt;br&gt;
for msg in errmsg:&lt;br&gt;
print msg&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;The first line - &lt;code&gt;if __name__ == "__main__":&lt;/code&gt; - is a fairly standard
Python construct that checks that the module being executed has been
called from the command-line or interpreter directly, and not by some
other Python module or function. &lt;a href="http://stackoverflow.com/a/419185/3832350"&gt;This
answer&lt;/a&gt; on
&lt;a href="http://stackoverflow.com"&gt;StackOverflow&lt;/a&gt;gives more details. The next
line retrieves the arguments that were passed in to the Python script
using the &lt;code&gt;sys&lt;/code&gt; module's &lt;code&gt;argv&lt;/code&gt; function  (this assumes &lt;code&gt;sys&lt;/code&gt; has been
imported using &lt;code&gt;import sys&lt;/code&gt; somewhere prior to this statement; usually
at the very top of the file). The &lt;code&gt;argv&lt;/code&gt; function returns the arguments
as a list; the zeroth element corresponds to the name of the script, so
we ignore that and just get elements 1 through to the end of the list
and store them in a new list called &lt;code&gt;args&lt;/code&gt;. You can find documentation
for the &lt;code&gt;sys&lt;/code&gt; module &lt;a href="https://docs.python.org/2/library/sys.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next we define a hard-wired path to a file, which we'll come back to
later.&lt;/p&gt;
&lt;p&gt;The next chunk of code is where the main business happens. We loop over
all the items in &lt;code&gt;args&lt;/code&gt;, each of which is assumed to be a Markdown file
we want to process. For each, we call the function &lt;code&gt;processdox&lt;/code&gt;, passing
in both the path to the file, and the hard-wired path mentioned above.
The &lt;code&gt;processdox&lt;/code&gt; function returns a list of error messages, which we
bind to the variable &lt;code&gt;errmsg&lt;/code&gt;. The last action in this script is to loop
over the error messages returned by the processing function, and print
them to the screen.&lt;/p&gt;
&lt;h2&gt;Function `processdox`&lt;/h2&gt;
&lt;p&gt;The body of the &lt;code&gt;processdox&lt;/code&gt; function is given below:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
def processdox(filename,reffile):&lt;/p&gt;
&lt;p&gt;errmsg = checkfile(filename)&lt;/p&gt;
&lt;p&gt;if len(errmsg) == 0:&lt;br&gt;
processfile(filename,reffile=reffile)&lt;/p&gt;
&lt;p&gt;return errmsg&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;The first line is the function definition, which also specifies the
arguments that function accepts: &lt;code&gt;filename&lt;/code&gt; and &lt;code&gt;reffile&lt;/code&gt;. Then, two
functions are called: the first, &lt;code&gt;checkfile&lt;/code&gt;, does some error-checking,
and the second, &lt;code&gt;processfile&lt;/code&gt;, does the main work - but only if the
length of the list &lt;code&gt;errmsg&lt;/code&gt; is zero (i.e. it contains no data, which is
a way of checking that &lt;code&gt;checkfile&lt;/code&gt; didn't return any error messages).&lt;/p&gt;
&lt;h2&gt;Error checking&lt;/h2&gt;
&lt;p&gt;Let's see the file-checking function &lt;code&gt;checkfile&lt;/code&gt; next:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
def checkfile(filename):&lt;/p&gt;
&lt;p&gt;errmsg = []&lt;/p&gt;
&lt;p&gt;filebase, fileext = os.path.splitext(filename)&lt;/p&gt;
&lt;p&gt;if fileext != '.md':&lt;br&gt;
errmsg.append(filename+' is not Markdown')&lt;/p&gt;
&lt;p&gt;if not os.path.isfile(filename):&lt;br&gt;
errmsg.append(filename+' does not exist or is&lt;br&gt;
not a file')&lt;/p&gt;
&lt;p&gt;return errmsg&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;This first declares the &lt;code&gt;errmsg&lt;/code&gt; variable as an empty list, and then
uses the standard &lt;code&gt;os.path&lt;/code&gt; module's &lt;code&gt;splitext&lt;/code&gt; function, which returns
the file's extension, and everything up to that extension (as a tuple),
which we write into &lt;code&gt;fileext&lt;/code&gt; and &lt;code&gt;filebase&lt;/code&gt;. Doing this allows us to
check easily that the file extension is &lt;code&gt;.md&lt;/code&gt;. The next check is that
the filename given refers to something that exists and is a file (e.g.
as opposed to a directory), using the &lt;code&gt;isfile()&lt;/code&gt; function. Documentation
for &lt;code&gt;os.path&lt;/code&gt; can be found
&lt;a href="https://docs.python.org/2/library/os.path.html#module-os.path"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Notice that all we do on finding an error is to append an error message
to the previously defined list, using &lt;code&gt;errmsg.append()&lt;/code&gt;. The reason for
this is that, although it scarcely matters for this almost trivial
application, I find it good practice to let a piece of code go on for as
long as it can after encountering errors, because there may be further
errors that will get picked up subsequently. If it stopped immediately,
the user would fix that error, and start it again, whereupon the next
error encountered would cause it to bail out again. For software with
complicated input this could go on for a long time and cause a lot of
frustration. The behaviour here, however, is to keep going and identify
as many errors as possible before stopping, so we minimise the number of
iterations the user will have to go through to fix everything.&lt;/p&gt;
&lt;p&gt;For example, if we call:&lt;/p&gt;
&lt;p&gt;[code lang="bash"]  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;python dox2wp.py isnotmarkdown.txt doesnotexist.md \&lt;br&gt;
existsbutisafolder.md realmarkdown.md&lt;br&gt;
[/code]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;then we get:&lt;/p&gt;
&lt;p&gt;[code]&lt;br&gt;
isnotmarkdown.txt is not Markdown&lt;br&gt;
doesnotexist.md does not exist or is not a file&lt;br&gt;
existsbutisafolder.md does not exist or is not a file&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Note there's no error message referring to &lt;code&gt;realmarkdown.md&lt;/code&gt;, which
meets the criteria and so is processed successfully.&lt;/p&gt;
&lt;p&gt;It's important to understand that this isn't the same as being
fault-tolerant or trying to recover from the errors. In principle, as
soon as the user does something that doesn't seem to fit in with the way
a piece of code is intended to work, we should stop and let the user
know; trying to recover starts to get into the realm of making
assumptions about what the user wants. All we're doing here is
continuing to progress through the &lt;em&gt;error-checking&lt;/em&gt; when an error is
encountered; as soon as one is, the actual processing is prevented by
the &lt;code&gt;if&lt;/code&gt; statement around the call to &lt;code&gt;processfile&lt;/code&gt;. We do allow the
application to continue to the next Markdown file if an error was
encountered previously, but since processing of each file is completely
independent, this seems safe enough.&lt;/p&gt;
&lt;p&gt;Of course, all this is total overkill for what we're trying to do, but
is useful to illustrate the principles in a simple application.&lt;/p&gt;
&lt;h2&gt;The actual format conversion part&lt;/h2&gt;
&lt;h3&gt;Preamble&lt;/h3&gt;
&lt;p&gt;Function &lt;code&gt;processfile&lt;/code&gt; executes the real work. This is somewhat longer
so we'll deal with it in sections. It starts with:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
def processfile(filename,reffile='references.md'):&lt;/p&gt;
&lt;p&gt;fi = open(filename,'r')&lt;br&gt;
fo = open(filename+'.txt','w')&lt;br&gt;
fr = open(reffile,'r')&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;After the function definition, which like the previous one we saw
defines the input arguments &lt;code&gt;filename&lt;/code&gt; and &lt;code&gt;reffile&lt;/code&gt; (but with the
addition that the &lt;code&gt;reffile&lt;/code&gt; variable defaults to &lt;code&gt;references.md&lt;/code&gt; if no
argument is passed in), the next three lines open some files. &lt;code&gt;filename&lt;/code&gt;
and &lt;code&gt;reffile&lt;/code&gt; are opened as read-only (with some obvious error-checking
around &lt;code&gt;reffile&lt;/code&gt; clearly missing). A new file called &lt;code&gt;reffile + '.txt'&lt;/code&gt;
is opened as writeable, and this will contain the output; the filename
will be the same as the input but with &lt;code&gt;.txt&lt;/code&gt; appended, e.g.
&lt;code&gt;example.md.txt&lt;/code&gt; if the input was &lt;code&gt;example.md&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The next stage is to define some regular expressions that will get used
later; we define them here rather than nearer to where they get used
because their use will be inside a loop, and there's no point
re-defining them every time the loop is executed, because they're always
the same.&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
p1 = re.compile('@f\&lt;span class="math"&gt;\([^@]*@f\\\)&lt;/span&gt;')&lt;br&gt;
p2 = re.compile('@ref [^"]&lt;em&gt; "[^"]&lt;/em&gt;"')&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;We'll come back to these when they're needed.&lt;/p&gt;
&lt;p&gt;The final part of the pre-amble involved setting up a counter and an
empty list for the references, again which we'll come to when we need
them.&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
refnum = 1&lt;br&gt;
footnotes = []&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;In the next stage we enter the loop over individual lines in the input
file, which Python implements very simply as &lt;code&gt;for line in fi:&lt;/code&gt;, with
&lt;code&gt;line&lt;/code&gt; being the variable name into which each successive line is
placed, and &lt;code&gt;fi&lt;/code&gt; just being the pointer to the opened text file.&lt;/p&gt;
&lt;p&gt;The first text-processing operation is to replace &amp;lt; and &amp;gt; with their
HTML equivalents: &lt;code&gt;&amp;amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;amp;gt;&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
for line in fi:&lt;/p&gt;
&lt;p&gt;# Some of the later changes insert "&amp;lt;" and "&amp;gt;" so do&lt;br&gt;
# these as early as possible&lt;br&gt;
line = line.replace('&amp;lt;','&amp;lt;')&lt;br&gt;
line = line.replace('&amp;gt;','&amp;gt;')&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;The reason for this is that, for this to work overall, the final output
needs to be copied and pasted into WordPress's HTML editor, rather than
the Visual editor. Consequently, there's a risk that any &amp;lt; and &amp;gt;
symbols appearing in mathematical formulae will get interpreted as
delimiters for an HTML tag. E.g. if:&lt;/p&gt;
&lt;div class="math"&gt;$$ a &amp;lt; b$ and also $ b &amp;gt; c $$&lt;/div&gt;
&lt;p&gt;appeared on a single line then the string:&lt;/p&gt;
&lt;div class="math"&gt;$$ &amp;lt; b$ and also $ b &amp;gt; $$&lt;/div&gt;
&lt;p&gt;would get interpreted as an HTML tag (and ignored as not recognised),
leaving:&lt;/p&gt;
&lt;div class="math"&gt;$$ a c $$&lt;/div&gt;
&lt;p&gt;I wasn't expecting this, at least not when the &amp;lt; and &amp;gt; symbols were
safely inside the correct &lt;code&gt;$latex&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; delimiters identifying them
as maths - but it happened, which seems like a flaw in the WordPress
parsing.&lt;/p&gt;
&lt;h3&gt;Special commands&lt;/h3&gt;
&lt;p&gt;Subsequently, we remove some of the Doxygen special commands:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
# Remove the table of contents special command&lt;br&gt;
line = line.replace('\\tableofcontents','')&lt;/p&gt;
&lt;p&gt;# Replace the Doxygen special commands for sections&lt;br&gt;
# with Markdown&lt;br&gt;
if '\section' in line:&lt;br&gt;
fields = line.split()&lt;br&gt;
line = '# ' + ' '.join(fields[2:])&lt;br&gt;
if '\subsection' in line:&lt;br&gt;
fields = line.split()&lt;br&gt;
line = '## ' + ' '.join(fields[2:])&lt;br&gt;
if '\subsubsection' in line:&lt;br&gt;
fields = line.split()&lt;br&gt;
line = '### ' + ' '.join(fields[2:])&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;The first special command is &lt;code&gt;\tableofcontents&lt;/code&gt;, which appears on its
own and causes Doxygen to automatically insert a contents table into the
rendered page at that location. We strip this out by replacing it with
an empty string, using the &lt;code&gt;replace&lt;/code&gt; string method.&lt;/p&gt;
&lt;p&gt;Next are &lt;code&gt;\section&lt;/code&gt;, &lt;code&gt;\subsection&lt;/code&gt; and &lt;code&gt;\subsubsection&lt;/code&gt;. Each of these
special commands is followed by two arguments: first an identifying tag,
which can then be used elsewhere in the Doxygen pages to create a link
to this section, followed by the actual title of the section, e.g.:&lt;/p&gt;
&lt;p&gt;[code]&lt;br&gt;
\subsection introdoxy Introduction to Doxygen&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;We don't care about the ID tag, but we want to keep the title and retain
it at the same location as the section title in the WordPress post. To
do this we split the line into a list of tokens, separated by
whitespace, using &lt;code&gt;line.split()&lt;/code&gt;. The resulting list, in &lt;code&gt;fields&lt;/code&gt;, would
look like this for the example above if we printed it out:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
['\\subsection', 'introdoxy', 'Introduction', 'to', 'Doxygen']&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;The idea is to discard the first two elements and keep the rest, joining
them back together into a string, and stripping out the quotation marks.&lt;/p&gt;
&lt;p&gt;[code]&lt;br&gt;
line = '## ' + ' '.join(fields[2:])&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Here the &lt;code&gt;string.join(list)&lt;/code&gt; syntax in Python joins all the elements of
&lt;code&gt;list&lt;/code&gt; together into a single string, using &lt;code&gt;string&lt;/code&gt; as the delimiter.
Hence in our example, &lt;code&gt;' '.join(fields[2:])&lt;/code&gt; would yield
&lt;code&gt;Introduction to Doxygen&lt;/code&gt;, and we prepend &lt;code&gt;##&lt;/code&gt; to this string to turn it
into standard Markdown format for a level 2 section header.&lt;/p&gt;
&lt;p&gt;There's probably a more compact way to deal with the multiple cases
(i.e. &lt;code&gt;\section&lt;/code&gt;, &lt;code&gt;\subsection&lt;/code&gt;, etc.) involving counting how many times
the string &lt;code&gt;sub&lt;/code&gt; appears and prepending the appropriate number of hashes
accordingly; but for only three cases, writing them out explicitly isn't
difficult, and leads to easier-to-understand code.&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;The next section of code deals with references. In Doxygen, we insert
references into the main body of the text like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@ref ref01 &amp;quot;Fick (1855)&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(or we could use &lt;code&gt;\ref&lt;/code&gt; instead of &lt;code&gt;@ref&lt;/code&gt;). Elsewhere, there would be a
references section - in this case in a separate file called
&lt;code&gt;references.md&lt;/code&gt;, which is why we've previously seen that file being
hard-wired in the main script and then passed in to this function as an
argument. In the references section, there would be an entry like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-# \anchor ref01 Fick, A, 1855. On liquid diffusion. The London, Edinburgh, and Dublin Philosophical Magazine and Journal of Science, X, 30-39.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The initial &lt;code&gt;-#&lt;/code&gt; is to create a numbered list, and the &lt;code&gt;\anchor ref01&lt;/code&gt;
creates an anchor that the earlier &lt;code&gt;@ref ref01&lt;/code&gt; syntax can link to. The
remainder is the text that appears in the references section.&lt;/p&gt;
&lt;p&gt;What we want to do is replace the in-line reference with a link to a
footnote, and use the long reference text as the footnote.&lt;/p&gt;
&lt;p&gt;For an individual references, the code that does this looks like this:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
# References&lt;/p&gt;
&lt;p&gt;refidstr = 'fn'+str(refnum)&lt;br&gt;
refnum += 1&lt;/p&gt;
&lt;p&gt;fields = istr.split()&lt;br&gt;
reftxt = " ".join(fields[2:]).strip('"')&lt;/p&gt;
&lt;p&gt;ostr = '&lt;a href="\#'+refidstr+'"&gt;'+reftxt+'&lt;/a&gt;'&lt;br&gt;
line = line.replace(istr,ostr)&lt;/p&gt;
&lt;p&gt;doxref = fields[1]&lt;br&gt;
for refline in fr:&lt;br&gt;
if doxref in refline:&lt;br&gt;
reffull = ' '.join(refline.strip().split()[3:])&lt;br&gt;
break&lt;br&gt;
footnotes.append('&lt;a name="'+refidstr+'"&gt;'+reffull+'&lt;/a&gt;')&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Although you don't see it here, the Doxygen text containing the in-line
reference is contained in &lt;code&gt;istr&lt;/code&gt; - we'll explain how it got there
shortly. The first thing we do is create a unique string for the anchor
that will be used as the ID for the footnote; i.e. if the anchor is
&lt;code&gt;fn1&lt;/code&gt;, then the inline reference will be:&lt;/p&gt;
&lt;p&gt;[code lang="html"]&lt;br&gt;
&lt;a href="fn1"&gt;Fick (1855)&lt;/a&gt;&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;and the footnote would be:&lt;/p&gt;
&lt;p&gt;[code lang="html"]&lt;br&gt;
&lt;a name="fn1"&gt;Fick, A, 1855. On liquid diffusion...&lt;/a&gt;&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;We have previously set up a counter for the references we discover,
which was &lt;code&gt;refnum&lt;/code&gt;, so the code &lt;code&gt;refidstr = 'fn'+str(refnum)&lt;/code&gt; will
create &lt;code&gt;fn1&lt;/code&gt; for the first reference, &lt;code&gt;fn2&lt;/code&gt; for the second, etc. You can
see that &lt;code&gt;refnum&lt;/code&gt; is incremented by 1 in the next line of the code
fragment above to ensure this.&lt;/p&gt;
&lt;p&gt;Next, we want to extract the text for the in-line reference ("Fick
(1855)" in our example), for which we use the same kind of trick as we
did for the section headings. The only difference here is that we have
to add the &lt;code&gt;strip('"')&lt;/code&gt; function to strip off the quotation marks.&lt;/p&gt;
&lt;p&gt;At this point we have enough information to construct the new text for
the in-line reference:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
ostr = '&lt;a href="\#'+refidstr+'"&gt;'+reftxt+'&lt;/a&gt;'&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;and replace the original string with the new one:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
line = line.replace(istr,ostr)&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;There's one final job; we have to create the footnote and put it at the
bottom of the page. We'll store it in a list called &lt;code&gt;footnotes&lt;/code&gt; in the
interim, and then write the list out after all the other processing has
been finished, so it appears in its proper place at the bottom of the
page.&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
doxref = fields[1]&lt;br&gt;
for refline in fr:&lt;br&gt;
if doxref in refline:&lt;br&gt;
reffull = ' '.join(refline.strip().split()[3:])&lt;br&gt;
break&lt;br&gt;
footnotes.append('&lt;a name="'+refidstr+'"&gt;'+reffull+'&lt;/a&gt;')&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;So what is this doing? We know the text that Doxygen is using - &lt;code&gt;ref01&lt;/code&gt;
- in our example, because we can extract it from the second token of the
&lt;code&gt;istr&lt;/code&gt; line (where the first token is just the &lt;code&gt;@ref&lt;/code&gt; code). Then we
have to search line-by-line through the reference file, &lt;code&gt;fr&lt;/code&gt;, until we
find a line that contains the string we're after - this will cause
&lt;code&gt;if doxref in refline&lt;/code&gt; to return true. We know this is the right line,
so we can extract the long text of the reference into &lt;code&gt;reffull&lt;/code&gt; using
the same &lt;code&gt;split&lt;/code&gt; then &lt;code&gt;join&lt;/code&gt; technique as we've seen before, starting at
the fourth token (the first three being &lt;code&gt;-#&lt;/code&gt;, &lt;code&gt;\anchor&lt;/code&gt; and &lt;code&gt;ref01&lt;/code&gt;, all
of which we want to discard).&lt;/p&gt;
&lt;p&gt;The real code, however, is a bit more complex; firstly because we need
to find the appropriate text strings in our Doxygen code before we can
format them (recall we haven't explained how &lt;code&gt;istr&lt;/code&gt; gets defined yet),
and also because there might be more than one reference on one line, so
we have to deal with that. We do this via regular expressions, which
first requires that the Python &lt;code&gt;re&lt;/code&gt; module is imported (documented
&lt;a href="https://docs.python.org/2/library/re.html"&gt;here&lt;/a&gt;). Once it is, we can
compile a regular expression using the code we saw earlier but didn't
explain:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
p2 = re.compile('@ref [^"]&lt;em&gt; "[^"]&lt;/em&gt;"')&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;The regular expression is the bit inside the single quotes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@ref [^&amp;quot;]* &amp;quot;[^&amp;quot;]*&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; characters are special characters that
have particular meanings in the regular expression language. The caret,
&lt;code&gt;^&lt;/code&gt;, is a &lt;code&gt;not&lt;/code&gt; operator, so &lt;code&gt;^"&lt;/code&gt; means not the quotation mark
character. Using &lt;code&gt;[ ]&lt;/code&gt; defines a set of characters that are allowed, so
for example &lt;code&gt;[aeiou]&lt;/code&gt; would match any vowel character. So &lt;code&gt;[^"]&lt;/code&gt; means
any character from the set of characters that are not the quotation mark
&lt;code&gt;"&lt;/code&gt;. Finally, the &lt;code&gt;*&lt;/code&gt; character means match any number of whatever went
previously. Hence, for example, &lt;code&gt;a*&lt;/code&gt; would match &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;aa&lt;/code&gt;, &lt;code&gt;aaa&lt;/code&gt;, etc.
Putting all this together, the regular expression &lt;code&gt;[^"]*&lt;/code&gt;, which appears
twice, means match any string of any length that doesn't contain a
quotation mark. The reason we need to specify that the string shouldn't
contain quotation marks is that these are used as delimiters, to
surround the in-line text of the reference. If we could guarantee that
quotation marks would never appear elsewhere on the same line, it
wouldn't matter; but we can't.&lt;/p&gt;
&lt;p&gt;Now we understand the regular expression syntax used, we need to
understand the rest of the line. Compiling the regular expression
creates a special regular expression object, which we've bound to &lt;code&gt;p2&lt;/code&gt;,
and which can be used later. We do this by writing:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
for item in p2.finditer(line):&lt;br&gt;
istr = item.group()&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;This calls the &lt;code&gt;finditer&lt;/code&gt; method of the &lt;code&gt;p2&lt;/code&gt; regular expression object
on the text string &lt;code&gt;line&lt;/code&gt;, which returns an iterator of all the
instances where the pattern represented by &lt;code&gt;p2&lt;/code&gt; was matched. We need to
do this because there could be more than one match in any given &lt;code&gt;line&lt;/code&gt;.
The second line returns the actual matched text string from &lt;code&gt;item&lt;/code&gt;,
using the &lt;code&gt;group&lt;/code&gt; method, and puts it into &lt;code&gt;istr&lt;/code&gt;. We now have the full
thing:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
# Loop over all matches against p2 in line&lt;br&gt;
for item in p2.finditer(line):&lt;/p&gt;
&lt;p&gt;# Extract the matched text&lt;br&gt;
istr = item.group()&lt;/p&gt;
&lt;p&gt;# Create the unique reference (and increment the counter for next
time)&lt;br&gt;
refidstr = 'fn'+str(refnum)&lt;br&gt;
refnum += 1&lt;/p&gt;
&lt;p&gt;# Get the in-line reference text&lt;br&gt;
fields = istr.split()&lt;br&gt;
reftxt = " ".join(fields[2:]).strip('"')&lt;/p&gt;
&lt;p&gt;# Construct the WordPress-format inline reference and&lt;br&gt;
# replace the old Doxygen-format one&lt;br&gt;
ostr = '&lt;a href="\#'+refidstr+'"&gt;'+reftxt+'&lt;/a&gt;'&lt;br&gt;
line = line.replace(istr,ostr)&lt;/p&gt;
&lt;p&gt;# Get the full reference text to use as the footnote&lt;br&gt;
doxref = fields[1]&lt;br&gt;
fr.seek(0)&lt;br&gt;
for refline in fr:&lt;br&gt;
if doxref in refline:&lt;br&gt;
reffull = ' '.join(refline.strip().split()[3:])&lt;br&gt;
break&lt;br&gt;
footnotes.append('&lt;a name="'+refidstr+'"&gt;'+reffull+'&lt;/a&gt;')&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;The only additonal thing here that you haven't already seen is the
&lt;code&gt;fr.seek(0)&lt;/code&gt; line, which rewinds the references file to the beginning
each time we do a search through it. It's common snafu in Python that
once you've done a &lt;code&gt;for line in file:&lt;/code&gt;-type of construct, you can't just
do another one. The file pointer is left at the end, so the second time
round nothing will happen (and it's not an error).&lt;/p&gt;
&lt;h3&gt;Maths&lt;/h3&gt;
&lt;p&gt;The final set of replacement operations we want to conduct is to replace
any Doxygen-style maths delimiters with the appropriate WordPress ones.
Doxygen allows several different kinds of delimiter. Firstly, in-line
equations can be included by surrounding them with &lt;code&gt;\f$&lt;/code&gt; tags; e.g.:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;...the equation \f$ E = mc^2 \f$ is well-known...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Alternatively, we can create a numbered equation on its own line by
using the opening delimiter &lt;code&gt;\f{equation}&lt;/code&gt; and the closing delimiter
&lt;code&gt;\f}&lt;/code&gt;. For example:&lt;/p&gt;
&lt;p&gt;[code]&lt;br&gt;
\f{equation}&lt;br&gt;
F = ma&lt;br&gt;
\f}&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Then finally, a non-numbered equation can be created on its own line by
using:&lt;/p&gt;
&lt;p&gt;[code]&lt;br&gt;
\f[&lt;br&gt;
a^2 + b^2 = c^2&lt;br&gt;
\f]&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;In WordPress, there is only one way to embed mathematics, which is to
use the opening delimiter &lt;code&gt;$latex&lt;/code&gt; followed by the closing delimiter
&lt;code&gt;$&lt;/code&gt;. This is used whether we want the maths in-line or on its own line;
there's no support for equation numbering.&lt;/p&gt;
&lt;p&gt;Replacing the second two types is trivial, because the opening and
closing delimiters are different, as they are for WordPress. Hence:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
# Replace the maths delimiters&lt;br&gt;
line = line.replace('\\f{equation}','&lt;span class="math"&gt;\(')  
line = line.replace('\\\\f[','\)&lt;/span&gt;')&lt;br&gt;
line = line.replace('\\f}','&lt;span class="math"&gt;\(')  
line = line.replace('\\\\f]','\)&lt;/span&gt;')&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;does the trick nicely. Note we add an extra &lt;code&gt;\&lt;/code&gt; to protect the &lt;code&gt;\&lt;/code&gt; that
appears in the string we want to match. Without this, the &lt;code&gt;\f&lt;/code&gt; would be
interpreted as the form-feed escape sequence.&lt;/p&gt;
&lt;p&gt;For the in-line equations it's slightly more complex, because the start
and end delimiter in Doxygen are the same, but we need to replace them
with different start and end delimiters for WordPress to understand. We
go back to regular expressions:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
# Replace the inline maths delimiters&lt;br&gt;
for item in p1.finditer(line):&lt;br&gt;
istr = item.group()&lt;br&gt;
ostr = '&lt;span class="math"&gt;\('+istr.strip('@f\)&lt;/span&gt;')+'$'&lt;br&gt;
line = line.replace(istr,ostr)&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;We saw &lt;code&gt;p1&lt;/code&gt; defined earlier as:&lt;/p&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
p1 = re.compile('@f\&lt;span class="math"&gt;\([^@]*@f\\\)&lt;/span&gt;')&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Here we are trying to match something that begins and ends with a
literal &lt;code&gt;@f$&lt;/code&gt;, which we have to write as &lt;code&gt;@f$&lt;/code&gt; because &lt;code&gt;$&lt;/code&gt; is also a
special character in the regular expression language, but we want it to
be interpreted literally. In between we will allow any expression of any
length as long as it doesn't contain a &lt;code&gt;@&lt;/code&gt; symbol. This is represented
by &lt;code&gt;[^@]*&lt;/code&gt;. The rest should be self-explanatory.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;So that's a lengthy explanation of a fairly short and simple script (it
certainly took a lot longer to write...). It's also a fairly esoteric
use case I should think, so will probably be of use to all of 3 other
people if I'm lucky! The final, full script is reproduced below.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[code lang="python"]&lt;br&gt;
import sys&lt;br&gt;
import os&lt;br&gt;
import re&lt;/p&gt;
&lt;h2&gt;#&lt;/h2&gt;
&lt;p&gt;def checkfile(filename):&lt;/p&gt;
&lt;p&gt;errmsg = []&lt;/p&gt;
&lt;p&gt;filebase, fileext = os.path.splitext(filename)&lt;/p&gt;
&lt;p&gt;if fileext != '.md':&lt;br&gt;
errmsg.append(filename+' is not Markdown')&lt;/p&gt;
&lt;p&gt;if not os.path.isfile(filename):&lt;br&gt;
errmsg.append(filename+' does not exist or is not&lt;br&gt;
a file')&lt;/p&gt;
&lt;p&gt;return errmsg&lt;/p&gt;
&lt;h2&gt;#&lt;/h2&gt;
&lt;p&gt;def processfile(filename,reffile='references.md'):&lt;/p&gt;
&lt;p&gt;fi = open(filename,'r')&lt;br&gt;
fo = open(filename+'.txt','w')&lt;br&gt;
fr = open(reffile,'r')&lt;/p&gt;
&lt;p&gt;p1 = re.compile('@f\&lt;span class="math"&gt;\([^@]*@f\\\)&lt;/span&gt;')&lt;br&gt;
p2 = re.compile('@ref [^"]&lt;em&gt; "[^"]&lt;/em&gt;"')&lt;/p&gt;
&lt;p&gt;refnum = 1&lt;br&gt;
footnotes = []&lt;/p&gt;
&lt;p&gt;for line in fi:&lt;/p&gt;
&lt;p&gt;# Some of the later changes insert "&amp;lt;" and "&amp;gt;" so do these&lt;br&gt;
# as early as possible&lt;br&gt;
line = line.replace('&amp;lt;','&amp;lt;')&lt;br&gt;
line = line.replace('&amp;gt;','&amp;gt;')&lt;/p&gt;
&lt;p&gt;# Remove the table of contents special command&lt;br&gt;
line = line.replace('\\tableofcontents','')&lt;/p&gt;
&lt;p&gt;# Replace the Doxygen special commands for sections with&lt;br&gt;
# Markdown&lt;br&gt;
if '\section' in line:&lt;br&gt;
fields = line.split()&lt;br&gt;
line = '# ' + ' '.join(fields[2:])&lt;br&gt;
if '\subsection' in line:&lt;br&gt;
fields = line.split()&lt;br&gt;
line = '## ' + ' '.join(fields[2:])&lt;br&gt;
if '\subsubsection' in line:&lt;br&gt;
fields = line.split()&lt;br&gt;
line = '### ' + ' '.join(fields[2:])&lt;/p&gt;
&lt;p&gt;# References&lt;br&gt;
# Doxygen format is '@ref doxref "reference text"'&lt;br&gt;
# Replace with an HTML link to a footnote '&lt;a href="fn1"&gt;reference
text&lt;/a&gt;'&lt;br&gt;
for item in p2.finditer(line):&lt;br&gt;
istr = item.group()&lt;br&gt;
refidstr = 'fn'+str(refnum)&lt;br&gt;
fields = istr.split()&lt;br&gt;
reftxt = " ".join(fields[2:]).strip('"')&lt;br&gt;
doxref = fields[1]&lt;br&gt;
fr.seek(0)&lt;br&gt;
for refline in fr:&lt;br&gt;
if doxref in refline:&lt;br&gt;
reffull = ' '.join(refline.strip().split()[3:])&lt;br&gt;
break&lt;br&gt;
ostr = '&lt;a href="\#'+refidstr+'"&gt;'+reftxt+'&lt;/a&gt;'&lt;br&gt;
line = line.replace(istr,ostr)&lt;br&gt;
footnotes.append('&lt;a name="'+refidstr+'"&gt;'+reffull+'&lt;/a&gt;')&lt;br&gt;
refnum += 1&lt;/p&gt;
&lt;p&gt;# Replace the maths delimiters&lt;br&gt;
line = line.replace('\\f{equation}','&lt;span class="math"&gt;\(')  
line = line.replace('\\\\f[','\)&lt;/span&gt;')&lt;br&gt;
line = line.replace('\\f}','&lt;span class="math"&gt;\(')  
line = line.replace('\\\\f]','\)&lt;/span&gt;')&lt;/p&gt;
&lt;p&gt;# Replace the inline maths delimiters&lt;br&gt;
for item in p1.finditer(line):&lt;br&gt;
istr = item.group()&lt;br&gt;
ostr = '&lt;span class="math"&gt;\('+istr.strip('@f\)&lt;/span&gt;')+'$'&lt;br&gt;
line = line.replace(istr,ostr)&lt;/p&gt;
&lt;p&gt;fo.write(line+'\n')&lt;/p&gt;
&lt;p&gt;# Write out the footnotes generated by processing the references&lt;br&gt;
fo.write('&lt;hr&gt;\n')&lt;br&gt;
fo.write('&lt;ol&gt;\n')&lt;br&gt;
for fn in footnotes:&lt;br&gt;
fo.write('&lt;li&gt;'+fn+'\n')&lt;br&gt;
fo.write('&lt;/ol&gt;\n')&lt;/p&gt;
&lt;p&gt;fi.close()&lt;br&gt;
fo.close()&lt;br&gt;
fr.close()&lt;/p&gt;
&lt;p&gt;return&lt;/p&gt;
&lt;h2&gt;#&lt;/h2&gt;
&lt;p&gt;def processdox(filename,reffile):&lt;/p&gt;
&lt;p&gt;errmsg = checkfile(filename)&lt;/p&gt;
&lt;p&gt;if len(errmsg) == 0:&lt;br&gt;
processfile(filename,reffile=reffile)&lt;/p&gt;
&lt;p&gt;return errmsg&lt;/p&gt;
&lt;h2&gt;#&lt;/h2&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;/p&gt;
&lt;p&gt;args = sys.argv[1:]&lt;/p&gt;
&lt;p&gt;reffile = '/default/path/to/references.md'&lt;/p&gt;
&lt;p&gt;for arg in args:&lt;br&gt;
errmsg = processdox(arg,reffile)&lt;br&gt;
for msg in errmsg:&lt;br&gt;
print msg&lt;br&gt;
[/code]&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="doxygen"></category><category term="latex"></category><category term="markdown"></category><category term="python"></category><category term="regular expressions"></category><category term="text processing"></category><category term="wordpress"></category></entry><entry><title>Restarting the LHC</title><link href="http://0x7df.github.io/restarting-the-lhc.html" rel="alternate"></link><published>2015-03-22T18:13:00+00:00</published><updated>2015-03-22T18:13:00+00:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-03-22:/restarting-the-lhc.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.flickr.com/photos/11304375@N07/2046228644/"&gt;&lt;img alt="The Large Hadron Collider/ATLAS at CERN from Flickr via
Wylio" src="https://farm3.staticflickr.com/2326/2046228644_05507000b3_z.jpg" title="'The Large Hadron Collider/ATLAS at CERN' by Image Editor, released on Flickr under the Creative Commons Attribution License (https://creativecommons.org/licenses/by/2.0/), found via Wylio"&gt;&lt;/a&gt;
© 2007 &lt;a href="https://www.flickr.com/people/11304375@N07/" title="'The Large Hadron Collider/ATLAS at CERN' published on Flickr by Image Editor"&gt;Image
Editor&lt;/a&gt;,
&lt;a href="https://www.flickr.com/photos/11304375@N07/2046228644/" title="from Flickr"&gt;Flickr&lt;/a&gt;
|
&lt;a href="https://creativecommons.org/licenses/by/2.0/" title="Creative Commons Attribution License  https://creativecommons.org/licenses/by/2.0/"&gt;CC-BY&lt;/a&gt;
| &lt;a href="https://www.wylio.com" title="Easily credit free 'large hadron collider' pictures with Wylio."&gt;via
Wylio&lt;/a&gt;[/caption]&lt;/p&gt;
&lt;p&gt;As the &lt;a href="http://home.web.cern.ch/topics/large-hadron-collider"&gt;Large Hadron Collider
(LHC)&lt;/a&gt; gears up,
after a big upgrade, to start its second major run, this post is a
reminder of the story so far.&lt;/p&gt;
&lt;h2&gt;What is it?&lt;/h2&gt;
&lt;p&gt;The Large Hadron Collider (LHC) is the largest &lt;a href="http://en.wikipedia.org/wiki/Particle_accelerator"&gt;particle
accelerator&lt;/a&gt; in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.flickr.com/photos/11304375@N07/2046228644/"&gt;&lt;img alt="The Large Hadron Collider/ATLAS at CERN from Flickr via
Wylio" src="https://farm3.staticflickr.com/2326/2046228644_05507000b3_z.jpg" title="'The Large Hadron Collider/ATLAS at CERN' by Image Editor, released on Flickr under the Creative Commons Attribution License (https://creativecommons.org/licenses/by/2.0/), found via Wylio"&gt;&lt;/a&gt;
© 2007 &lt;a href="https://www.flickr.com/people/11304375@N07/" title="'The Large Hadron Collider/ATLAS at CERN' published on Flickr by Image Editor"&gt;Image
Editor&lt;/a&gt;,
&lt;a href="https://www.flickr.com/photos/11304375@N07/2046228644/" title="from Flickr"&gt;Flickr&lt;/a&gt;
|
&lt;a href="https://creativecommons.org/licenses/by/2.0/" title="Creative Commons Attribution License  https://creativecommons.org/licenses/by/2.0/"&gt;CC-BY&lt;/a&gt;
| &lt;a href="https://www.wylio.com" title="Easily credit free 'large hadron collider' pictures with Wylio."&gt;via
Wylio&lt;/a&gt;[/caption]&lt;/p&gt;
&lt;p&gt;As the &lt;a href="http://home.web.cern.ch/topics/large-hadron-collider"&gt;Large Hadron Collider
(LHC)&lt;/a&gt; gears up,
after a big upgrade, to start its second major run, this post is a
reminder of the story so far.&lt;/p&gt;
&lt;h2&gt;What is it?&lt;/h2&gt;
&lt;p&gt;The Large Hadron Collider (LHC) is the largest &lt;a href="http://en.wikipedia.org/wiki/Particle_accelerator"&gt;particle
accelerator&lt;/a&gt; in the
world, costing over 6.3b Euros.&lt;/p&gt;
&lt;p&gt;For &lt;a href="http://www.particleadventure.org/hadrons.html"&gt;hadrons&lt;/a&gt;, read
&lt;a href="http://education.jlab.org/glossary/proton.html"&gt;protons&lt;/a&gt;. (Protons are
one of a class of sub-atomic particles called hadrons; hence the name.)
The basic idea is to accelerate the protons until they have very high
energies, and then smash them into each other; the result of each
collision is the creation of a number other particles, which can be
studied. In particular, the purpose of it was to find and study one
specific particle called the &lt;a href="www.newscientist.com/topic/higgs-boson"&gt;Higgs
boson&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;How are the particles accelerated?&lt;/h2&gt;
&lt;p&gt;To get to the necessary high energies, the protons need a long track; so
they're steered around a 27 km-long underground ring, typically
circulating many times before colliding. The acceleration, including the
steering round the circular track, is done by thousands of powerful
&lt;a href="http://hyperphysics.phy-astr.gsu.edu/hbase/solids/scmag.html"&gt;superconducting
magnets&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;How much energy?&lt;/h2&gt;
&lt;p&gt;The energy of the protons being collided is measured in TeV -
tera-electron-volts (probably easier just to say teravolts - people will
know what you mean from the context). During the first run of LHC, up to
the end of 2012, the proton beams had an energy of 3.5 TeV.&lt;/p&gt;
&lt;p&gt;Now, 1 TeV is &lt;span class="math"&gt;\(10^{12}\)&lt;/span&gt; - or 1 trillion - electron-volts, where an
&lt;a href="http://physics.stackexchange.com/questions/23294/how-much-is-1-electron-volt-ev"&gt;electron-volt is defined as the amount of energy an electron would have
if it were accelerated from rest through a potential difference of 1
V&lt;/a&gt;.
That turns out to be &lt;span class="math"&gt;\(1.6 × 10^{-19}\)&lt;/span&gt; J, so 3.5 TeV is &lt;span class="math"&gt;\(5.6 × 10^{-7}\)&lt;/span&gt; J. For
context, a &lt;a href="www.thefreedictionary.com/joule"&gt;Joule&lt;/a&gt;is the energy it
takes to lift 100 g (e.g. a small apple) through 1 m at the earth's
surface; so, with an energy of 3.5 TeV each, it would take the combined
energy of only 1.8 million of these protons to lift that apple...&lt;/p&gt;
&lt;p&gt;After the upgrade, the proton energy will be 6.5 TeV.&lt;/p&gt;
&lt;p&gt;The total collision energy is twice the beam energy, because two beams
of equal energy are directed head-on at each other. So the first run had
a collision energy of 7 TeV, and the post-upgrade second run will have a
collision energy of 13 TeV. The design intent was always that the LHC
would achieve 14 TeV, but because of technological problems (discussed
later), &lt;a href="home.web.cern.ch"&gt;CERN&lt;/a&gt; have played it safe and kept the energy
lower.&lt;/p&gt;
&lt;p&gt;However, even the lower collision energy of 7 TeV was a big step up from
what had been achieved before: the previous record, set by the 6.3 km
&lt;a href="http://www.fnal.gov/pub/tevatron/"&gt;Tevatron&lt;/a&gt; proton-
&lt;a href="www.britannica.com/EBchecked/topic/28507/antiproton"&gt;antiproton&lt;/a&gt;
collider at &lt;a href="www.fnal.gov"&gt;Fermilab&lt;/a&gt; in Illinois, was 1.96 TeV. And, it
turned out OK, because as we'll see, the LHC
fulfilled its main purpose of discovering the Higgs boson.&lt;/p&gt;
&lt;h2&gt;What are the limiting factors on collision energy?&lt;/h2&gt;
&lt;p&gt;The beam energy, and therefore the collision energy, is limited by the
&lt;a href="http://whatis.techtarget.com/definition/magnetic-field"&gt;magnetic field&lt;/a&gt;
that steers the beam, and the size of the ring.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://physics.info/lorentz/"&gt;magnetic force&lt;/a&gt; provides the
&lt;a href="http://theory.uwinnipeg.ca/physics/circ/node6.html"&gt;centripetal
acceleration&lt;/a&gt;, so:&lt;/p&gt;
&lt;div class="math"&gt;$$ q_pvB = \frac{\gamma m_p v^2}{r} $$&lt;/div&gt;
&lt;p&gt;where &lt;em&gt;q&lt;/em&gt;~p~ and &lt;em&gt;m&lt;/em&gt;~p~ are the charge and mass of the proton,
respectively, &lt;em&gt;v&lt;/em&gt; is its speed, &lt;em&gt;B&lt;/em&gt; is the magnetic field strength, &lt;em&gt;r&lt;/em&gt;
is the radius of the circular motion, and &lt;em&gt;γ&lt;/em&gt; is the &lt;a href="http://simple.wikipedia.org/wiki/Lorentz_factor"&gt;relativistic
factor&lt;/a&gt; that we must
include to account for the fact that the protons are moving at an
appreciable fraction of the speed of light. The energy of a relativistic
proton is &lt;em&gt;γm&lt;/em&gt;~p~, so:&lt;/p&gt;
&lt;div class="math"&gt;$$ q_p B = \frac{E v}{r} $$&lt;/div&gt;
&lt;p&gt;Hence:&lt;/p&gt;
&lt;div class="math"&gt;$$ E = \frac{q_p B r}{v} $$&lt;/div&gt;
&lt;p&gt;A larger ring would have a smaller radius of curvature, and so particles
could be given higher energies and still be kept on track with a given
field strength. For example, using the LHC-type 9
&lt;a href="http://www.teslasociety.com/teslaunit.htm"&gt;Tesla&lt;/a&gt; magnets in a 100
km-circumference collider, rather than a 27 km one, would allow an
increase of the collision energy to 50 TeV. Clearly, the limitation on
size is the cost.&lt;/p&gt;
&lt;p&gt;Alternatively, for a fixed-size ring, further increasing the beam energy
means having to increase the field strength. The limiting factor for the
field strength is local heating in the superconducting coils, caused in
turn by movement due to the high fields themselves. The heating causes
the coils to cease to be superconducting; this is called &lt;em&gt;quenching&lt;/em&gt;.
The magnet starts to conduct normally, and releases a large part of its
stored energy as heat, which in turn boils off the &lt;a href="http://www.wired.com/2012/08/questions-and-answers-about-liquid-helium/"&gt;liquid
helium&lt;/a&gt;
coolant and induces high pressures. (Note that, during preparations,
quenching is done deliberately to increase the strength of the field
that the magnets can support. The field is gradually increased until
quenching occurs; when this process is repeated, the quenching occurs at
a higher field strength. This is continued until the magnets can support
a sufficiently high field for the beam energy required. The process is
called &lt;em&gt;training&lt;/em&gt;, and takes months.)&lt;/p&gt;
&lt;p&gt;Furthermore, protons, like electrons and other charged particles, emit
&lt;a href="http://abyss.uoregon.edu/~js/glossary/synchrotron_radiation.html"&gt;synchrotron
radiation&lt;/a&gt;
and thus lose energy when they travel in circular orbits such as in the
LHC. The radiated power goes as the fourth power of &lt;em&gt;γ&lt;/em&gt;, and since the
energy of a relativistic proton is &lt;em&gt;γm&lt;/em&gt;~p~, the rate of energy loss is
proportional to the fourth power of the beam energy. Clearly also, the
loss is worse for electrons and positrons, because of their lower mass,
than for protons.&lt;/p&gt;
&lt;h2&gt;Is the beam energy all that matters?&lt;/h2&gt;
&lt;p&gt;The other important aspect of a particle collider is the intensity of
the beam, which dictates the rate of collisions. This is usually
characterised by a quantity called the &lt;em&gt;luminosity.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Working out the collision rate is fairly simply. It helps to know that
the particles are actually grouped into &lt;em&gt;bunches&lt;/em&gt;, rather than being a
continuous stream. If we imagine one beam as a stationary target and the
other beam as impacting on it (with twice the nominal collision energy),
it makes it easier to work out the collision rate. The number of protons
in the target bunch is &lt;em&gt;n~T~&lt;/em&gt;, and the cross-sectional area of each
proton is &lt;em&gt;σ&lt;/em&gt;, so the total area 'blocked out' by the target protons in
&lt;em&gt;n~T~σ&lt;/em&gt;. The actual cross-sectional area of the beam is &lt;em&gt;πr&lt;/em&gt;^2^; so the
proportion of this that's blocked out by protons is &lt;em&gt;n~T~σ&lt;/em&gt; / &lt;em&gt;πr&lt;/em&gt;^2^ -
the rest of the area is empty space. (This assumes that the protons in
the bunch are spaced out enough that, if we were to look along the
length of the 'target' beam, none of the protons further away from us
would be hidden behind any others. Because the size of the protons is so
astonishingly tiny relative to the cross-sectional area of the beam,
this is a fair assumption).&lt;/p&gt;
&lt;p&gt;Now, when the incident bunch of protons, &lt;em&gt;n~I~&lt;/em&gt;, impacts the target
bunch, the fraction of them that collide with a proton in the target is
equal to the fraction of the total area that's blocked out by target
protons; which we've already determined to be &lt;em&gt;n~T~σ&lt;/em&gt; / &lt;em&gt;πr&lt;/em&gt;^2^. Hence
there are &lt;em&gt;n~I~n~T~σ&lt;/em&gt; / &lt;em&gt;πr&lt;/em&gt;^2^ collisions for every bunch crossing. If
the rate of bunch crossings is &lt;em&gt;f&lt;/em&gt;, then the overall collision rate is
&lt;em&gt;fn~I~n~T~σ&lt;/em&gt; / &lt;em&gt;πr&lt;/em&gt;^2^.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nature.com/ncomms/journal/v2/n9/full/ncomms1472.html"&gt;The cross-section for inelastic scatter is about 60
mb&lt;/a&gt;,
which is 6 × 10^-30^ m^2^. The diameter of the beam at the point of
collision is about 16 microns, so its cross-sectional area is 2 ×
10^-10^ m^2^. The ratio of these areas - and therefore the probability
of a collision - is about 3 × 10^-20^. The value of &lt;em&gt;n&lt;/em&gt; is about 10^11^,
which suggests the number of collisions is 300 per bunch crossing. The
bunches are crossed every 50 ns, so there are 2 × 10^7^ crossings per
second, and so 6 billion collisions per second. (Actually, the figures
are about a factor of 15 too high - &lt;a href="http://cds.cern.ch/record/1165534/files/CERN-Brochure-2009-003-Eng.pdf"&gt;CERN reports the number of
collision per bunch to be about 20 for bunch size of
10&lt;/a&gt;^11^,
suggesting the cross-section of 60 mb used should be more like 4 mb.)&lt;/p&gt;
&lt;p&gt;It's conventional to take the proton cross-section, which is dependent
on the proton energy but otherwise doesn't vary with the characteristics
of the accelerator, out of this equation; what's left is referred to as
the &lt;em&gt;luminosity&lt;/em&gt;, &lt;em&gt;L&lt;/em&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ L = \frac{f n_I n_T }{\pi r^2}  $$&lt;/div&gt;
&lt;p&gt;which is expressed in collisions per unit area per unit time, i.e. it
has units of [T]^-1^ [L]^-2^.  With luminosity so defined, the collision
rate is just the product of the accelerator's luminosity and the
cross-section of the proton collision (at the particular proton energy
in question).&lt;/p&gt;
&lt;p&gt;The total number of collisions during some time period is the integral
of the collision rate over the time period. Of course, this is equal to
the integral of the luminosity over the time period, times the
cross-section (assuming that the cross-section remains constant over
time, because it only depends on the beam energy, so it can be brought
out of this integration):&lt;/p&gt;
&lt;div class="math"&gt;$$ N = \int_0^T R dt  $$&lt;/div&gt;
&lt;div class="math"&gt;$$ N = \sigma \int_0^T L dt  $$&lt;/div&gt;
&lt;p&gt;The integrated luminosity has units of inverse area, [L]^-2^.&lt;/p&gt;
&lt;p&gt;The unit of area in typical use is the
&lt;a href="http://en.wikipedia.org/wiki/Barn_%28unit%29"&gt;&lt;em&gt;barn&lt;/em&gt;&lt;/a&gt;, which is
approximately the cross-sectional area of the
&lt;a href="http://education.jlab.org/itselemental/ele092.html"&gt;uranium&lt;/a&gt;nucleus (1
b is 10^-28^ m^2^). A &lt;em&gt;femtobarn&lt;/em&gt; is 10^-15^ b, so 1 fb = 10^-43^ m^2^.
Hence, the luminosity is measured in fb^-1^ s^-1^, which, when
multiplied by the collision cross-section in fb, gives a collision rate
in s^-1^. The time-integrated luminosity is therefore typically
expressed in &lt;em&gt;inverse femtobarns&lt;/em&gt;. In fact, the total number of
collisions is also usually quoted in inverse femtobarns (the true number
of collisions would be this number times the cross-section of the
proton-proton collision at whatever energy is being used). Given the
actual cross-section of the proton-proton collision at 7 TeV collision
energy, 1 fb^-1^ corresponds to about 8 × 10^12^ collisions.&lt;/p&gt;
&lt;h2&gt;What about the magnets?&lt;/h2&gt;
&lt;p&gt;There are several thousand superconducting magnets, cooled by helium to
1.9 K, of various types. For example, there are 392 quadrupole-type
magnets, which focus the proton beams along the straight sections, and
1,232 dipole magnets.&lt;/p&gt;
&lt;h2&gt;So there were teething problems?&lt;/h2&gt;
&lt;p&gt;There were some early problems. On 27 March 2007 one of the
quadrupole-type superconducting magnets failed a preliminary test. The
magnet was deliberately being subjected to high pressures, similar to
those that occur during quenching. The magnet that failed was built by
Fermilab.&lt;/p&gt;
&lt;p&gt;That was embarrassing, more for Fermilab than CERN, but things got worse
after initial switch-on. Protons were first streamed in both directions
around the tunnel on 10 September 2008, at 0.45 TeV beam energy.
However, only eight or nine days later, an accident occurred in which
the electrical connection between two of the 1,232 superconducting
dipole magnets evaporated while carrying a current of 8.7 kA, as the
beam energy was being increased to 5 TeV per beam. An electrical arc
occurred that ruptured the cooling system, allowing six tonnes of liquid
helium to boil off and leak into the tunnel. The pressure spike created
a shock wave that damaged a few hundred metres of the tunnel. Repairs
cost 40m Euros: 53 magnets had to be brought back to the surface, and
either repaired or replaced.&lt;/p&gt;
&lt;p&gt;On 23 November 2009, over a year later, the LHC returned to accelerating
protons, initially at 0.45 TeV per beam again. On December 9 members of
the &lt;a href="http://iopscience.iop.org/1748-0221/3/08/S08003"&gt;ATLAS
collaboration&lt;/a&gt; spotted
2.36 TeV collisions during test circulations. By December 16, there had
been 50,000 collisions at this energy. Overall this was four years later
than originally expected.&lt;/p&gt;
&lt;p&gt;In March 2010, CERN announced its plans to keep the collision energy to
7 TeV for the next 18-24 months, or until an inverse femtobarn of data
had been collected.&lt;/p&gt;
&lt;p&gt;It was realised that the copper stabilisers surrounding the
superconducting cables, which bear electrical current in the event that
the superconducting cables fail, had too high a resistance. There are
10,000 of these connections. The upgrade that has been going on over the
past two years has involved, among other things, replacing these shunts.
The upgrade cost 124m Euros. However, despite this, CERN is still going
to run LHC at 13 TeV rather than the design energy of 14 TeV.&lt;/p&gt;
&lt;h2&gt;What are the experiments?&lt;/h2&gt;
&lt;p&gt;There are four interaction points around the ring. The two main
experiments are the 7000-tonne ATLAS and the 12,500-tonne CMS (compact
muon solenoid), which are general-purpose detectors involved in the
search for the Higgs boson. A third, smaller experiment -
&lt;a href="http://www-pnp.physics.ox.ac.uk/~lhcb/index.shtml"&gt;LHCb&lt;/a&gt; - is involved
in detailed investigations into B-mesons. A fourth is
&lt;a href="http://www.uslhc.us/What_is_the_LHC/Experiments/ALICE"&gt;ALICE&lt;/a&gt;, which is
designed to study collisions between nuclei such as lead, which the LHC
delivers in special runs.&lt;/p&gt;
&lt;h2&gt;What is it for?&lt;/h2&gt;
&lt;p&gt;The Higgs boson was the last missing piece of &lt;a href="http://www.superstringtheory.com/experm/exper2.html"&gt;the Standard Model of
particle physics&lt;/a&gt;,
which was conceived in the early 1970s and remains the best description
of particle physics. The existence of the particle was predicted by
&lt;a href="http://www.ph.ed.ac.uk/higgs/peter-higgs"&gt;Peter Higgs&lt;/a&gt; in 1964, and
Higgs (along with&lt;a href="http://www.ulb.ac.be/sciences/physth/people_FEnglert.html"&gt;Francois
Englert&lt;/a&gt;) won
the &lt;a href="http://www.nobelprize.org/nobel_prizes/physics/laureates/2013/"&gt;Nobel Prize for physics in
2013&lt;/a&gt;,
after the particle was discovered at the LHC. The significance of the
Higgs is usually said to be that it explains how some particles acquire
mass.&lt;/p&gt;
&lt;p&gt;The idea is that there's a uniform scalar field pervading the universe,
and that interactions of particles with this field is what gives those
particles their mass. The stronger a particle's interaction with the
field is, the greater its mass. Photons have no interaction whatsoever,
electrons have a weak interaction, etc. This field has come to be known
as the &lt;a href="http://simple.wikipedia.org/wiki/Higgs_field"&gt;&lt;em&gt;Higgs field&lt;/em&gt;&lt;/a&gt;,
and the phenomenon of particles acquiring mass through coupling with
this field as the &lt;em&gt;Higgs mechanism&lt;/em&gt;. An analogy often given for the
mechanism is that it's like the particles are travelling through treacle
or molasses; particles more strongly coupled to the field aren't able to
travel as far, before they decay into lighter particles. But Higgs
himself has complained that this isn't an appropriate metaphor, as the
mechanism isn't dissipative.&lt;/p&gt;
&lt;p&gt;This mechanism was independently proposed by Francois Englert and
&lt;a href="http://cerncourier.com/cws/article/cern/46542"&gt;Robert Brout&lt;/a&gt; at the
&lt;a href="http://www.ulb.ac.be/ulb/presentation/uk.html"&gt;Free University of
Brussels&lt;/a&gt;, as well as
Higgs, and also by &lt;a href="http://www.nytimes.com/2014/05/04/us/gerald-guralnik-77-a-god-particle-pioneer-dies.html"&gt;Gerald
Guralnik&lt;/a&gt;,
&lt;a href="http://www.rochester.edu/news/hagen/"&gt;Carl Hagen&lt;/a&gt; and &lt;a href="http://www.imperial.ac.uk/people/t.kibble"&gt;Thomas
Kibble&lt;/a&gt; at &lt;a href="www.imperial.ac.uk"&gt;Imperial
College&lt;/a&gt;. Higgs has always felt uncomfortable about
his name being the one associated with the phenomenon; in fact, Brout
and Englert published their paper two weeks before he did. However,
Higgs was the one who proposed that the mechanism would have
'experimental consequences'; i.e. that, as a consequence of
wave-particle duality, vibrations in the Higgs field ought to manifest
as particles, in the same way that vibrations in the electromagnetic
field manifest as
&lt;a href="www.universetoday.com/74027/what-are-photons"&gt;photons&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The theory did not predict the mass, however, of the Higgs boson. Hence,
the &lt;a href="http://hepwww.rl.ac.uk/public/bigbang/file9.html"&gt;LEP&lt;/a&gt; (the Large
Electron Positron Collider, which previously occupied the tunnel the LHC
is in now and which operated with a collision energy of 200 GeV for 11
years from 1989 to 2000, to provide data to study the
&lt;a href="http://images-of-elements.com/particle-zoo/w-boson.php"&gt;W&lt;/a&gt; and &lt;a href="http://images-of-elements.com/particle-zoo/z-boson.php"&gt;Z
bosons&lt;/a&gt;, as well
as to search for the Higgs boson), the &lt;a href="http://www.scientificamerican.com/article/the-supercollider-that-never-was/"&gt;Superconducting Super
Collider&lt;/a&gt;
(which started to be built in Texas but was never completed due to cost
over-runs), the Tevatron at Fermilab, and ultimately the LHC, were
conceived of to verify the existence of the Higgs boson and measure its
mass.&lt;/p&gt;
&lt;p&gt;Prior to the LHC, theory suggested the mass of the Higgs was probably no
more than 186 GeV, and the LEP's failure to find it demonstrated that
the Higgs could not be less than 114 GeV. The Tevatron data at 1.96 TeV
collision energy ruled out masses around 165 GeV, and suggested the
160-180 GeV range was unlikely. This left two regions - a lighter region
of 114-160 GeV and a heavier region of 180-186 GeV - unexplored.&lt;/p&gt;
&lt;h2&gt;Finding the Higgs&lt;/h2&gt;
&lt;p&gt;On 30 March 2010, 18 months after start-up, the first collisions at 7
TeV collisions, were achieved, but at low luminosity. The original
intention was to run for 18-24 months at 7 TeV. Serious data collection
began in 2011; by summer 2011 the mass range of the Higgs had been
narrowed down to 115-145 GeV, and by 13 December 2011 CERN was able to
announce that the energy range had been restricted to 116-130 GeV, with
'an intriguing excess' at around 125 GeV.&lt;/p&gt;
&lt;p&gt;Further measurements began in April 2012. At this point, the beam energy
was increased from 3.5 TeV to 4 TeV. On 4 July 2012, the discovery of
the Higgs boson, with a mass of around 125 GeV, was announced with
5&lt;span class="math"&gt;\( \sigma\)&lt;/span&gt; significance by both ATLAS and
&lt;a href="http://iopscience.iop.org/1748-0221/3/08/S08004/pdf/1748-0221_3_08_S08004.pdf"&gt;CMS&lt;/a&gt;.
This is the same mass as about 133 protons, or one caesium atom.&lt;/p&gt;
&lt;p&gt;A further three months of run time was announced beyond the scheduled
shut-down at the end of 2012. The first run ended in February 2013,
after three years.&lt;/p&gt;
&lt;h2&gt;What is 'five sigma' significance?&lt;/h2&gt;
&lt;p&gt;The protons are collided in bunches, which causes pile-up - multiple
collisions within each bunch crossing. Furthermore, protons aren't
elementary particles like electrons, but are composite particles made of
&lt;a href="http://www.physics.ox.ac.uk/documents/PUS/dis/fundam.htm"&gt;quarks&lt;/a&gt;held
together by
&lt;a href="http://math.ucr.edu/home/baez/physics/ParticleAndNuclear/gluons.html"&gt;gluons&lt;/a&gt;.
Therefore, when they collide at these high energies, a lot of debris is
created - &lt;a href="www.feynman.com/"&gt;Feynman&lt;/a&gt;likened it to 'smashing garbage
cans into garbage cans'. This means there's a huge background of
detected events that disguise the events actually being looked for;
getting confidence about the signal in the light of this background
requires a very large number of collisions to be integrated over a long
period. This is why the luminosity is so significant; obviously the
higher the luminosity, the higher the collision rate, and the less time
it takes to accumulate the necessary data.&lt;/p&gt;
&lt;p&gt;So, the determination of the existence of the Higgs was a statistical
one, based on the agglomeration of a lot of data, rather than something
that could be determined from analysing any one particular collision.
There are many possible outcomes from a proton-proton collision at these
energies, each one a different combination of outgoing particles. Each
combination of outgoing particles is referred to as a &lt;em&gt;decay channel&lt;/em&gt;,
and the probability of each channel, and of the production of each
possible particle, is predicted by the Standard Model and precisely
known. Deviations from these known probabilities, indicating the
presence of a new particle, need to be built up over a long period of
time to establish confidence that it's not merely background. The number
of particles actually detected in a given energy range over a given
period of time is not fixed, but follows a &lt;a href="http://mathworld.wolfram.com/PoissonDistribution.html"&gt;Poisson
distribution&lt;/a&gt;
with a mean equal to the expected number based on the probability.
There's therefore a finite likelihood of detecting more than the
expected number even if there is no new particle in that energy range;
this is just a statistical fluctuation. The excess has to be large to be
attributed to the presence of a new particle; 5&lt;em&gt;σ&lt;/em&gt; is the 'gold
standard' (i.e. the excess has to be at least 5 times the standard
deviation for it to be confidently attributed to a new particle). An
excess of 3&lt;em&gt;σ&lt;/em&gt; is usually referred to as only 'evidence for' it.&lt;/p&gt;
&lt;h2&gt;How much data is this?&lt;/h2&gt;
&lt;p&gt;Each collision/event that is recorded represents a few hundred MB of
data. Because only a small fraction of the theoretically-possible decay
channels involve a Higgs boson being produced, many can be disregarded;
hence only a small fraction of events taking place need to be recorded,
with the majority being deliberately discarded. The data is initially
stored at the on-site tape silo facility known as Tier 0. Reconstructed
data are delivered to regional centres around the world.&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;The upgrade involved:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upgrading the 10,000 electrical interconnections between the dipole
    magnets (the component that failed in the accident that put the LHC
    out of commission for over a year)&lt;/li&gt;
&lt;li&gt;Improving the quench protection system, so that when quenching
    occurs the released energy is dissipated in a controlled way that
    minimises the chance of damage&lt;/li&gt;
&lt;li&gt;Replacing 18 of the 1,232 dipole magnets&lt;/li&gt;
&lt;li&gt;Upgrading the cryogenics&lt;/li&gt;
&lt;li&gt;Improving the vacuum in the beam pipe.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These modifications will allow the LHC to operate safely at the higher
collision energy of 13 TeV.&lt;/p&gt;
&lt;p&gt;The other operational change will be that the bunch size will be reduced
from 1.7 × 10^11^ protons per bunch down to 1.2 × 10^11^. This will
reduce 'pile-up', which is the simultaneous occurrence of numerous
collisions, which are hard to disentangle from each other when analysing
the data. However, the bunches will be collided every 25 ns instead of
every 50 ns, giving an overall increase in luminosity despite the
reduced bunch size.&lt;/p&gt;
&lt;p&gt;Now the two-year upgrade is complete, preparations are underway for the
next major run. The SPS - a 7 km-long accelerator that feeds protons to
the LHC - began being powered up in early July 2014.&lt;/p&gt;
&lt;p&gt;The objectives of the next set of experiments are to further study the
Higgs, but also to investigate dark matter. We've known for some time
that observable matter and energy make up only 5% of the energy in the
universe; the rest is invisible, hard to detect, and we don't know what
it is. The remainder is comprised of &lt;em&gt;dark energy&lt;/em&gt; (70%) and &lt;em&gt;dark
matter&lt;/em&gt; (25%) - we know it's there only through its gravitational pull.
At the new high energies, LHC scientists hope to be able to detect
particles that display the same properties&lt;/p&gt;
&lt;p&gt;LHC is expected to operate into the 2030s.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="particle physics"></category></entry><entry><title>Combinations and permutations</title><link href="http://0x7df.github.io/combinations-and-permutations.html" rel="alternate"></link><published>2015-03-13T05:01:00+00:00</published><updated>2015-03-13T05:01:00+00:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-03-13:/combinations-and-permutations.html</id><summary type="html">&lt;p&gt;The mathematics of combinations and permutations&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://0x7df.files.wordpress.com/2015/02/abstract-balls-blue-200.png"&gt;&lt;img alt="abstract-balls-blue-200" src="https://0x7df.files.wordpress.com/2015/02/abstract-balls-blue-200.png"&gt;&lt;/a&gt;I
recently had to explain the formulae for calculating the number of
combinations and permutations, when selecting &lt;span class="math"&gt;\(r\)&lt;/span&gt;
items out of a pool of &lt;span class="math"&gt;\(n\)&lt;/span&gt;. In case you're ever
in the same boat, here's a refresher. There are four scenarios:&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;td cellpadding=40&gt;
&lt;span style="color:#333399;"&gt;Combinations&lt;/span&gt;&lt;span
style="color:#333399;"&gt;(order doesn't matter):&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;span style="color:#333399;"&gt;Permutations&lt;/span&gt; &lt;span
style="color:#333399;"&gt;(order does matter):&lt;/span&gt;

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;span style="color:#333399;"&gt;Selected items are replaced:&lt;/span&gt;

&lt;/td&gt;
&lt;td align="center"&gt;
$$ \frac{\left(n + r - 1\right)!}{ r!\left(n - 1\right)!}
$$

&lt;/td&gt;
&lt;td align="center"&gt;
$$ n^r $$

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;span style="color:#333399;"&gt;Selected items are not replaced:&lt;/span&gt;

&lt;/td&gt;
&lt;td align="center"&gt;
$$ \frac{n!}{r!\left(n-r\right)!} $$

&lt;/td&gt;
&lt;td align="center"&gt;
$$ \frac{n!}{\left(n-r\right)!} $$

&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3&gt;The factorial function&lt;/h3&gt;
&lt;p&gt;The exclamation mark represents &lt;a href="http://mathworld.wolfram.com/Factorial.html"&gt;the
&lt;em&gt;factorial&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ x! = x \times \left(x-1\right) \times \left(x-2\right)
\times \ldots \times 2 \times 1 $$&lt;/div&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="math"&gt;$$ 5! = 5 \times 4 \times 3 \times 2 \times 1 = 120
$$&lt;/div&gt;
&lt;p&gt;You can invoke it in &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;120&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or perhaps, if you're going to use it a lot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In &lt;a href="http://julialang.org/"&gt;Julia&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ julia
julia&amp;gt; factorial&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;5040&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One last thing to know about the factorial function, is that &lt;span class="math"&gt;\( 0! = 1\)&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Permutations vs. combinations&lt;/h3&gt;
&lt;p&gt;To get the formula right, there are two choices to make. First, we have
to decide whether or not the order that items are selected in matters to
us. The various different arrangements of some group of items are called
&lt;em&gt;permutations&lt;/em&gt; when the order matters; e.g. if the arrangement (1, 2, 3)
is considered different from (2, 3, 1). If the order doesn't matter -
e.g. if the arrangements (a, b, c), (b, c, a), (b, a, c), etc., are
considered to be the same - then the arrangements are referred to as
&lt;em&gt;combinations&lt;/em&gt;.  This depends on the application.&lt;/p&gt;
&lt;h3&gt;With vs. without replacement&lt;/h3&gt;
&lt;p&gt;The second thing we have to consider is whether or not each item that
gets selected is put back into the pool before the next selection is
made. In a &lt;a href="http://en.wikipedia.org/wiki/Lottery"&gt;lottery&lt;/a&gt;, when a ball
is selected, it can't get selected again - this scenario is selection
&lt;em&gt;without replacement&lt;/em&gt;. For a group of kids playing &lt;a href="http://en.wikipedia.org/wiki/Hot_potato_%28game%29"&gt;pass the
parcel&lt;/a&gt;, as far as
they're concerned the same individual can get selected any number of
times - you stay in the game even after you've been selected and you
hope you might get chosen again. So this is selection &lt;em&gt;with
replacement&lt;/em&gt;. (NB in practice that's not a very sensible way to play
pass the parcel if you want an easy time, so adults running the game are
more likely to see it as selection &lt;em&gt;without replacement&lt;/em&gt;...)&lt;/p&gt;
&lt;p&gt;This leads to our four scenarios. Now let's work out the equations.&lt;/p&gt;
&lt;h3&gt;1. Permutations without replacement&lt;/h3&gt;
&lt;p&gt;You have &lt;span class="math"&gt;\( n\)&lt;/span&gt; distinct items and you have to
select &lt;span class="math"&gt;\( r\)&lt;/span&gt;. The order doesn't matter, and the
items aren't replaced in the pool once selected. There are &lt;span class="math"&gt;\( n\)&lt;/span&gt;
possibilities for the first item, but because there is
no replacement, there are only &lt;span class="math"&gt;\(n-1\)&lt;/span&gt;
possibilities for the second item, then only &lt;span class="math"&gt;\( n-2\)&lt;/span&gt;
possibilities for the third, etc. Since, to get the
total number, we're going to multiply these together, we start to see
that the formula for the total number of combinations, say &lt;span class="math"&gt;\( M\)&lt;/span&gt;,
is going to look something like:&lt;/p&gt;
&lt;div class="math"&gt;$$ M = n \times \left(n-1\right) \times \left(n-2\right)
\times \ldots $$&lt;/div&gt;
&lt;p&gt;If we continued this series of terms right to the end, down to 1, then
that would be the same as taking the factorial of &lt;span class="math"&gt;\( n\)&lt;/span&gt;.
However, the number of terms we need to multiply
together is the same as the number of selections in whatever game we're
playing. We need to remember we're only selecting &lt;span class="math"&gt;\( r\)&lt;/span&gt;
items, so there are going to be only &lt;span class="math"&gt;\( r\)&lt;/span&gt;
terms:&lt;/p&gt;
&lt;div class="math"&gt;$$ M = n \times \left(n-1\right) \times \left(n-2\right)
\times \ldots \times \left(n-r+1\right) $$&lt;/div&gt;
&lt;p&gt;So just taking the factorial of &lt;span class="math"&gt;\( n\)&lt;/span&gt; will only
give the right answer if we want to select all the items eventually,
i.e. if &lt;span class="math"&gt;\( r = n\)&lt;/span&gt;. In general we need to truncate
the series after &lt;span class="math"&gt;\( r\)&lt;/span&gt; terms. How do we do this?
The answer is going to be &lt;span class="math"&gt;\( n!/\left(n-r\right)!\)&lt;/span&gt;,
and this will be easiest to see using an example. Let
&lt;span class="math"&gt;\( n = 6\)&lt;/span&gt; and &lt;span class="math"&gt;\( r = 3\)&lt;/span&gt;. We
can write the answer out the long way:&lt;/p&gt;
&lt;div class="math"&gt;$$ M = 6 \times 5 \times 4 $$&lt;/div&gt;
&lt;p&gt;and compare this with the formula for &lt;span class="math"&gt;\( n!\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ n! = 6 \times 5 \times 4 \times 3 \times 2 \times 1 $$&lt;/div&gt;
&lt;p&gt;Clearly:&lt;/p&gt;
&lt;div class="math"&gt;$$ M = \frac{n!}{\left(3 \times 2 \times 1 \right)}$$&lt;/div&gt;
&lt;p&gt;which of course is the same as&lt;/p&gt;
&lt;div class="math"&gt;$$ M = \frac{n!}{3!}$$&lt;/div&gt;
&lt;p&gt;After working out another couple of simple examples
like this, you will see that the denominator always needs to be
&lt;span class="math"&gt;\( \left(n-r\right)!\)&lt;/span&gt;, to cancel out the last
&lt;span class="math"&gt;\( \left(n-r\right)!\)&lt;/span&gt; terms of the factorial of &lt;span class="math"&gt;\( n\)&lt;/span&gt;, leaving just the first &lt;span class="math"&gt;\( r\)&lt;/span&gt;
terms that we need. Hence:&lt;/p&gt;
&lt;div class="math"&gt;$$ M = \frac{n!}{\left(n-r\right)!} $$&lt;/div&gt;
&lt;h3&gt;2. Permutations with replacement&lt;/h3&gt;
&lt;p&gt;The difference here from the last example is that each time we make a
selection, we replace the item afterwards. Every selection is made from
the same original pool, rather than from a gradually decreasing pool. So
in this case the formula is going to look something like:&lt;/p&gt;
&lt;div class="math"&gt;$$ M = n \times n \times n \times \ldots $$&lt;/div&gt;
&lt;p&gt;The logic above about there only being &lt;span class="math"&gt;\( r\)&lt;/span&gt; terms
is exactly the same here, so we end up with:&lt;/p&gt;
&lt;div class="math"&gt;$$ M = n^r $$&lt;/div&gt;
&lt;p&gt;Simple!&lt;/p&gt;
&lt;h3&gt;3. Combinations without replacement&lt;/h3&gt;
&lt;p&gt;Now we take the first scenario - permutations without replacement - and
adapt it to the scenario where we don't distinguish between different
orderings of the selected items. Clearly, we're going to have reduce the
number - there will be fewer combinations than there are permutations.
Let's assume &lt;span class="math"&gt;\( n = 5\)&lt;/span&gt; and &lt;span class="math"&gt;\( r = 3\)&lt;/span&gt;.
Imagine the items are numbered balls like in a
lottery, and imagine the selected balls are (1, 3, 4). If these were
your numbers, you'd win no matter what order they came out in, so the
permutations of the &lt;span class="math"&gt;\( r\)&lt;/span&gt; selected items - (1, 3,
4), (1, 4, 3), (3, 1, 4), (3, 4, 1), (4, 1, 3) and (4, 3, 1) - are the
same, and should be considered just one distinct arrangement. Of course,
we already know that there are &lt;span class="math"&gt;\( r!\)&lt;/span&gt; permutations
of &lt;span class="math"&gt;\( r\)&lt;/span&gt; selected items, so if we care about the
order of the selected items, then there are going to be &lt;span class="math"&gt;\( r!\)&lt;/span&gt;
more possibilities than if we don't. So, all we have to
do to get the number of combinations is reduce the number of
permutations by a factor of &lt;span class="math"&gt;\( r!\)&lt;/span&gt;. Hence:&lt;/p&gt;
&lt;div class="math"&gt;$$ M = \frac{n!}{r!\left(n-r\right)!} $$&lt;/div&gt;
&lt;h3&gt;4. Combinations with replacement&lt;/h3&gt;
&lt;p&gt;This scenario is slightly more complicated. &lt;em&gt;Without&lt;/em&gt; replacement, to
get from the number of permutations to the number of combinations, we
just reduced by a factor of &lt;span class="math"&gt;\( r!\)&lt;/span&gt;. You might
therefore think that the answer here is going to be the number of
permutations &lt;em&gt;with&lt;/em&gt; replacement, similarly reduced by a factor of
&lt;span class="math"&gt;\( r!\)&lt;/span&gt;; but it isn't. Let's take a simple example:
a pool of three numbers, and selection of two items. The permutations
without replacement are:&lt;/p&gt;
&lt;p&gt;(1,2)
&lt;span style="color:#ff0000;"&gt;(2,1)&lt;/span&gt;
(1,3)
&lt;span style="color:#ff0000;"&gt;(3,1)&lt;/span&gt;
(2,3)
&lt;span style="color:#ff0000;"&gt;(3,2)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;and the additional ones if replacement is allowed are:&lt;/p&gt;
&lt;p&gt;(1,1)
(2,2)
(3,3)&lt;/p&gt;
&lt;p&gt;The permutations highlighted in red are the ones you'd get rid of if you
were interested only in combinations. Notice that there aren't any red
ones in the second batch - the "extra" possibilities that arise when
replacement is allowed are the same for permutations as for combinations
(in this special case of selecting two items). When you generalise this
idea to larger numbers, you do end up with some red items in the second
batch, but not as high a proportion as in the first batch. So we have to
reduce the second batch by some different factor, not &lt;span class="math"&gt;\( r!\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This shows us why reducing the total number of permutations by
&lt;span class="math"&gt;\( r!\)&lt;/span&gt; doesn't work with replacement, but it doesn't
actually help us do the calculation, because we can't easily work out
how big the second batch is, nor what factor to reduce it by. However,
what if we pretend that, whenever we get repetition due to the items
being replaced, an item being selected a second time is actually a new
item? So instead of (1,1) we could perhaps write (1,1′), with the prime
on the second 1 indicating our pretense that it's a different item. If
we had (1,1,2,1) for an &lt;span class="math"&gt;\( r = 4\)&lt;/span&gt; trial, we'd call
it (1,1′,2,1′′), indicating that the three instances where 1 was
selected should all be treated as if they were different items. We're
now back in the realm of permutations without replacement, for which the
formula is &lt;span class="math"&gt;\( m! /r!\left(m-r\right)!\)&lt;/span&gt;, where now
we're using &lt;span class="math"&gt;\( m\)&lt;/span&gt;, for the "expanded" number of
items to choose from as a consequence of replacement being allowed,
rather than &lt;span class="math"&gt;\( n\)&lt;/span&gt;, the true number of distinct
items. Now we just need to work out &lt;span class="math"&gt;\( m\)&lt;/span&gt;. It turns
out that:&lt;/p&gt;
&lt;div class="math"&gt;$$ m = n + r - 1 $$&lt;/div&gt;
&lt;p&gt;That is, selecting &lt;em&gt;with&lt;/em&gt; replacement from a pool of &lt;span class="math"&gt;\( n\)&lt;/span&gt;
is like selecting &lt;em&gt;without&lt;/em&gt; replacement from a pool of
&lt;span class="math"&gt;\( n + r - 1\)&lt;/span&gt;. There are &lt;span class="math"&gt;\( r - 1\)&lt;/span&gt;
extra possibilities to select from, because once we
have selected the first item, the remaining &lt;span class="math"&gt;\( r - 1\)&lt;/span&gt;
items could be (in reality) the same item every time,
but we are pretending that they are different. Hence, substituting for
&lt;span class="math"&gt;\( m\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ \frac{m!}{\left(m - r\right)!} = \frac{\left(n + r - 1\right)!}{\left(n
- 1\right)!} $$&lt;/div&gt;
&lt;p&gt;This gives us the number of permutations, which we &lt;em&gt;can&lt;/em&gt; now reduce by
&lt;span class="math"&gt;\( r!\)&lt;/span&gt; to get the number of combinations. Our final
formula is therefore:&lt;/p&gt;
&lt;div class="math"&gt;$$ M = \frac{\left(n + r - 1\right)!}{ r!\left(n - 1\right)!}
$$&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="combinations"></category><category term="combinatorics"></category><category term="factorial"></category><category term="julia"></category><category term="permutations"></category><category term="python"></category></entry><entry><title>Connecting Wordpress to Twitter with IFTTT</title><link href="http://0x7df.github.io/connecting-wordpress-to-twitter-via-ifttt.html" rel="alternate"></link><published>2015-02-14T20:40:00+00:00</published><updated>2015-02-14T20:40:00+00:00</updated><author><name>0x7df</name></author><id>tag:0x7df.github.io,2015-02-14:/connecting-wordpress-to-twitter-via-ifttt.html</id><summary type="html">&lt;p&gt;It's possible to string together web services - like
&lt;a href="https://wordpress.com"&gt;WordPress&lt;/a&gt;, &lt;a href="http://twitter.com"&gt;Twitter&lt;/a&gt;,
&lt;a href="https://www.facebook.com"&gt;Facebook&lt;/a&gt;, &lt;a href="https://www.gmail.com"&gt;Gmail&lt;/a&gt;,
&lt;a href="https://www.tumblr.com"&gt;Tumblr&lt;/a&gt;, &lt;a href="https://evernote.com/"&gt;Evernote&lt;/a&gt;,
etc. - using &lt;a href="http://ifttt.com"&gt;&lt;em&gt;If This Then
That&lt;/em&gt;&lt;/a&gt; (&lt;a href="http://ifttt.com"&gt;&lt;em&gt;IFTTT&lt;/em&gt;&lt;/a&gt; for short).&lt;/p&gt;
&lt;p&gt;In IFTTT, you create &lt;em&gt;Recipes&lt;/em&gt;, each of which consists of a &lt;em&gt;Trigger&lt;/em&gt;,
and an &lt;em&gt;Action.&lt;/em&gt; Whenever you do something that is a Trigger for one of
your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's possible to string together web services - like
&lt;a href="https://wordpress.com"&gt;WordPress&lt;/a&gt;, &lt;a href="http://twitter.com"&gt;Twitter&lt;/a&gt;,
&lt;a href="https://www.facebook.com"&gt;Facebook&lt;/a&gt;, &lt;a href="https://www.gmail.com"&gt;Gmail&lt;/a&gt;,
&lt;a href="https://www.tumblr.com"&gt;Tumblr&lt;/a&gt;, &lt;a href="https://evernote.com/"&gt;Evernote&lt;/a&gt;,
etc. - using &lt;a href="http://ifttt.com"&gt;&lt;em&gt;If This Then
That&lt;/em&gt;&lt;/a&gt; (&lt;a href="http://ifttt.com"&gt;&lt;em&gt;IFTTT&lt;/em&gt;&lt;/a&gt; for short).&lt;/p&gt;
&lt;p&gt;In IFTTT, you create &lt;em&gt;Recipes&lt;/em&gt;, each of which consists of a &lt;em&gt;Trigger&lt;/em&gt;,
and an &lt;em&gt;Action.&lt;/em&gt; Whenever you do something that is a Trigger for one of
your Recipes (like publishing a new WordPress blog post for example),
then the associated Action (such as tweeting the link to the blog post)
is automatically performed for you.&lt;/p&gt;
&lt;p&gt;I've added a pre-existing recipe to my IFTTT account that does exactly
that, and this blog entry is to test it.&lt;/p&gt;</content><category term="computing"></category></entry></feed>